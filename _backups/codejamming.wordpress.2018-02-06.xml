<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.9.3" created="2018-02-06 06:49" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Code Jamming</title>
	<link>http://code.jamming.com.ua</link>
	<description>Everyday IT problems, solutions and discussions</description>
	<pubDate>Tue, 06 Feb 2018 06:49:33 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://code.jamming.com.ua</wp:base_site_url>
	<wp:base_blog_url>http://code.jamming.com.ua</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[latobcode]]></wp:author_login><wp:author_email><![CDATA[contact@jamming.com.ua]]></wp:author_email><wp:author_display_name><![CDATA[latobcode]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category>
		<wp:term_id>2</wp:term_id>
		<wp:category_nicename><![CDATA[android]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Android]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>3</wp:term_id>
		<wp:category_nicename><![CDATA[emacs]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Emacs]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>4</wp:term_id>
		<wp:category_nicename><![CDATA[humour]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Humour]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>5</wp:term_id>
		<wp:category_nicename><![CDATA[linux-2]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Linux]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>6</wp:term_id>
		<wp:category_nicename><![CDATA[programming]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Programming]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>202</wp:term_id>
		<wp:category_nicename><![CDATA[qt]]></wp:category_nicename>
		<wp:category_parent><![CDATA[programming]]></wp:category_parent>
		<wp:cat_name><![CDATA[Qt]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>7</wp:term_id>
		<wp:category_nicename><![CDATA[ruby-programming]]></wp:category_nicename>
		<wp:category_parent><![CDATA[programming]]></wp:category_parent>
		<wp:cat_name><![CDATA[Ruby]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>1</wp:term_id>
		<wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename>
		<wp:category_parent><![CDATA[]]></wp:category_parent>
		<wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>190</wp:term_id>
		<wp:category_nicename><![CDATA[c]]></wp:category_nicename>
		<wp:category_parent><![CDATA[programming]]></wp:category_parent>
		<wp:cat_name><![CDATA[C++]]></wp:cat_name>
	</wp:category>
	<wp:category>
		<wp:term_id>273</wp:term_id>
		<wp:category_nicename><![CDATA[embedded]]></wp:category_nicename>
		<wp:category_parent><![CDATA[programming]]></wp:category_parent>
		<wp:cat_name><![CDATA[Embedded]]></wp:cat_name>
	</wp:category>
	<wp:tag>
		<wp:term_id>8</wp:term_id>
		<wp:tag_slug><![CDATA[net]]></wp:tag_slug>
		<wp:tag_name><![CDATA[.net]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>163</wp:term_id>
		<wp:tag_slug><![CDATA[12-bit]]></wp:tag_slug>
		<wp:tag_name><![CDATA[12 bit]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>9</wp:term_id>
		<wp:tag_slug><![CDATA[1248]]></wp:tag_slug>
		<wp:tag_name><![CDATA[1248]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>10</wp:term_id>
		<wp:tag_slug><![CDATA[1248ub]]></wp:tag_slug>
		<wp:tag_name><![CDATA[1248ub]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>164</wp:term_id>
		<wp:tag_slug><![CDATA[14-bit]]></wp:tag_slug>
		<wp:tag_name><![CDATA[14 bit]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>11</wp:term_id>
		<wp:tag_slug><![CDATA[acm]]></wp:tag_slug>
		<wp:tag_name><![CDATA[acm]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>12</wp:term_id>
		<wp:tag_slug><![CDATA[addons]]></wp:tag_slug>
		<wp:tag_name><![CDATA[addons]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>154</wp:term_id>
		<wp:tag_slug><![CDATA[adobe]]></wp:tag_slug>
		<wp:tag_name><![CDATA[adobe]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>180</wp:term_id>
		<wp:tag_slug><![CDATA[aes]]></wp:tag_slug>
		<wp:tag_name><![CDATA[aes]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>13</wp:term_id>
		<wp:tag_slug><![CDATA[ai]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ai]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>229</wp:term_id>
		<wp:tag_slug><![CDATA[alternative]]></wp:tag_slug>
		<wp:tag_name><![CDATA[alternative]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>14</wp:term_id>
		<wp:tag_slug><![CDATA[amazon]]></wp:tag_slug>
		<wp:tag_name><![CDATA[amazon]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>15</wp:term_id>
		<wp:tag_slug><![CDATA[android-2]]></wp:tag_slug>
		<wp:tag_name><![CDATA[android]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>16</wp:term_id>
		<wp:tag_slug><![CDATA[apache]]></wp:tag_slug>
		<wp:tag_name><![CDATA[apache]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>168</wp:term_id>
		<wp:tag_slug><![CDATA[api]]></wp:tag_slug>
		<wp:tag_name><![CDATA[api]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>267</wp:term_id>
		<wp:tag_slug><![CDATA[arduino]]></wp:tag_slug>
		<wp:tag_name><![CDATA[arduino]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>17</wp:term_id>
		<wp:tag_slug><![CDATA[array]]></wp:tag_slug>
		<wp:tag_name><![CDATA[array]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>18</wp:term_id>
		<wp:tag_slug><![CDATA[at-spi2-core]]></wp:tag_slug>
		<wp:tag_name><![CDATA[at-spi2-core]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>19</wp:term_id>
		<wp:tag_slug><![CDATA[autocomplete]]></wp:tag_slug>
		<wp:tag_name><![CDATA[autocomplete]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>20</wp:term_id>
		<wp:tag_slug><![CDATA[autostart]]></wp:tag_slug>
		<wp:tag_name><![CDATA[autostart]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>21</wp:term_id>
		<wp:tag_slug><![CDATA[bag]]></wp:tag_slug>
		<wp:tag_name><![CDATA[bag]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>22</wp:term_id>
		<wp:tag_slug><![CDATA[bash]]></wp:tag_slug>
		<wp:tag_name><![CDATA[bash]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>261</wp:term_id>
		<wp:tag_slug><![CDATA[berkeleydb]]></wp:tag_slug>
		<wp:tag_name><![CDATA[berkeleydb]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>23</wp:term_id>
		<wp:tag_slug><![CDATA[binaries]]></wp:tag_slug>
		<wp:tag_name><![CDATA[binaries]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>174</wp:term_id>
		<wp:tag_slug><![CDATA[binary]]></wp:tag_slug>
		<wp:tag_name><![CDATA[binary]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>24</wp:term_id>
		<wp:tag_slug><![CDATA[book]]></wp:tag_slug>
		<wp:tag_name><![CDATA[book]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>171</wp:term_id>
		<wp:tag_slug><![CDATA[build]]></wp:tag_slug>
		<wp:tag_name><![CDATA[build]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>25</wp:term_id>
		<wp:tag_slug><![CDATA[c]]></wp:tag_slug>
		<wp:tag_name><![CDATA[c++]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>26</wp:term_id>
		<wp:tag_slug><![CDATA[cedet]]></wp:tag_slug>
		<wp:tag_name><![CDATA[cedet]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>27</wp:term_id>
		<wp:tag_slug><![CDATA[centos]]></wp:tag_slug>
		<wp:tag_name><![CDATA[centos]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>217</wp:term_id>
		<wp:tag_slug><![CDATA[checking]]></wp:tag_slug>
		<wp:tag_name><![CDATA[checking]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>28</wp:term_id>
		<wp:tag_slug><![CDATA[chess]]></wp:tag_slug>
		<wp:tag_name><![CDATA[chess]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>29</wp:term_id>
		<wp:tag_slug><![CDATA[chessprogramming]]></wp:tag_slug>
		<wp:tag_name><![CDATA[chessprogramming]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>225</wp:term_id>
		<wp:tag_slug><![CDATA[clr]]></wp:tag_slug>
		<wp:tag_name><![CDATA[clr]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>263</wp:term_id>
		<wp:tag_slug><![CDATA[combobox]]></wp:tag_slug>
		<wp:tag_name><![CDATA[combobox]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>30</wp:term_id>
		<wp:tag_slug><![CDATA[competencies]]></wp:tag_slug>
		<wp:tag_name><![CDATA[competencies]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>31</wp:term_id>
		<wp:tag_slug><![CDATA[compilation]]></wp:tag_slug>
		<wp:tag_name><![CDATA[compilation]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>32</wp:term_id>
		<wp:tag_slug><![CDATA[config]]></wp:tag_slug>
		<wp:tag_name><![CDATA[config]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>33</wp:term_id>
		<wp:tag_slug><![CDATA[config-el]]></wp:tag_slug>
		<wp:tag_name><![CDATA[config.el]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>34</wp:term_id>
		<wp:tag_slug><![CDATA[configs]]></wp:tag_slug>
		<wp:tag_name><![CDATA[configs]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>213</wp:term_id>
		<wp:tag_slug><![CDATA[consumer]]></wp:tag_slug>
		<wp:tag_name><![CDATA[consumer]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>35</wp:term_id>
		<wp:tag_slug><![CDATA[contest]]></wp:tag_slug>
		<wp:tag_name><![CDATA[contest]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>36</wp:term_id>
		<wp:tag_slug><![CDATA[continuous-integration]]></wp:tag_slug>
		<wp:tag_name><![CDATA[continuous integration]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>37</wp:term_id>
		<wp:tag_slug><![CDATA[cpu]]></wp:tag_slug>
		<wp:tag_name><![CDATA[cpu]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>248</wp:term_id>
		<wp:tag_slug><![CDATA[craftmanship]]></wp:tag_slug>
		<wp:tag_name><![CDATA[craftmanship]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>209</wp:term_id>
		<wp:tag_slug><![CDATA[cross-platform]]></wp:tag_slug>
		<wp:tag_name><![CDATA[cross-platform]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>38</wp:term_id>
		<wp:tag_slug><![CDATA[csharp]]></wp:tag_slug>
		<wp:tag_name><![CDATA[csharp]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>231</wp:term_id>
		<wp:tag_slug><![CDATA[curl]]></wp:tag_slug>
		<wp:tag_name><![CDATA[curl]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>266</wp:term_id>
		<wp:tag_slug><![CDATA[custom]]></wp:tag_slug>
		<wp:tag_name><![CDATA[custom]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>158</wp:term_id>
		<wp:tag_slug><![CDATA[d5300]]></wp:tag_slug>
		<wp:tag_name><![CDATA[d5300]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>150</wp:term_id>
		<wp:tag_slug><![CDATA[darktable]]></wp:tag_slug>
		<wp:tag_name><![CDATA[darktable]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>183</wp:term_id>
		<wp:tag_slug><![CDATA[data]]></wp:tag_slug>
		<wp:tag_name><![CDATA[data]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>39</wp:term_id>
		<wp:tag_slug><![CDATA[data-structure]]></wp:tag_slug>
		<wp:tag_name><![CDATA[data structure]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>40</wp:term_id>
		<wp:tag_slug><![CDATA[database]]></wp:tag_slug>
		<wp:tag_name><![CDATA[database]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>235</wp:term_id>
		<wp:tag_slug><![CDATA[deadline]]></wp:tag_slug>
		<wp:tag_name><![CDATA[deadline]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>41</wp:term_id>
		<wp:tag_slug><![CDATA[delay]]></wp:tag_slug>
		<wp:tag_name><![CDATA[delay]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>42</wp:term_id>
		<wp:tag_slug><![CDATA[development]]></wp:tag_slug>
		<wp:tag_name><![CDATA[development]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>269</wp:term_id>
		<wp:tag_slug><![CDATA[dht]]></wp:tag_slug>
		<wp:tag_name><![CDATA[dht]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>176</wp:term_id>
		<wp:tag_slug><![CDATA[dictionary]]></wp:tag_slug>
		<wp:tag_name><![CDATA[dictionary]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>43</wp:term_id>
		<wp:tag_slug><![CDATA[digital]]></wp:tag_slug>
		<wp:tag_name><![CDATA[digital]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>153</wp:term_id>
		<wp:tag_slug><![CDATA[dng]]></wp:tag_slug>
		<wp:tag_name><![CDATA[dng]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>44</wp:term_id>
		<wp:tag_slug><![CDATA[dos]]></wp:tag_slug>
		<wp:tag_name><![CDATA[dos]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>173</wp:term_id>
		<wp:tag_slug><![CDATA[download]]></wp:tag_slug>
		<wp:tag_name><![CDATA[download]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>45</wp:term_id>
		<wp:tag_slug><![CDATA[downto]]></wp:tag_slug>
		<wp:tag_name><![CDATA[downto]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>204</wp:term_id>
		<wp:tag_slug><![CDATA[drag]]></wp:tag_slug>
		<wp:tag_name><![CDATA[drag]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>205</wp:term_id>
		<wp:tag_slug><![CDATA[drop]]></wp:tag_slug>
		<wp:tag_name><![CDATA[drop]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>194</wp:term_id>
		<wp:tag_slug><![CDATA[dropbox]]></wp:tag_slug>
		<wp:tag_name><![CDATA[dropbox]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>253</wp:term_id>
		<wp:tag_slug><![CDATA[duckduckgo]]></wp:tag_slug>
		<wp:tag_name><![CDATA[duckduckgo]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>177</wp:term_id>
		<wp:tag_slug><![CDATA[efficient]]></wp:tag_slug>
		<wp:tag_name><![CDATA[efficient]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>49</wp:term_id>
		<wp:tag_slug><![CDATA[eject]]></wp:tag_slug>
		<wp:tag_name><![CDATA[eject]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>192</wp:term_id>
		<wp:tag_slug><![CDATA[emacs]]></wp:tag_slug>
		<wp:tag_name><![CDATA[Emacs]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>262</wp:term_id>
		<wp:tag_slug><![CDATA[embedded]]></wp:tag_slug>
		<wp:tag_name><![CDATA[embedded]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>179</wp:term_id>
		<wp:tag_slug><![CDATA[encryption]]></wp:tag_slug>
		<wp:tag_name><![CDATA[encryption]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>50</wp:term_id>
		<wp:tag_slug><![CDATA[engine]]></wp:tag_slug>
		<wp:tag_name><![CDATA[engine]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>236</wp:term_id>
		<wp:tag_slug><![CDATA[engineer]]></wp:tag_slug>
		<wp:tag_name><![CDATA[engineer]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>51</wp:term_id>
		<wp:tag_slug><![CDATA[eol]]></wp:tag_slug>
		<wp:tag_name><![CDATA[eol]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>220</wp:term_id>
		<wp:tag_slug><![CDATA[error]]></wp:tag_slug>
		<wp:tag_name><![CDATA[error]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>234</wp:term_id>
		<wp:tag_slug><![CDATA[experience]]></wp:tag_slug>
		<wp:tag_name><![CDATA[experience]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>52</wp:term_id>
		<wp:tag_slug><![CDATA[ff]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ff]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>241</wp:term_id>
		<wp:tag_slug><![CDATA[ffmpeg]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ffmpeg]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>53</wp:term_id>
		<wp:tag_slug><![CDATA[firefox]]></wp:tag_slug>
		<wp:tag_name><![CDATA[firefox]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>54</wp:term_id>
		<wp:tag_slug><![CDATA[flymake]]></wp:tag_slug>
		<wp:tag_name><![CDATA[flymake]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>55</wp:term_id>
		<wp:tag_slug><![CDATA[from]]></wp:tag_slug>
		<wp:tag_name><![CDATA[from]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>56</wp:term_id>
		<wp:tag_slug><![CDATA[future]]></wp:tag_slug>
		<wp:tag_name><![CDATA[future]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>169</wp:term_id>
		<wp:tag_slug><![CDATA[games]]></wp:tag_slug>
		<wp:tag_name><![CDATA[games]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>57</wp:term_id>
		<wp:tag_slug><![CDATA[generic]]></wp:tag_slug>
		<wp:tag_name><![CDATA[generic]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>165</wp:term_id>
		<wp:tag_slug><![CDATA[gimp]]></wp:tag_slug>
		<wp:tag_name><![CDATA[gimp]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>249</wp:term_id>
		<wp:tag_slug><![CDATA[github]]></wp:tag_slug>
		<wp:tag_name><![CDATA[github]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>274</wp:term_id>
		<wp:tag_slug><![CDATA[golang]]></wp:tag_slug>
		<wp:tag_name><![CDATA[golang]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>191</wp:term_id>
		<wp:tag_slug><![CDATA[hack]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hack]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>58</wp:term_id>
		<wp:tag_slug><![CDATA[hang]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hang]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>59</wp:term_id>
		<wp:tag_slug><![CDATA[hangs]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hangs]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>170</wp:term_id>
		<wp:tag_slug><![CDATA[hedgewars]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hedgewars]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>60</wp:term_id>
		<wp:tag_slug><![CDATA[herb]]></wp:tag_slug>
		<wp:tag_name><![CDATA[herb]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>61</wp:term_id>
		<wp:tag_slug><![CDATA[how-to]]></wp:tag_slug>
		<wp:tag_name><![CDATA[how-to]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>175</wp:term_id>
		<wp:tag_slug><![CDATA[howto]]></wp:tag_slug>
		<wp:tag_name><![CDATA[howto]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>218</wp:term_id>
		<wp:tag_slug><![CDATA[hunspell]]></wp:tag_slug>
		<wp:tag_name><![CDATA[hunspell]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>160</wp:term_id>
		<wp:tag_slug><![CDATA[import]]></wp:tag_slug>
		<wp:tag_name><![CDATA[import]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>62</wp:term_id>
		<wp:tag_slug><![CDATA[include]]></wp:tag_slug>
		<wp:tag_name><![CDATA[include]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>63</wp:term_id>
		<wp:tag_slug><![CDATA[inhibit-eol-convension]]></wp:tag_slug>
		<wp:tag_name><![CDATA[inhibit-eol-convension]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>64</wp:term_id>
		<wp:tag_slug><![CDATA[init]]></wp:tag_slug>
		<wp:tag_name><![CDATA[init]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>65</wp:term_id>
		<wp:tag_slug><![CDATA[init-d]]></wp:tag_slug>
		<wp:tag_name><![CDATA[init.d]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>66</wp:term_id>
		<wp:tag_slug><![CDATA[installation]]></wp:tag_slug>
		<wp:tag_name><![CDATA[installation]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>211</wp:term_id>
		<wp:tag_slug><![CDATA[interface]]></wp:tag_slug>
		<wp:tag_name><![CDATA[interface]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>161</wp:term_id>
		<wp:tag_slug><![CDATA[internal-error]]></wp:tag_slug>
		<wp:tag_name><![CDATA[internal error]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>67</wp:term_id>
		<wp:tag_slug><![CDATA[interview]]></wp:tag_slug>
		<wp:tag_name><![CDATA[interview]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>272</wp:term_id>
		<wp:tag_slug><![CDATA[iot]]></wp:tag_slug>
		<wp:tag_name><![CDATA[iot]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>68</wp:term_id>
		<wp:tag_slug><![CDATA[iptables]]></wp:tag_slug>
		<wp:tag_name><![CDATA[iptables]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>188</wp:term_id>
		<wp:tag_slug><![CDATA[issue]]></wp:tag_slug>
		<wp:tag_name><![CDATA[issue]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>195</wp:term_id>
		<wp:tag_slug><![CDATA[javascript]]></wp:tag_slug>
		<wp:tag_name><![CDATA[javascript]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>69</wp:term_id>
		<wp:tag_slug><![CDATA[jetbrains]]></wp:tag_slug>
		<wp:tag_name><![CDATA[jetbrains]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>70</wp:term_id>
		<wp:tag_slug><![CDATA[kernel]]></wp:tag_slug>
		<wp:tag_name><![CDATA[kernel]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>256</wp:term_id>
		<wp:tag_slug><![CDATA[key-value]]></wp:tag_slug>
		<wp:tag_name><![CDATA[key-value]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>71</wp:term_id>
		<wp:tag_slug><![CDATA[lag]]></wp:tag_slug>
		<wp:tag_name><![CDATA[lag]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>72</wp:term_id>
		<wp:tag_slug><![CDATA[laptop-mode]]></wp:tag_slug>
		<wp:tag_name><![CDATA[laptop-mode]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>242</wp:term_id>
		<wp:tag_slug><![CDATA[libav]]></wp:tag_slug>
		<wp:tag_name><![CDATA[libav]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>232</wp:term_id>
		<wp:tag_slug><![CDATA[libcurl]]></wp:tag_slug>
		<wp:tag_name><![CDATA[libcurl]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>73</wp:term_id>
		<wp:tag_slug><![CDATA[links]]></wp:tag_slug>
		<wp:tag_name><![CDATA[links]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>74</wp:term_id>
		<wp:tag_slug><![CDATA[linux]]></wp:tag_slug>
		<wp:tag_name><![CDATA[linux]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>251</wp:term_id>
		<wp:tag_slug><![CDATA[linuxdeploy]]></wp:tag_slug>
		<wp:tag_name><![CDATA[linuxdeploy]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>75</wp:term_id>
		<wp:tag_slug><![CDATA[list]]></wp:tag_slug>
		<wp:tag_name><![CDATA[list]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>186</wp:term_id>
		<wp:tag_slug><![CDATA[login]]></wp:tag_slug>
		<wp:tag_name><![CDATA[login]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>76</wp:term_id>
		<wp:tag_slug><![CDATA[loops]]></wp:tag_slug>
		<wp:tag_name><![CDATA[loops]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>199</wp:term_id>
		<wp:tag_slug><![CDATA[mac]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mac]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>77</wp:term_id>
		<wp:tag_slug><![CDATA[make]]></wp:tag_slug>
		<wp:tag_name><![CDATA[make]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>208</wp:term_id>
		<wp:tag_slug><![CDATA[makefile]]></wp:tag_slug>
		<wp:tag_name><![CDATA[makefile]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>185</wp:term_id>
		<wp:tag_slug><![CDATA[management-studio]]></wp:tag_slug>
		<wp:tag_name><![CDATA[management studio]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>78</wp:term_id>
		<wp:tag_slug><![CDATA[materials]]></wp:tag_slug>
		<wp:tag_name><![CDATA[materials]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>79</wp:term_id>
		<wp:tag_slug><![CDATA[matrix]]></wp:tag_slug>
		<wp:tag_name><![CDATA[matrix]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>80</wp:term_id>
		<wp:tag_slug><![CDATA[mediawiki]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mediawiki]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>197</wp:term_id>
		<wp:tag_slug><![CDATA[microstock]]></wp:tag_slug>
		<wp:tag_name><![CDATA[microstock]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>250</wp:term_id>
		<wp:tag_slug><![CDATA[mman]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mman]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>207</wp:term_id>
		<wp:tag_slug><![CDATA[model]]></wp:tag_slug>
		<wp:tag_name><![CDATA[model]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>81</wp:term_id>
		<wp:tag_slug><![CDATA[mono]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mono]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>82</wp:term_id>
		<wp:tag_slug><![CDATA[mouse]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mouse]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>214</wp:term_id>
		<wp:tag_slug><![CDATA[multithreading]]></wp:tag_slug>
		<wp:tag_name><![CDATA[multithreading]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>83</wp:term_id>
		<wp:tag_slug><![CDATA[mustek]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mustek]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>222</wp:term_id>
		<wp:tag_slug><![CDATA[mutex]]></wp:tag_slug>
		<wp:tag_name><![CDATA[mutex]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>219</wp:term_id>
		<wp:tag_slug><![CDATA[myspell]]></wp:tag_slug>
		<wp:tag_name><![CDATA[myspell]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>152</wp:term_id>
		<wp:tag_slug><![CDATA[nef]]></wp:tag_slug>
		<wp:tag_name><![CDATA[nef]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>157</wp:term_id>
		<wp:tag_slug><![CDATA[nikon]]></wp:tag_slug>
		<wp:tag_name><![CDATA[nikon]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>255</wp:term_id>
		<wp:tag_slug><![CDATA[nosql]]></wp:tag_slug>
		<wp:tag_name><![CDATA[nosql]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>84</wp:term_id>
		<wp:tag_slug><![CDATA[numbers]]></wp:tag_slug>
		<wp:tag_name><![CDATA[numbers]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>237</wp:term_id>
		<wp:tag_slug><![CDATA[on-call]]></wp:tag_slug>
		<wp:tag_name><![CDATA[on-call]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>155</wp:term_id>
		<wp:tag_slug><![CDATA[open]]></wp:tag_slug>
		<wp:tag_name><![CDATA[open]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>247</wp:term_id>
		<wp:tag_slug><![CDATA[open-source]]></wp:tag_slug>
		<wp:tag_name><![CDATA[open source]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>85</wp:term_id>
		<wp:tag_slug><![CDATA[opengl]]></wp:tag_slug>
		<wp:tag_name><![CDATA[opengl]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>86</wp:term_id>
		<wp:tag_slug><![CDATA[opensuse]]></wp:tag_slug>
		<wp:tag_name><![CDATA[opensuse]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>87</wp:term_id>
		<wp:tag_slug><![CDATA[opentk]]></wp:tag_slug>
		<wp:tag_name><![CDATA[opentk]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>88</wp:term_id>
		<wp:tag_slug><![CDATA[org-a11y-bus]]></wp:tag_slug>
		<wp:tag_name><![CDATA[org.a11y.Bus]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>172</wp:term_id>
		<wp:tag_slug><![CDATA[os-x]]></wp:tag_slug>
		<wp:tag_name><![CDATA[os x]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>89</wp:term_id>
		<wp:tag_slug><![CDATA[output]]></wp:tag_slug>
		<wp:tag_name><![CDATA[output]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>239</wp:term_id>
		<wp:tag_slug><![CDATA[overnight]]></wp:tag_slug>
		<wp:tag_name><![CDATA[overnight]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>240</wp:term_id>
		<wp:tag_slug><![CDATA[overtime]]></wp:tag_slug>
		<wp:tag_name><![CDATA[overtime]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>221</wp:term_id>
		<wp:tag_slug><![CDATA[parallel]]></wp:tag_slug>
		<wp:tag_name><![CDATA[parallel]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>196</wp:term_id>
		<wp:tag_slug><![CDATA[parse]]></wp:tag_slug>
		<wp:tag_name><![CDATA[parse]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>245</wp:term_id>
		<wp:tag_slug><![CDATA[path]]></wp:tag_slug>
		<wp:tag_name><![CDATA[path]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>215</wp:term_id>
		<wp:tag_slug><![CDATA[pattern]]></wp:tag_slug>
		<wp:tag_name><![CDATA[pattern]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>90</wp:term_id>
		<wp:tag_slug><![CDATA[payment]]></wp:tag_slug>
		<wp:tag_name><![CDATA[payment]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>149</wp:term_id>
		<wp:tag_slug><![CDATA[photography]]></wp:tag_slug>
		<wp:tag_name><![CDATA[photography]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>167</wp:term_id>
		<wp:tag_slug><![CDATA[plug-in]]></wp:tag_slug>
		<wp:tag_name><![CDATA[plug-in]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>166</wp:term_id>
		<wp:tag_slug><![CDATA[plugin]]></wp:tag_slug>
		<wp:tag_name><![CDATA[plugin]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>91</wp:term_id>
		<wp:tag_slug><![CDATA[postgresql]]></wp:tag_slug>
		<wp:tag_name><![CDATA[postgresql]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>92</wp:term_id>
		<wp:tag_slug><![CDATA[prepare]]></wp:tag_slug>
		<wp:tag_name><![CDATA[prepare]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>93</wp:term_id>
		<wp:tag_slug><![CDATA[presentation]]></wp:tag_slug>
		<wp:tag_name><![CDATA[presentation]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>94</wp:term_id>
		<wp:tag_slug><![CDATA[problem]]></wp:tag_slug>
		<wp:tag_name><![CDATA[problem]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>212</wp:term_id>
		<wp:tag_slug><![CDATA[producer]]></wp:tag_slug>
		<wp:tag_name><![CDATA[producer]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>95</wp:term_id>
		<wp:tag_slug><![CDATA[programming-2]]></wp:tag_slug>
		<wp:tag_name><![CDATA[programming]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>96</wp:term_id>
		<wp:tag_slug><![CDATA[pure]]></wp:tag_slug>
		<wp:tag_name><![CDATA[pure]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>97</wp:term_id>
		<wp:tag_slug><![CDATA[pyflake]]></wp:tag_slug>
		<wp:tag_name><![CDATA[pyflake]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>98</wp:term_id>
		<wp:tag_slug><![CDATA[python]]></wp:tag_slug>
		<wp:tag_name><![CDATA[python]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>206</wp:term_id>
		<wp:tag_slug><![CDATA[qml]]></wp:tag_slug>
		<wp:tag_name><![CDATA[qml]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>228</wp:term_id>
		<wp:tag_slug><![CDATA[qnetworkaccessmanager]]></wp:tag_slug>
		<wp:tag_name><![CDATA[qnetworkaccessmanager]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>224</wp:term_id>
		<wp:tag_slug><![CDATA[qnx]]></wp:tag_slug>
		<wp:tag_name><![CDATA[qnx]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>181</wp:term_id>
		<wp:tag_slug><![CDATA[qt]]></wp:tag_slug>
		<wp:tag_name><![CDATA[qt]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>99</wp:term_id>
		<wp:tag_slug><![CDATA[queem]]></wp:tag_slug>
		<wp:tag_name><![CDATA[queem]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>264</wp:term_id>
		<wp:tag_slug><![CDATA[quick]]></wp:tag_slug>
		<wp:tag_name><![CDATA[quick]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>100</wp:term_id>
		<wp:tag_slug><![CDATA[rails]]></wp:tag_slug>
		<wp:tag_name><![CDATA[rails]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>268</wp:term_id>
		<wp:tag_slug><![CDATA[raspberry-pi]]></wp:tag_slug>
		<wp:tag_name><![CDATA[raspberry pi]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>151</wp:term_id>
		<wp:tag_slug><![CDATA[raw]]></wp:tag_slug>
		<wp:tag_name><![CDATA[raw]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>101</wp:term_id>
		<wp:tag_slug><![CDATA[rebel]]></wp:tag_slug>
		<wp:tag_name><![CDATA[rebel]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>227</wp:term_id>
		<wp:tag_slug><![CDATA[recommendation]]></wp:tag_slug>
		<wp:tag_name><![CDATA[recommendation]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>162</wp:term_id>
		<wp:tag_slug><![CDATA[refresh]]></wp:tag_slug>
		<wp:tag_name><![CDATA[refresh]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>102</wp:term_id>
		<wp:tag_slug><![CDATA[remote]]></wp:tag_slug>
		<wp:tag_name><![CDATA[remote]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>103</wp:term_id>
		<wp:tag_slug><![CDATA[remove]]></wp:tag_slug>
		<wp:tag_name><![CDATA[remove]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>230</wp:term_id>
		<wp:tag_slug><![CDATA[replacement]]></wp:tag_slug>
		<wp:tag_name><![CDATA[replacement]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>258</wp:term_id>
		<wp:tag_slug><![CDATA[review]]></wp:tag_slug>
		<wp:tag_name><![CDATA[review]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>226</wp:term_id>
		<wp:tag_slug><![CDATA[richter]]></wp:tag_slug>
		<wp:tag_name><![CDATA[richter]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>259</wp:term_id>
		<wp:tag_slug><![CDATA[rocksdb]]></wp:tag_slug>
		<wp:tag_name><![CDATA[rocksdb]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>104</wp:term_id>
		<wp:tag_slug><![CDATA[ropemacs]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ropemacs]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>238</wp:term_id>
		<wp:tag_slug><![CDATA[rotation]]></wp:tag_slug>
		<wp:tag_name><![CDATA[rotation]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>105</wp:term_id>
		<wp:tag_slug><![CDATA[ruby]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ruby]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>106</wp:term_id>
		<wp:tag_slug><![CDATA[ruby-like]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ruby-like]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>107</wp:term_id>
		<wp:tag_slug><![CDATA[safe]]></wp:tag_slug>
		<wp:tag_name><![CDATA[safe]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>108</wp:term_id>
		<wp:tag_slug><![CDATA[scanner]]></wp:tag_slug>
		<wp:tag_name><![CDATA[scanner]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>109</wp:term_id>
		<wp:tag_slug><![CDATA[scratch]]></wp:tag_slug>
		<wp:tag_name><![CDATA[scratch]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>110</wp:term_id>
		<wp:tag_slug><![CDATA[script]]></wp:tag_slug>
		<wp:tag_name><![CDATA[script]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>187</wp:term_id>
		<wp:tag_slug><![CDATA[security]]></wp:tag_slug>
		<wp:tag_name><![CDATA[security]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>111</wp:term_id>
		<wp:tag_slug><![CDATA[semantic]]></wp:tag_slug>
		<wp:tag_name><![CDATA[semantic]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>223</wp:term_id>
		<wp:tag_slug><![CDATA[semaphore]]></wp:tag_slug>
		<wp:tag_name><![CDATA[semaphore]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>112</wp:term_id>
		<wp:tag_slug><![CDATA[sendmail]]></wp:tag_slug>
		<wp:tag_name><![CDATA[sendmail]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>270</wp:term_id>
		<wp:tag_slug><![CDATA[sensor]]></wp:tag_slug>
		<wp:tag_name><![CDATA[sensor]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>113</wp:term_id>
		<wp:tag_slug><![CDATA[server]]></wp:tag_slug>
		<wp:tag_name><![CDATA[server]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>114</wp:term_id>
		<wp:tag_slug><![CDATA[sharp]]></wp:tag_slug>
		<wp:tag_name><![CDATA[sharp]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>198</wp:term_id>
		<wp:tag_slug><![CDATA[software]]></wp:tag_slug>
		<wp:tag_name><![CDATA[software]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>189</wp:term_id>
		<wp:tag_slug><![CDATA[solution]]></wp:tag_slug>
		<wp:tag_name><![CDATA[solution]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>115</wp:term_id>
		<wp:tag_slug><![CDATA[solve]]></wp:tag_slug>
		<wp:tag_name><![CDATA[solve]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>116</wp:term_id>
		<wp:tag_slug><![CDATA[source-code]]></wp:tag_slug>
		<wp:tag_name><![CDATA[source code]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>117</wp:term_id>
		<wp:tag_slug><![CDATA[sources]]></wp:tag_slug>
		<wp:tag_name><![CDATA[sources]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>216</wp:term_id>
		<wp:tag_slug><![CDATA[spelling]]></wp:tag_slug>
		<wp:tag_name><![CDATA[spelling]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>118</wp:term_id>
		<wp:tag_slug><![CDATA[spiral]]></wp:tag_slug>
		<wp:tag_name><![CDATA[spiral]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>233</wp:term_id>
		<wp:tag_slug><![CDATA[spurious-wakeup]]></wp:tag_slug>
		<wp:tag_name><![CDATA[spurious wakeup]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>184</wp:term_id>
		<wp:tag_slug><![CDATA[sql-server]]></wp:tag_slug>
		<wp:tag_name><![CDATA[sql server]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>260</wp:term_id>
		<wp:tag_slug><![CDATA[sqlite]]></wp:tag_slug>
		<wp:tag_name><![CDATA[sqlite]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>119</wp:term_id>
		<wp:tag_slug><![CDATA[ssh]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ssh]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>252</wp:term_id>
		<wp:tag_slug><![CDATA[stardict]]></wp:tag_slug>
		<wp:tag_name><![CDATA[stardict]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>120</wp:term_id>
		<wp:tag_slug><![CDATA[startup]]></wp:tag_slug>
		<wp:tag_name><![CDATA[startup]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>121</wp:term_id>
		<wp:tag_slug><![CDATA[step]]></wp:tag_slug>
		<wp:tag_name><![CDATA[step]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>257</wp:term_id>
		<wp:tag_slug><![CDATA[storage]]></wp:tag_slug>
		<wp:tag_name><![CDATA[storage]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>122</wp:term_id>
		<wp:tag_slug><![CDATA[store]]></wp:tag_slug>
		<wp:tag_name><![CDATA[store]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>123</wp:term_id>
		<wp:tag_slug><![CDATA[string]]></wp:tag_slug>
		<wp:tag_name><![CDATA[string]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>124</wp:term_id>
		<wp:tag_slug><![CDATA[sutter]]></wp:tag_slug>
		<wp:tag_name><![CDATA[sutter]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>178</wp:term_id>
		<wp:tag_slug><![CDATA[switch]]></wp:tag_slug>
		<wp:tag_name><![CDATA[switch]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>125</wp:term_id>
		<wp:tag_slug><![CDATA[sync]]></wp:tag_slug>
		<wp:tag_name><![CDATA[sync]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>126</wp:term_id>
		<wp:tag_slug><![CDATA[system]]></wp:tag_slug>
		<wp:tag_name><![CDATA[system]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>127</wp:term_id>
		<wp:tag_slug><![CDATA[teamcity]]></wp:tag_slug>
		<wp:tag_name><![CDATA[teamcity]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>271</wp:term_id>
		<wp:tag_slug><![CDATA[temperature]]></wp:tag_slug>
		<wp:tag_name><![CDATA[temperature]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>128</wp:term_id>
		<wp:tag_slug><![CDATA[template]]></wp:tag_slug>
		<wp:tag_name><![CDATA[template]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>129</wp:term_id>
		<wp:tag_slug><![CDATA[test]]></wp:tag_slug>
		<wp:tag_name><![CDATA[test]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>182</wp:term_id>
		<wp:tag_slug><![CDATA[text]]></wp:tag_slug>
		<wp:tag_name><![CDATA[text]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>244</wp:term_id>
		<wp:tag_slug><![CDATA[thumbnail]]></wp:tag_slug>
		<wp:tag_name><![CDATA[thumbnail]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>130</wp:term_id>
		<wp:tag_slug><![CDATA[times]]></wp:tag_slug>
		<wp:tag_name><![CDATA[times]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>201</wp:term_id>
		<wp:tag_slug><![CDATA[tip]]></wp:tag_slug>
		<wp:tag_name><![CDATA[tip]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>131</wp:term_id>
		<wp:tag_slug><![CDATA[tomcat]]></wp:tag_slug>
		<wp:tag_name><![CDATA[tomcat]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>210</wp:term_id>
		<wp:tag_slug><![CDATA[tsv]]></wp:tag_slug>
		<wp:tag_name><![CDATA[tsv]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>132</wp:term_id>
		<wp:tag_slug><![CDATA[tutorial]]></wp:tag_slug>
		<wp:tag_name><![CDATA[tutorial]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>133</wp:term_id>
		<wp:tag_slug><![CDATA[udisks]]></wp:tag_slug>
		<wp:tag_name><![CDATA[udisks]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>265</wp:term_id>
		<wp:tag_slug><![CDATA[ui]]></wp:tag_slug>
		<wp:tag_name><![CDATA[ui]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>246</wp:term_id>
		<wp:tag_slug><![CDATA[unicode]]></wp:tag_slug>
		<wp:tag_name><![CDATA[unicode]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>134</wp:term_id>
		<wp:tag_slug><![CDATA[unix]]></wp:tag_slug>
		<wp:tag_name><![CDATA[unix]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>135</wp:term_id>
		<wp:tag_slug><![CDATA[unmount]]></wp:tag_slug>
		<wp:tag_name><![CDATA[unmount]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>136</wp:term_id>
		<wp:tag_slug><![CDATA[upto]]></wp:tag_slug>
		<wp:tag_name><![CDATA[upto]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>203</wp:term_id>
		<wp:tag_slug><![CDATA[url]]></wp:tag_slug>
		<wp:tag_name><![CDATA[url]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>243</wp:term_id>
		<wp:tag_slug><![CDATA[video]]></wp:tag_slug>
		<wp:tag_name><![CDATA[video]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>137</wp:term_id>
		<wp:tag_slug><![CDATA[virtualbox]]></wp:tag_slug>
		<wp:tag_name><![CDATA[virtualbox]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>138</wp:term_id>
		<wp:tag_slug><![CDATA[virtualhost]]></wp:tag_slug>
		<wp:tag_name><![CDATA[virtualhost]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>139</wp:term_id>
		<wp:tag_slug><![CDATA[warning]]></wp:tag_slug>
		<wp:tag_name><![CDATA[warning]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>140</wp:term_id>
		<wp:tag_slug><![CDATA[western]]></wp:tag_slug>
		<wp:tag_name><![CDATA[western]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>193</wp:term_id>
		<wp:tag_slug><![CDATA[wget]]></wp:tag_slug>
		<wp:tag_name><![CDATA[wget]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>141</wp:term_id>
		<wp:tag_slug><![CDATA[wiki]]></wp:tag_slug>
		<wp:tag_name><![CDATA[wiki]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>142</wp:term_id>
		<wp:tag_slug><![CDATA[windows]]></wp:tag_slug>
		<wp:tag_name><![CDATA[windows]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>156</wp:term_id>
		<wp:tag_slug><![CDATA[wine]]></wp:tag_slug>
		<wp:tag_name><![CDATA[wine]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>143</wp:term_id>
		<wp:tag_slug><![CDATA[wireless]]></wp:tag_slug>
		<wp:tag_name><![CDATA[wireless]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>159</wp:term_id>
		<wp:tag_slug><![CDATA[wordpress]]></wp:tag_slug>
		<wp:tag_name><![CDATA[wordpress]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>254</wp:term_id>
		<wp:tag_slug><![CDATA[wstring]]></wp:tag_slug>
		<wp:tag_name><![CDATA[wstring]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>144</wp:term_id>
		<wp:tag_slug><![CDATA[xmarks]]></wp:tag_slug>
		<wp:tag_name><![CDATA[xmarks]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>200</wp:term_id>
		<wp:tag_slug><![CDATA[xpiks]]></wp:tag_slug>
		<wp:tag_name><![CDATA[xpiks]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>145</wp:term_id>
		<wp:tag_slug><![CDATA[yace]]></wp:tag_slug>
		<wp:tag_name><![CDATA[yace]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>146</wp:term_id>
		<wp:tag_slug><![CDATA[yast]]></wp:tag_slug>
		<wp:tag_name><![CDATA[yast]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>46</wp:term_id>
		<wp:tag_slug><![CDATA[%d0%b0%d0%bc%d0%b0%d0%b7%d0%be%d0%bd]]></wp:tag_slug>
		<wp:tag_name><![CDATA[амазон]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>47</wp:term_id>
		<wp:tag_slug><![CDATA[%d0%b1%d0%b5%d0%b7%d0%bf%d0%bb%d0%b0%d1%82%d0%bd%d0%be]]></wp:tag_slug>
		<wp:tag_name><![CDATA[безплатно]]></wp:tag_name>
	</wp:tag>
	<wp:tag>
		<wp:term_id>48</wp:term_id>
		<wp:tag_slug><![CDATA[%d0%bf%d0%be%d0%bc%d0%b8%d0%bb%d0%ba%d0%b0]]></wp:tag_slug>
		<wp:tag_name><![CDATA[помилка]]></wp:tag_name>
	</wp:tag>
	<wp:term>
		<wp:term_id><![CDATA[8]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[net]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[.net]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[163]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[12-bit]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[12 bit]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[9]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[1248]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[1248]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[10]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[1248ub]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[1248ub]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[164]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[14-bit]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[14 bit]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[11]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[acm]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[acm]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[12]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[addons]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[addons]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[154]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[adobe]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[adobe]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[180]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[aes]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[aes]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[13]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ai]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ai]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[229]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[alternative]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[alternative]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[14]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[amazon]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[amazon]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[2]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[android]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Android]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[15]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[android-2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[android]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[16]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[apache]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[apache]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[168]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[api]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[api]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[267]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[arduino]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[arduino]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[17]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[array]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[array]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[18]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[at-spi2-core]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[at-spi2-core]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[19]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[autocomplete]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[autocomplete]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[20]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[autostart]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[autostart]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[21]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bag]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bag]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[22]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[bash]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[bash]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[261]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[berkeleydb]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[berkeleydb]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[23]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[binaries]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[binaries]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[174]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[binary]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[binary]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[24]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[book]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[book]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[171]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[build]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[build]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[25]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[c]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[c++]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[26]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cedet]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[cedet]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[27]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[centos]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[centos]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[217]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[checking]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[checking]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[28]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[chess]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[chess]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[29]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[chessprogramming]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[chessprogramming]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[225]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[clr]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[clr]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[263]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[combobox]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[combobox]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[30]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[competencies]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[competencies]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[31]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[compilation]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[compilation]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[32]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[config]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[config]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[33]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[config-el]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[config.el]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[34]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[configs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[configs]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[213]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[consumer]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[consumer]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[35]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[contest]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[contest]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[36]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[continuous-integration]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[continuous integration]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[37]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cpu]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[cpu]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[248]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[craftmanship]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[craftmanship]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[209]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[cross-platform]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[cross-platform]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[38]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[csharp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[csharp]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[231]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[curl]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[curl]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[266]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[custom]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[custom]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[158]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[d5300]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[d5300]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[150]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[darktable]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[darktable]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[183]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[data]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[data]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[39]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[data-structure]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[data structure]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[40]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[database]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[database]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[235]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[deadline]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[deadline]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[41]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[delay]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[delay]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[42]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[development]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[development]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[269]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dht]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[dht]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[176]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dictionary]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[dictionary]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[43]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[digital]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[digital]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[153]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dng]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[dng]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[44]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dos]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[dos]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[173]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[download]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[download]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[45]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[downto]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[downto]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[204]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[drag]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[drag]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[205]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[drop]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[drop]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[194]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[dropbox]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[dropbox]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[253]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[duckduckgo]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[duckduckgo]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[177]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[efficient]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[efficient]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[49]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[eject]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[eject]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[3]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[emacs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Emacs]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[192]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[emacs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Emacs]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[262]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[embedded]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[embedded]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[179]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[encryption]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[encryption]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[50]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[engine]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[engine]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[236]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[engineer]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[engineer]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[51]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[eol]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[eol]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[220]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[error]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[error]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[234]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[experience]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[experience]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[52]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ff]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ff]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[241]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ffmpeg]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ffmpeg]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[53]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[firefox]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[firefox]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[54]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[flymake]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[flymake]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[55]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[from]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[from]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[56]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[future]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[future]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[169]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[games]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[games]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[57]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[generic]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[generic]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[165]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[gimp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[gimp]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[249]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[github]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[github]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[274]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[golang]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[golang]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[191]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hack]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hack]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[58]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hang]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hang]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[59]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hangs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hangs]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[170]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hedgewars]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hedgewars]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[60]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[herb]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[herb]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[61]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[how-to]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[how-to]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[175]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[howto]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[howto]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[4]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[humour]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Humour]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[218]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[hunspell]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[hunspell]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[160]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[import]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[import]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[62]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[include]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[include]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[63]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[inhibit-eol-convension]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[inhibit-eol-convension]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[64]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[init]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[init]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[65]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[init-d]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[init.d]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[66]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[installation]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[installation]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[211]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[interface]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[interface]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[161]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[internal-error]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[internal error]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[67]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[interview]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[interview]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[272]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[iot]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[iot]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[68]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[iptables]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[iptables]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[188]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[issue]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[issue]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[195]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[javascript]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[javascript]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[69]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[jetbrains]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[jetbrains]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[70]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[kernel]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[kernel]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[256]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[key-value]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[key-value]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[71]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[lag]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[lag]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[72]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[laptop-mode]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[laptop-mode]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[242]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[libav]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[libav]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[232]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[libcurl]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[libcurl]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[148]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_format]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[post-format-link]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Link]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[73]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[links]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[links]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[5]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linux-2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Linux]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[74]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linux]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[linux]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[251]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[linuxdeploy]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[linuxdeploy]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[75]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[list]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[list]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[186]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[login]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[login]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[76]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[loops]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[loops]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[199]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mac]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mac]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[147]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[nav_menu]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mainmenu]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[MainMenu]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[77]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[make]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[make]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[208]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[makefile]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[makefile]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[185]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[management-studio]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[management studio]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[78]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[materials]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[materials]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[79]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[matrix]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[matrix]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[80]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mediawiki]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mediawiki]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[197]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[microstock]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[microstock]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[250]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mman]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mman]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[207]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[model]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[model]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[81]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mono]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mono]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[82]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mouse]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mouse]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[214]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[multithreading]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[multithreading]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[83]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mustek]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mustek]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[222]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[mutex]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[mutex]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[219]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[myspell]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[myspell]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[152]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[nef]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[nef]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[157]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[nikon]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[nikon]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[255]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[nosql]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[nosql]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[84]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[numbers]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[numbers]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[237]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[on-call]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[on-call]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[155]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[open]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[open]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[247]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[open-source]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[open source]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[85]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[opengl]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[opengl]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[86]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[opensuse]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[opensuse]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[87]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[opentk]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[opentk]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[88]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[org-a11y-bus]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[org.a11y.Bus]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[172]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[os-x]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[os x]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[89]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[output]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[output]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[239]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[overnight]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[overnight]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[240]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[overtime]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[overtime]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[221]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[parallel]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[parallel]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[196]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[parse]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[parse]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[245]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[path]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[path]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[215]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[pattern]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[pattern]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[90]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[payment]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[payment]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[149]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[photography]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[photography]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[167]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[plug-in]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[plug-in]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[166]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[plugin]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[plugin]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[91]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[postgresql]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[postgresql]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[92]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[prepare]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[prepare]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[93]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[presentation]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[presentation]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[94]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[problem]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[problem]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[212]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[producer]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[producer]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[6]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[programming]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Programming]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[95]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[programming-2]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[programming]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[96]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[pure]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[pure]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[97]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[pyflake]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[pyflake]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[98]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[python]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[python]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[206]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[qml]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[qml]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[228]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[qnetworkaccessmanager]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[qnetworkaccessmanager]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[224]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[qnx]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[qnx]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[181]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[qt]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[qt]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[202]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[qt]]></wp:term_slug>
		<wp:term_parent><![CDATA[programming]]></wp:term_parent>
		<wp:term_name><![CDATA[Qt]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[99]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[queem]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[queem]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[264]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[quick]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[quick]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[100]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[rails]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[rails]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[268]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[raspberry-pi]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[raspberry pi]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[151]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[raw]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[raw]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[101]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[rebel]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[rebel]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[227]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[recommendation]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[recommendation]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[162]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[refresh]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[refresh]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[102]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[remote]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[remote]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[103]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[remove]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[remove]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[230]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[replacement]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[replacement]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[258]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[review]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[review]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[226]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[richter]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[richter]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[259]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[rocksdb]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[rocksdb]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[104]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ropemacs]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ropemacs]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[238]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[rotation]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[rotation]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[7]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ruby-programming]]></wp:term_slug>
		<wp:term_parent><![CDATA[programming]]></wp:term_parent>
		<wp:term_name><![CDATA[Ruby]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[105]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ruby]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ruby]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[106]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ruby-like]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ruby-like]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[107]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[safe]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[safe]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[108]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[scanner]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[scanner]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[109]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[scratch]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[scratch]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[110]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[script]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[script]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[187]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[security]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[security]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[111]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[semantic]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[semantic]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[223]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[semaphore]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[semaphore]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[112]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sendmail]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sendmail]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[270]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sensor]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sensor]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[113]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[server]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[server]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[114]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sharp]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sharp]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[198]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[software]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[software]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[189]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[solution]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[solution]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[115]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[solve]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[solve]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[116]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[source-code]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[source code]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[117]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sources]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sources]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[216]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[spelling]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[spelling]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[118]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[spiral]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[spiral]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[233]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[spurious-wakeup]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[spurious wakeup]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[184]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sql-server]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sql server]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[260]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sqlite]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sqlite]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[119]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ssh]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ssh]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[252]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[stardict]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[stardict]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[120]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[startup]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[startup]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[121]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[step]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[step]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[257]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[storage]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[storage]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[122]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[store]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[store]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[123]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[string]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[string]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[124]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sutter]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sutter]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[178]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[switch]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[switch]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[125]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[sync]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[sync]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[126]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[system]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[system]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[127]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[teamcity]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[teamcity]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[271]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[temperature]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[temperature]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[128]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[template]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[template]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[129]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[test]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[test]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[182]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[text]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[text]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[244]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[thumbnail]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[thumbnail]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[130]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[times]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[times]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[201]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tip]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[tip]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[131]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tomcat]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[tomcat]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[210]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tsv]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[tsv]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[132]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[tutorial]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[tutorial]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[133]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[udisks]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[udisks]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[265]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[ui]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[ui]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[1]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[uncategorized]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[Uncategorized]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[246]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[unicode]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[unicode]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[134]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[unix]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[unix]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[135]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[unmount]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[unmount]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[136]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[upto]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[upto]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[203]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[url]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[url]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[243]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[video]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[video]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[137]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[virtualbox]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[virtualbox]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[138]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[virtualhost]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[virtualhost]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[139]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[warning]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[warning]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[140]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[western]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[western]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[193]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wget]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[wget]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[141]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wiki]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[wiki]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[142]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[windows]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[windows]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[156]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wine]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[wine]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[143]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wireless]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[wireless]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[159]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wordpress]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[wordpress]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[254]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[wstring]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[wstring]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[144]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[xmarks]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[xmarks]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[200]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[xpiks]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[xpiks]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[145]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[yace]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[yace]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[146]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[yast]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[yast]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[46]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%d0%b0%d0%bc%d0%b0%d0%b7%d0%be%d0%bd]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[амазон]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[47]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%d0%b1%d0%b5%d0%b7%d0%bf%d0%bb%d0%b0%d1%82%d0%bd%d0%be]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[безплатно]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[48]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[post_tag]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[%d0%bf%d0%be%d0%bc%d0%b8%d0%bb%d0%ba%d0%b0]]></wp:term_slug>
		<wp:term_parent><![CDATA[]]></wp:term_parent>
		<wp:term_name><![CDATA[помилка]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[190]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[c]]></wp:term_slug>
		<wp:term_parent><![CDATA[programming]]></wp:term_parent>
		<wp:term_name><![CDATA[C++]]></wp:term_name>
	</wp:term>
	<wp:term>
		<wp:term_id><![CDATA[273]]></wp:term_id>
		<wp:term_taxonomy><![CDATA[category]]></wp:term_taxonomy>
		<wp:term_slug><![CDATA[embedded]]></wp:term_slug>
		<wp:term_parent><![CDATA[programming]]></wp:term_parent>
		<wp:term_name><![CDATA[Embedded]]></wp:term_name>
	</wp:term>
	<wp:term><wp:term_id>147</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[mainmenu]]></wp:term_slug><wp:term_name><![CDATA[MainMenu]]></wp:term_name>
</wp:term>

	<generator>https://wordpress.org/?v=4.9.3</generator>

	<item>
		<title>About</title>
		<link>http://code.jamming.com.ua/about/</link>
		<pubDate>Mon, 10 Jun 2013 16:36:38 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?page_id=1</guid>
		<description></description>
		<content:encoded><![CDATA[This is an example of a page. Unlike posts, which are displayed on your blog’s front page in the order they’re published, pages are better suited for more timeless content that you want to be easily accessible, like your About or Contact information. Click the Edit link to make changes to this page or <a title="Direct link to Add New in the Admin Dashboard" href="/wp-admin/post-new.php?post_type=page">add another page</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date><![CDATA[2013-06-10 16:36:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-10 16:36:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[about]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
	</item>
	<item>
		<title>Developer competencies list with useful links (preparing to the interview)</title>
		<link>http://code.jamming.com.ua/developer-competencies-list/</link>
		<pubDate>Sun, 07 Oct 2012 15:39:29 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobco.wordpress.com/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[Starting short training before competency test at my current work. You can find list of things you have to know. And comparison to those from Amazon. Below you can find advices what or where to read to be ready to interview or smth like this

Needed materials and topics can be found here:

<strong>Data Structures</strong> - array, linked list, stack, queue, dictionary, hash table, tree, binary search tree, hashtable, heap, AVL/RB tree, B-tree, skip list, segment tree

<span style="text-decoration: underline;">Useful links:</span> <a title="Arrays article" href="http://zoo.cs.yale.edu/classes/cs427/2011a/resources/Chapter_09.pdf" target="_blank">Arrays article, </a><a title="Comparison of structures, used to implement dictionary" href="http://www.cs.unc.edu/~plaisted/comp750/Neyer%20paper.pdf" target="_blank"> Article about structures, used to implement dictionaries</a>, <a title="Skip list implementation" href="https://github.com/Ribtoks/heap/blob/master/FreeLancerProjects/c/SkipList/SkipList.c" target="_blank">Skip list implementation</a>

<strong>Algorithms</strong> - sorting, searching, data structure traversal algorithms, algorithm complexity, O() notation, space/time complexity, greedy and dynamics algorithms, tree, graph algorithms, N-logN sorting

<span style="text-decoration: underline;">Useful links</span>: <a title="Several sorting implementations" href="https://github.com/Ribtoks/learning/tree/master/algorithms/sorting" target="_blank">Several O(N*logN) sorting implementations</a>, quite good <a title="Binary search" href="http://en.wikipedia.org/wiki/Binary_search_algorithm" target="_blank">Wiki article about Binary search</a>

Graph algorithms - dfs, bfs, loops (usual and Euler's), Floyd-Warshall, Kruskal's algorithm

<strong>Concurency</strong> - shared state and synchronization problems, sync primitives, basic parallel algorithms, sync primitives efficiency, data and task parallelism patterns, deadlocks, race conditions, thread scheduling details, GUI threading models

<!--more-->

The best info about concurency&amp;threads&amp;processes you can find in Richter's "CLR via C# 3rd edition" book and in APUE book ("Advanced Programming in Unix Environment"). Richter gives samples and explanations, and APUE gives real world situation. <a title="Thread scheduling" href="http://www.javamex.com/tutorials/threads/thread_scheduling.shtml" target="_blank">Thread scheduling article</a>, <a title="WPF threading model" href="http://msdn.microsoft.com/en-us/library/ms741870.aspx" target="_blank">WPF threading model</a>

<strong>Coding skills</strong> - OOP, refactoring, static and dynamic typing, script and compiled languages, closures, declarative programming, lazy evaluation, tail recursion, functional programming, code generation

Basic things can be found in Wiki and StackOverflow. <a title="Declarative programming" href="http://stackoverflow.com/questions/129628/what-is-declarative-programming" target="_blank">Declarative programming topic on SO</a>, about tail recursion and lazy evaluation see some functional language (say, ocaml). <a title="Code generation" href="http://en.wikipedia.org/wiki/Code_generation_%28compiler%29" target="_blank">Short intro to code generation in wiki</a>

<strong>Low-level programming</strong> - PC architecture, memory, processor, multitasking, address space, heap memory, stack, virtual machine concept, kernel mode vs user mode, process context, memory address translation, swap, static and dynamic linking, compilation, interpretation, jit compilation, garbage collection, memory addressing, interrupts + microcode

<a title="Multitasking" href="http://www.linfo.org/multitasking.html" target="_blank">Multitasking article</a>, <a title="Stack &amp; Heap" href="http://www.quora.com/C-programming-language/What-is-the-stack-and-heap-memory-architecture-used-by-C" target="_blank">Stack&amp;Heap</a>, <a title="Virtual Memory" href="http://www.cs.utexas.edu/~witchel/372/lectures/15.VirtualMemory.pdf" target="_blank">Quite nice pdf about Virtual Memory and address translation</a>

<strong>Architecture</strong> - architecture layers, common-used design patterns, describe component with diagrams, SOA, communication with RPC or message-based

<strong>Database</strong> - SQL queries, transactions, ACID, views, stored procedures, triggers, serializable transactions, normal forms

<strong>Testing</strong> - unit tests, refactor code to be able to test it, integration tests, moqs and stubs

<strong>Network and communication</strong> - basic understanding of network concepts, web services, HTTP, DNS, SSL, socket-level programming, SOAP, JSON, whole network stack, OSI model, stateful/stateless models

<strong>Source control, CI</strong> - merge code, resolve conflicts, CI, automation scripts

For comparison, same table from Amazon

Tech Prep Tips

<strong>Algorithm Complexity:</strong> you need to know Big-O.

<strong>Sorting:</strong> know how to sort: the details of at least one n*log(n) sorting algorithm, preferably two (say, quicksort and merge sort). Merge sort can be highly useful in situations where quicksort is impractical, so take a look at it.

<strong>Hashtables</strong>

<strong>Trees:</strong> basic tree construction, traversal and manipulation algorithms. Binary trees, n-ary trees, and trie-trees at the very very least. At least one flavor of balanced binary tree,  whether it's a red/black tree, a splay tree or an AVL tree. Tree traversal algorithms: BFS and  DFS, the difference between inorder, postorder and preorder.

<strong>Graphs:</strong> There are three basic ways to represent a graph in memory (objects and pointers,
matrix, and adjacency list), each representation and its pros and cons.

The basic graph traversal algorithms: breadth-first search and depth-first search. Their
computational complexity, their tradeoffs, and how to implement them in real code.

<strong>Dijkstra and A*</strong>, if you get a chance.

Whenever someone gives you a problem, think graphs. They are the most fundamental and flexible way of representing any kind of a relationship, so it's about a 50-50 shot that any interesting design problem has a graph involved in it. Make absolutely sure you can't   think of a way to solve it using graphs before moving on to other solution types. This tip is  important!

Other data structures

<strong>Math</strong> – a plus if you go over it, but not a must

<strong>Basic discrete math questions.</strong> Counting problems, probability problems, and other Discrete Math 101 situations. Familiarity with n-choose-k problems and their ilk.

<strong>Operating Systems:</strong> Processes, threads and concurrency issues. Locks and mutexes and
semaphores and monitors and how they work. Deadlock and livelock and how to avoid them. What resources a processes needs, and a thread needs, and how context switching  works, and how it's initiated by the operating system and underlying hardware. A little  scheduling.

<strong>Concurrent Programming in Java.</strong>

<strong>Coding:</strong> Preferably C++ or Java. C# is OK. Please know a fair amount of detail about your
favorite programming language.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date><![CDATA[2012-10-07 15:39:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-10-07 15:39:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[developer-competencies-list]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="amazon"><![CDATA[amazon]]></category>
		<category domain="post_tag" nicename="competencies"><![CDATA[competencies]]></category>
		<category domain="post_tag" nicename="interview"><![CDATA[interview]]></category>
		<category domain="post_tag" nicename="prepare"><![CDATA[prepare]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="programming-2"><![CDATA[programming]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"41116138";s:9:"mod_stamp";s:19:"2012-10-18 20:37:06";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[original_post_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[85]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[85]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Android development materials</title>
		<link>http://code.jamming.com.ua/android-development-materials/</link>
		<pubDate>Thu, 25 Oct 2012 19:12:04 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobco.wordpress.com/2012/10/25/android-development-materials/</guid>
		<description></description>
		<content:encoded><![CDATA[Some great websites to learn android programming

<a href="http://martin.cubeactive.com/android-five-great-websites-for-android-developers/" target="_blank">Five great websites for android developers</a>

And <a href="http://startandroid.ru/uroki/vse-uroki-spiskom.html" target="_blank">russian materials</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date><![CDATA[2012-10-25 19:12:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-10-25 19:12:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[android-development-materials]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="android-2"><![CDATA[android]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="links"><![CDATA[links]]></category>
		<category domain="post_tag" nicename="materials"><![CDATA[materials]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"41116138";s:9:"mod_stamp";s:19:"2012-10-26 09:06:54";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[original_post_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[137]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[137]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ruby style loops in C#</title>
		<link>http://code.jamming.com.ua/ruby-style-loops-in-c/</link>
		<pubDate>Wed, 31 Oct 2012 13:44:18 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobco.wordpress.com/2012/10/31/ruby-style-loops-in-c/</guid>
		<description></description>
		<content:encoded><![CDATA[<a title="Ruby style loops in C#" href="http://blog.naiznoiz.com/2009/03/c-loops-ruby-style">Ruby style loops in C#</a>

Simple and useful solution to use ruby-like loops in C#. Also, you can add extensions

<!--more-->

[sourcecode language="csharp"]
public struct MyInt
{
    public delegate void Loop(int i);

    private delegate int Aggregate(int aggregatedValue, int nextValue);

    private delegate int LoopDirection(int prev);

    private delegate bool LoopCondition(int a, int b);

    private int i;
    private int start;
    private int end;
    private LoopDirection direction;
    private LoopCondition condition;

    public static MyInt Int(int i)
    {
        return new MyInt(i);
    }

    public MyInt(int i)
    {
        this.i = i;
        this.start = 0;
        this.end = 0;
        this.direction = null;
        this.condition = null;
    }

    public MyInt Times()
    {
        return MyInt.Int(0).Step(this.i - 1, 1);
    }

    public MyInt DownTo(int i)
    {
        return this.Step(i, 1);
    }

    public MyInt UpTo(int i)
    {
        return this.Step(i, 1);
    }

    public MyInt Step(int end, int step)
    {
        this.start = this.i;
        this.end = end;
        if (start &lt;= end)
        {
            direction = x =&gt; x + step;
            condition = (a, b) =&gt; a &lt;= b;
        }
        else
        {
            direction = x =&gt; x - step;
            condition = (a, b) =&gt; a &gt;= b;
        }
        return this;
    }

    public void Do(Loop del)
    {
        for (int iter = start; condition(iter, end); iter = direction(iter))
        {
            del(iter);
        }
    }
}

public static class MyIntExtension
{
    public static MyInt Step(this int value, int end, int step)
    {
        return MyInt.Int(value).Step(end, step);
    }

    public static MyInt DownTo(this int value, int i)
    {
        return MyInt.Int(value).DownTo(i);
    }

    public static MyInt UpTo(this int value, int i)
    {
        return MyInt.Int(value).UpTo(i);
    }

    public static MyInt Times(this int value)
    {
        return MyInt.Int(value).Times();
    }
}
[/sourcecode]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date><![CDATA[2012-10-31 13:44:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2012-10-31 13:44:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ruby-style-loops-in-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
		<category domain="post_tag" nicename="csharp"><![CDATA[csharp]]></category>
		<category domain="post_tag" nicename="downto"><![CDATA[downto]]></category>
		<category domain="post_tag" nicename="loops"><![CDATA[loops]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="ruby-like"><![CDATA[ruby-like]]></category>
		<category domain="post_tag" nicename="step"><![CDATA[step]]></category>
		<category domain="post_tag" nicename="times"><![CDATA[times]]></category>
		<category domain="post_tag" nicename="upto"><![CDATA[upto]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"41116138";s:9:"mod_stamp";s:19:"2012-10-31 13:51:18";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[original_post_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[243]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[243]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Amazon store payment bug</title>
		<link>http://code.jamming.com.ua/amazon-store-payment-bug/</link>
		<pubDate>Thu, 07 Feb 2013 14:46:08 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobco.wordpress.com/?p=662</guid>
		<description></description>
		<content:encoded><![CDATA[Недавно купляючи в магазині Amazon книжку для кіндла, попав у цікаву ситуацію. Наскоро натиснувши Buy with 1 click and send to my kindle я трошки зачекав і мене перенаправило на віконечко з оплатою і одночасно запікав мобільник "Платіж відхилили". Без причини, просто відхилили. Сумно. Вже збираючись закрити сторінку, на яку мене перенаправив Амазон після оплати, я замітив на останній ссилку "Read in browser". І от.. бац - і я читаю книжку, за яку не заплатив. Жаль захист вони зробили нормальний і просто скопіювати текст мені <del>було ліньки розбиратись з dom'ом тої сторінки</del> не вийшло. На щастя книжка мала тільки 30 сторінок і Print Screen та безплатний сервіс по розпізнаванню тексту <a href="http://www.newocr.com/" target="_blank">http://www.newocr.com/</a> врятували мене.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>662</wp:post_id>
		<wp:post_date><![CDATA[2013-02-07 14:46:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-02-07 14:46:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[amazon-store-payment-bug]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="amazon"><![CDATA[amazon]]></category>
		<category domain="post_tag" nicename="bag"><![CDATA[bag]]></category>
		<category domain="post_tag" nicename="book"><![CDATA[book]]></category>
		<category domain="post_tag" nicename="payment"><![CDATA[payment]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="store"><![CDATA[store]]></category>
		<category domain="post_tag" nicename="%d0%b0%d0%bc%d0%b0%d0%b7%d0%be%d0%bd"><![CDATA[амазон]]></category>
		<category domain="post_tag" nicename="%d0%b1%d0%b5%d0%b7%d0%bf%d0%bb%d0%b0%d1%82%d0%bd%d0%be"><![CDATA[безплатно]]></category>
		<category domain="post_tag" nicename="%d0%bf%d0%be%d0%bc%d0%b8%d0%bb%d0%ba%d0%b0"><![CDATA[помилка]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"41116138";s:9:"mod_stamp";s:19:"2013-02-07 14:46:08";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[original_post_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[662]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[662]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_6567caa2fa4c212c280cb924a3d01ea0]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://code.jamming.com.ua/985/</link>
		<pubDate>Thu, 04 Sep 2014 19:10:37 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=985</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>985</wp:post_id>
		<wp:post_date><![CDATA[2014-09-04 19:10:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-04 19:10:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[985]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="mainmenu"><![CDATA[MainMenu]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://code.jamming.com.ua/986/</link>
		<pubDate>Thu, 04 Sep 2014 19:10:37 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=986</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>986</wp:post_id>
		<wp:post_date><![CDATA[2014-09-04 19:10:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-04 19:10:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[986]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="mainmenu"><![CDATA[MainMenu]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://code.jamming.com.ua/997/</link>
		<pubDate>Thu, 04 Sep 2014 19:10:37 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=997</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>997</wp:post_id>
		<wp:post_date><![CDATA[2014-09-04 19:10:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-04 19:10:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[997]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="mainmenu"><![CDATA[MainMenu]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>opentk_test</title>
		<link>http://code.jamming.com.ua/simple-opengl-program-on-c-under-linux/opentk_test/</link>
		<pubDate>Wed, 19 Jun 2013 21:06:05 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/wp-content/uploads/2013/06/opentk_test.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[OpenTK Game Window]]></excerpt:encoded>
		<wp:post_id>1031</wp:post_id>
		<wp:post_date><![CDATA[2013-06-19 23:06:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-19 21:06:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[opentk_test]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1030</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://code.jamming.com.ua/wp-content/uploads/2013/06/opentk_test.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/opentk_test.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:322;s:4:"file";s:23:"2013/06/opentk_test.png";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"opentk_test-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:23:"opentk_test-300x242.png";s:5:"width";i:300;s:6:"height";i:242;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:23:"opentk_test-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>YaCEscheme</title>
		<link>http://code.jamming.com.ua/yace-contester-engine/yacescheme/</link>
		<pubDate>Mon, 26 Aug 2013 19:35:56 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/wp-content/uploads/2013/08/yacescheme.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1036</wp:post_id>
		<wp:post_date><![CDATA[2013-08-26 21:35:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-26 19:35:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[yacescheme]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1035</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://code.jamming.com.ua/wp-content/uploads/2013/08/yacescheme.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2013/08/yacescheme.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1329;s:6:"height";i:774;s:4:"file";s:22:"2013/08/yacescheme.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"yacescheme-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:22:"yacescheme-300x175.jpg";s:5:"width";i:300;s:6:"height";i:175;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:22:"yacescheme-768x447.jpg";s:5:"width";i:768;s:6:"height";i:447;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:23:"yacescheme-1024x596.jpg";s:5:"width";i:1024;s:6:"height";i:596;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:23:"yacescheme-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:23:"yacescheme-1329x550.jpg";s:5:"width";i:1329;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:22:"yacescheme-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:22:"yacescheme-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:22:"yacescheme-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Adobe_DNG_Converter</title>
		<link>http://code.jamming.com.ua/how-to-process-nikon-d5300-nef-and-other-unsupported-raw-formats-in-darktable/adobe_dng_converter/</link>
		<pubDate>Tue, 09 Sep 2014 09:23:16 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/wp-content/uploads/2014/09/Adobe_DNG_Converter.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1114</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 12:23:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 09:23:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[adobe_dng_converter]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1113</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://code.jamming.com.ua/wp-content/uploads/2014/09/Adobe_DNG_Converter.gif]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/09/Adobe_DNG_Converter.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:616;s:6:"height";i:564;s:4:"file";s:31:"2014/09/Adobe_DNG_Converter.gif";s:5:"sizes";a:7:{s:9:"thumbnail";a:4:{s:4:"file";s:31:"Adobe_DNG_Converter-150x150.gif";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:31:"Adobe_DNG_Converter-300x275.gif";s:5:"width";i:300;s:6:"height";i:275;s:9:"mime-type";s:9:"image/gif";}s:18:"activello-featured";a:4:{s:4:"file";s:31:"Adobe_DNG_Converter-616x550.gif";s:5:"width";i:616;s:6:"height";i:550;s:9:"mime-type";s:9:"image/gif";}s:16:"activello-slider";a:4:{s:4:"file";s:31:"Adobe_DNG_Converter-616x550.gif";s:5:"width";i:616;s:6:"height";i:550;s:9:"mime-type";s:9:"image/gif";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:31:"Adobe_DNG_Converter-330x220.gif";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/gif";}s:16:"activello-medium";a:4:{s:4:"file";s:31:"Adobe_DNG_Converter-616x480.gif";s:5:"width";i:616;s:6:"height";i:480;s:9:"mime-type";s:9:"image/gif";}s:13:"activello-big";a:4:{s:4:"file";s:31:"Adobe_DNG_Converter-616x335.gif";s:5:"width";i:616;s:6:"height";i:335;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>snapshot2</title>
		<link>http://code.jamming.com.ua/how-to-process-nikon-d5300-nef-and-other-unsupported-raw-formats-in-darktable/snapshot2/</link>
		<pubDate>Tue, 09 Sep 2014 17:23:10 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/wp-content/uploads/2014/09/snapshot2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1123</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 20:23:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 17:23:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[snapshot2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1113</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://code.jamming.com.ua/wp-content/uploads/2014/09/snapshot2.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/09/snapshot2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1180;s:6:"height";i:710;s:4:"file";s:21:"2014/09/snapshot2.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"snapshot2-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:21:"snapshot2-300x181.png";s:5:"width";i:300;s:6:"height";i:181;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:21:"snapshot2-768x462.png";s:5:"width";i:768;s:6:"height";i:462;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:22:"snapshot2-1024x616.png";s:5:"width";i:1024;s:6:"height";i:616;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:22:"snapshot2-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:22:"snapshot2-1180x550.png";s:5:"width";i:1180;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:21:"snapshot2-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:21:"snapshot2-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:21:"snapshot2-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blog</title>
		<link>http://code.jamming.com.ua/blog/</link>
		<pubDate>Sun, 04 Jun 2017 17:25:18 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?page_id=1415</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1415</wp:post_id>
		<wp:post_date><![CDATA[2017-06-04 19:25:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-06-04 17:25:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[blog]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[page-fullwidth.php]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[site_layout]]></wp:meta_key>
			<wp:meta_value><![CDATA[full-width]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://code.jamming.com.ua/1429/</link>
		<pubDate>Wed, 07 Jun 2017 09:20:43 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1429</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1429</wp:post_id>
		<wp:post_date><![CDATA[2017-06-07 11:20:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-06-07 09:20:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1429]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="mainmenu"><![CDATA[MainMenu]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[190]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://code.jamming.com.ua/1430/</link>
		<pubDate>Wed, 07 Jun 2017 09:20:43 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1430</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1430</wp:post_id>
		<wp:post_date><![CDATA[2017-06-07 11:20:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-06-07 09:20:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[1430]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>6</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type><![CDATA[nav_menu_item]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="mainmenu"><![CDATA[MainMenu]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_type]]></wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_menu_item_parent]]></wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[202]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_object]]></wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_target]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_classes]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_xfn]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_menu_item_url]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>20180122_125214</title>
		<link>http://code.jamming.com.ua/fuller-stack-development/20180122_125214/</link>
		<pubDate>Mon, 29 Jan 2018 07:13:07 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/wp-content/uploads/2018/01/20180122_125214.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1493</wp:post_id>
		<wp:post_date><![CDATA[2018-01-29 09:13:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-29 07:13:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20180122_125214]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1488</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://code.jamming.com.ua/wp-content/uploads/2018/01/20180122_125214.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/01/20180122_125214.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:3636;s:6:"height";i:2424;s:4:"file";s:27:"2018/01/20180122_125214.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"20180122_125214-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:27:"20180122_125214-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:27:"20180122_125214-768x512.jpg";s:5:"width";i:768;s:6:"height";i:512;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:28:"20180122_125214-1024x683.jpg";s:5:"width";i:1024;s:6:"height";i:683;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:28:"20180122_125214-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:28:"20180122_125214-1920x550.jpg";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:27:"20180122_125214-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:27:"20180122_125214-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:27:"20180122_125214-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:3:"1.9";s:6:"credit";s:0:"";s:6:"camera";s:8:"SM-G920F";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1516625534";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"4.3";s:3:"iso";s:3:"200";s:13:"shutter_speed";s:4:"0.02";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>20180122_125103</title>
		<link>http://code.jamming.com.ua/fuller-stack-development/20180122_125103/</link>
		<pubDate>Mon, 29 Jan 2018 07:20:20 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/wp-content/uploads/2018/01/20180122_125103.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Yes, and you have to solder another antenna to transmitter as well]]></excerpt:encoded>
		<wp:post_id>1494</wp:post_id>
		<wp:post_date><![CDATA[2018-01-29 09:20:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-29 07:20:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[20180122_125103]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1488</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://code.jamming.com.ua/wp-content/uploads/2018/01/20180122_125103.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/01/20180122_125103.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:4212;s:6:"height";i:2808;s:4:"file";s:27:"2018/01/20180122_125103.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:27:"20180122_125103-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:27:"20180122_125103-300x200.jpg";s:5:"width";i:300;s:6:"height";i:200;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:27:"20180122_125103-768x512.jpg";s:5:"width";i:768;s:6:"height";i:512;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:28:"20180122_125103-1024x683.jpg";s:5:"width";i:1024;s:6:"height";i:683;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:28:"20180122_125103-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:28:"20180122_125103-1920x550.jpg";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:27:"20180122_125103-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:27:"20180122_125103-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:27:"20180122_125103-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:3:"1.9";s:6:"credit";s:0:"";s:6:"camera";s:8:"SM-G920F";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1516625463";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"4.3";s:3:"iso";s:3:"200";s:13:"shutter_speed";s:4:"0.02";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>temperature-protocol</title>
		<link>http://code.jamming.com.ua/fuller-stack-development/temperature-protocol/</link>
		<pubDate>Thu, 01 Feb 2018 07:11:59 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/wp-content/uploads/2018/02/temperature-protocol.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1498</wp:post_id>
		<wp:post_date><![CDATA[2018-02-01 09:11:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-01 07:11:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[temperature-protocol]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1488</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://code.jamming.com.ua/wp-content/uploads/2018/02/temperature-protocol.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/02/temperature-protocol.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:689;s:6:"height";i:207;s:4:"file";s:32:"2018/02/temperature-protocol.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"temperature-protocol-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"temperature-protocol-300x90.png";s:5:"width";i:300;s:6:"height";i:90;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:32:"temperature-protocol-330x207.png";s:5:"width";i:330;s:6:"height";i:207;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:32:"temperature-protocol-640x207.png";s:5:"width";i:640;s:6:"height";i:207;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>temps-website</title>
		<link>http://code.jamming.com.ua/fuller-stack-development/temps-website/</link>
		<pubDate>Thu, 01 Feb 2018 21:49:40 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/wp-content/uploads/2018/02/temps-website.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1502</wp:post_id>
		<wp:post_date><![CDATA[2018-02-01 23:49:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-01 21:49:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[temps-website]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1488</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://code.jamming.com.ua/wp-content/uploads/2018/02/temps-website.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/02/temps-website.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1956;s:6:"height";i:1256;s:4:"file";s:25:"2018/02/temps-website.png";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"temps-website-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:25:"temps-website-300x193.png";s:5:"width";i:300;s:6:"height";i:193;s:9:"mime-type";s:9:"image/png";}s:12:"medium_large";a:4:{s:4:"file";s:25:"temps-website-768x493.png";s:5:"width";i:768;s:6:"height";i:493;s:9:"mime-type";s:9:"image/png";}s:5:"large";a:4:{s:4:"file";s:26:"temps-website-1024x658.png";s:5:"width";i:1024;s:6:"height";i:658;s:9:"mime-type";s:9:"image/png";}s:18:"activello-featured";a:4:{s:4:"file";s:26:"temps-website-1170x550.png";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:16:"activello-slider";a:4:{s:4:"file";s:26:"temps-website-1920x550.png";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:9:"image/png";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:25:"temps-website-330x220.png";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:16:"activello-medium";a:4:{s:4:"file";s:25:"temps-website-640x480.png";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:9:"image/png";}s:13:"activello-big";a:4:{s:4:"file";s:25:"temps-website-710x335.png";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>arduino-mini-dht-433</title>
		<link>http://code.jamming.com.ua/fuller-stack-development/arduino-mini-dht-433/</link>
		<pubDate>Thu, 01 Feb 2018 21:59:42 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/wp-content/uploads/2018/02/arduino-mini-dht-433.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[First prototype ready to be connected to the power source]]></excerpt:encoded>
		<wp:post_id>1503</wp:post_id>
		<wp:post_date><![CDATA[2018-02-01 23:59:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-01 21:59:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[arduino-mini-dht-433]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>1488</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://code.jamming.com.ua/wp-content/uploads/2018/02/arduino-mini-dht-433.jpg]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2018/02/arduino-mini-dht-433.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:5312;s:6:"height";i:2988;s:4:"file";s:32:"2018/02/arduino-mini-dht-433.jpg";s:5:"sizes";a:9:{s:9:"thumbnail";a:4:{s:4:"file";s:32:"arduino-mini-dht-433-150x150.jpg";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:32:"arduino-mini-dht-433-300x169.jpg";s:5:"width";i:300;s:6:"height";i:169;s:9:"mime-type";s:10:"image/jpeg";}s:12:"medium_large";a:4:{s:4:"file";s:32:"arduino-mini-dht-433-768x432.jpg";s:5:"width";i:768;s:6:"height";i:432;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:33:"arduino-mini-dht-433-1024x576.jpg";s:5:"width";i:1024;s:6:"height";i:576;s:9:"mime-type";s:10:"image/jpeg";}s:18:"activello-featured";a:4:{s:4:"file";s:33:"arduino-mini-dht-433-1170x550.jpg";s:5:"width";i:1170;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-slider";a:4:{s:4:"file";s:33:"arduino-mini-dht-433-1920x550.jpg";s:5:"width";i:1920;s:6:"height";i:550;s:9:"mime-type";s:10:"image/jpeg";}s:19:"activello-thumbnail";a:4:{s:4:"file";s:32:"arduino-mini-dht-433-330x220.jpg";s:5:"width";i:330;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:16:"activello-medium";a:4:{s:4:"file";s:32:"arduino-mini-dht-433-640x480.jpg";s:5:"width";i:640;s:6:"height";i:480;s:9:"mime-type";s:10:"image/jpeg";}s:13:"activello-big";a:4:{s:4:"file";s:32:"arduino-mini-dht-433-710x335.jpg";s:5:"width";i:710;s:6:"height";i:335;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:12:{s:8:"aperture";s:3:"1.9";s:6:"credit";s:0:"";s:6:"camera";s:8:"SM-G920F";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1517529416";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"4.3";s:3:"iso";s:2:"40";s:13:"shutter_speed";s:17:"0.014285714285714";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mustek 1248 UB scanner setup in linux (openSuSE 12.2)</title>
		<link>http://code.jamming.com.ua/mustek-1248ub-setup-in-linux/</link>
		<pubDate>Sun, 10 Feb 2013 15:05:18 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobco.wordpress.com/?p=666</guid>
		<description></description>
		<content:encoded><![CDATA[I know a lot of instructions exist about how to setup Mustek 1248ub scanner in linux. All of them (from Ubuntu forum) refer to <a title="Sane drivers" href="http://www.meier-geinitz.de/sane/gt68xx-backend/" target="_blank">this</a> webpage, recommend you download appropriate driver, save it into <em><span style="color:#666699;">/usr/share/sane/gt68xx</span></em> folder, add read permissions to all and be happy. But none of them told to uncomment <span style="color:#666699;"><em>gt68xx</em></span> line in <span style="color:#666699;"><em>/etc/sane.d/dll.conf</em></span> file! So, do it and <span style="color:#666699;"><em>sane-find-scanner</em></span> will do it best for you!

Also there are such situations, when <span style="color:#99ccff;"><em><span style="color:#666699;">sane-find-scanner</span></em></span> does not find scanner, but <em><span style="color:#666699;">scanimage -L</span></em> and <span style="color:#666699;"><em>xsane</em></span> do well!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>666</wp:post_id>
		<wp:post_date><![CDATA[2013-02-10 15:05:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-02-10 15:05:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mustek-1248ub-setup-in-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="1248"><![CDATA[1248]]></category>
		<category domain="post_tag" nicename="1248ub"><![CDATA[1248ub]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="mustek"><![CDATA[mustek]]></category>
		<category domain="post_tag" nicename="opensuse"><![CDATA[opensuse]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="scanner"><![CDATA[scanner]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"41116138";s:9:"mod_stamp";s:19:"2013-02-10 15:07:22";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[original_post_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[666]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[666]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Emacs 24.2 with Python and C++ bundle for Windows</title>
		<link>http://code.jamming.com.ua/emacs-24-2-with-python-and-c-bundle-for-windows/</link>
		<pubDate>Sun, 10 Mar 2013 21:36:35 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobco.wordpress.com/?p=675</guid>
		<description></description>
		<content:encoded><![CDATA[I've managed to put together some interesting things with Emacs for Windows. For now we have:
<ul>
	<li>Emacs 24.2 for Windows</li>
	<li>CEDET-1.1</li>
	<li>Auto-Complete 1.3.1</li>
	<li>Custom themes (using tango in current zip)</li>
	<li>Ocaml support (ocaml mode, eval and highlighting)</li>
	<li>Git user interface 1.0 support (with git blame)</li>
	<li>Ropemacs + Pylint + Flymake (Python IDE + static analysis)</li>
	<li>Fixes for Cygwin, gnu and git pathes in Windows</li>
</ul>
<!--more-->

Known issues:
<ul>
	<li>c++ header parsing fails sometimes (in Windows on headers without extension)</li>
	<li>some issues with python <em>autocomplete</em> and modules with relative pathes</li>
	<li>have to set <em>ocaml-program</em> each time to run ocaml</li>
	<li>&lt;c-tab&gt; Does not work in <em>c++-mode</em> for <em>semantic-complete-self-insert</em> (inserts Unicode char)</li>
</ul>
How to install:
<ol>
	<li>Download zip archive from <a title="Emacs 24.2 for Windows with c++ and python support" href="http://ge.tt/4JjpBha/v/0" target="_blank">ge.tt</a></li>
	<li>Unzip to some directory</li>
	<li>Go to <em>bin/</em> directory and edit <em>startemacs.bat</em> file - remove <em>--debug-init</em> parameter at your option</li>
	<li>If your python installation path is not <em>C:Python27</em>, go to <em>config/.emacs.d/</em> directory and edit <em>python-config.el</em> file - find <em>PYMACS_PYTHON</em> variable and make it correct (for your Windows + python installation)</li>
	<li>To add or change some c++ system include directories, go to <em>config/.emacs.d/ribtoks-cpp.el</em> file, find <em>semantic-add-system-include</em> call and change include path to yours</li>
	<li>...</li>
	<li>Profit, now you can launch Emacs with <strong><em>bin/startemacs.bat</em></strong></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>675</wp:post_id>
		<wp:post_date><![CDATA[2013-03-10 21:36:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-10 21:36:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[emacs-24-2-with-python-and-c-bundle-for-windows]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="binaries"><![CDATA[binaries]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="post_tag" nicename="cedet"><![CDATA[cedet]]></category>
		<category domain="post_tag" nicename="configs"><![CDATA[configs]]></category>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="flymake"><![CDATA[flymake]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="pyflake"><![CDATA[pyflake]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="ropemacs"><![CDATA[ropemacs]]></category>
		<category domain="post_tag" nicename="semantic"><![CDATA[semantic]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[windows]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"41116138";s:9:"mod_stamp";s:19:"2013-03-11 20:04:48";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[original_post_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[675]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[675]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C++ dev via Emacs 24 in Windows 7 (visual studio includes)</title>
		<link>http://code.jamming.com.ua/c-dev-via-emacs-24-in-windows-7/</link>
		<pubDate>Wed, 13 Mar 2013 08:23:35 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobco.wordpress.com/?p=680</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I had issue with CEDET 1.1: semantic was not able to parse header files from Visual Studio, when using

<em>(semantic-add-system-include "C:/Program Files/Microsoft Visual Studio 10.0/VS/Include" 'c++-mode)</em>

But after looking through Visual Stuio headers in Studio itself, I've found some headers with defines, which are new to semantic, so you have to add them after this system include in your <em>.el</em> files:
<pre><code>(defun windows-semantic-hook ()
  (setq microsoft-base-dir 
        "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include")
  (add-to-list 'semantic-lex-c-preprocessor-symbol-file 
               (concat microsoft-base-dir "/crtdefs.h"))
  (add-to-list 'semantic-lex-c-preprocessor-symbol-file 
               (concat microsoft-base-dir "/yvals.h"))
  (add-to-list 'semantic-lex-c-preprocessor-symbol-file 
               (concat microsoft-base-dir "/vadefs.h"))
  (add-to-list 'semantic-lex-c-preprocessor-symbol-file 
               (concat microsoft-base-dir "/comdefsp.h"))
  (semantic-add-system-include microsoft-base-dir 'c++-mode)
  (add-to-list 'auto-mode-alist (cons microsoft-base-dir 'c++-mode)))

(add-hook 'semantic-init-hooks 'windows-semantic-hook)</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>680</wp:post_id>
		<wp:post_date><![CDATA[2013-03-13 08:23:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-03-13 08:23:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[c-dev-via-emacs-24-in-windows-7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="autocomplete"><![CDATA[autocomplete]]></category>
		<category domain="post_tag" nicename="cedet"><![CDATA[cedet]]></category>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="include"><![CDATA[include]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="semantic"><![CDATA[semantic]]></category>
		<category domain="post_tag" nicename="system"><![CDATA[system]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[windows]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"41116138";s:9:"mod_stamp";s:19:"2013-03-13 08:26:08";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[original_post_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[680]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[680]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Emacs hangs on large file with DOS-encoded end of lines</title>
		<link>http://code.jamming.com.ua/emacs-hangs-on-large-file-with-dos-encoded-end-of-lines/</link>
		<pubDate>Sat, 08 Jun 2013 20:28:16 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobco.wordpress.com/?p=984</guid>
		<description></description>
		<content:encoded><![CDATA[I've had a quite big C++ source file, copied from Windows with <em>^M</em> symbol after each line. After any scrolling downside Emacs 24.2 hanged up and the only option was to kill it.

Due to the fact that my <em>.emacs</em> configuration is quite big, I started with binary search, commenting out parts of lisp code. After few minutes I've figured out, that the problem lies in <em>.gnu-emacs</em> file, so I moved with binary search to that file.

Within 5 minutes, source of the problem was found:
<pre><code>(setq-default inhibit-eol-conversion t)</code></pre>
After commenting this line, Emacs was resurrected!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>984</wp:post_id>
		<wp:post_date><![CDATA[2013-06-08 22:28:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-08 20:28:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[emacs-hangs-on-large-file-with-dos-encoded-end-of-lines]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dos"><![CDATA[dos]]></category>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="eol"><![CDATA[eol]]></category>
		<category domain="post_tag" nicename="hang"><![CDATA[hang]]></category>
		<category domain="post_tag" nicename="inhibit-eol-convension"><![CDATA[inhibit-eol-convension]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="unix"><![CDATA[unix]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[original_post_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[984]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[984]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenSUSE Yast annoying org.a11y.Bus warning </title>
		<link>http://code.jamming.com.ua/opensuse-yast-annoying-org-a11y-bus-warning/</link>
		<pubDate>Mon, 10 Jun 2013 20:59:52 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=989</guid>
		<description></description>
		<content:encoded><![CDATA[Has anybody ever received this warning message when using YaST Gui?

"The name org.a11y.Bus was not provided by any .service files"

It appears with almost any GTK program and to solve it, you have to install <em>at-spi2-core</em> package, which provides such name.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>989</wp:post_id>
		<wp:post_date><![CDATA[2013-06-10 22:59:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-10 20:59:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[opensuse-yast-annoying-org-a11y-bus-warning]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="at-spi2-core"><![CDATA[at-spi2-core]]></category>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="opensuse"><![CDATA[opensuse]]></category>
		<category domain="post_tag" nicename="org-a11y-bus"><![CDATA[org.a11y.Bus]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="warning"><![CDATA[warning]]></category>
		<category domain="post_tag" nicename="yast"><![CDATA[yast]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"53632187";s:9:"mod_stamp";s:19:"2013-06-10 21:00:33";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Guillermo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[guilleaf@msn.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[157.182.27.249]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-07-22 23:14:02]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-07-22 21:14:02]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you, that solve my issue with emacs on Linux Mint 17 Qiana]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406063643.6265121;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
				<wp:meta_value><![CDATA[1406063688]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1406063688]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1406063689.139992;s:7:"message";s:46:"latobco changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"latobco";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_elasticsearch_indexed_on]]></wp:meta_key>
				<wp:meta_value><![CDATA[2014-07-22 21:14:50]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Firefox hangs and eats 25% cpu! (with fix)</title>
		<link>http://code.jamming.com.ua/firefox-hangs-and-eats-25-cpu-with-fix/</link>
		<pubDate>Wed, 12 Jun 2013 20:50:19 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=996</guid>
		<description></description>
		<content:encoded><![CDATA[This thing happened suddenly and I wasn't able to explain it. A moment ago Firefox worked without problems, but now it hanged and Task Manager showed 25% CPU usage. Firefox was "Not responding" and nothing helped. In safe mode it worked well, so addons were the problems. But which one? I have a dozen..

Such behavior was still even at home at OpenSUSE with FF (and with same strange 25%!!), so I started Firefox with addons disabled. Everything went smoothly.  So there was a problems in addons. After playing with them, I've found that Xmarks conflicts with Firefox Sync: both are produthing thousands of bookmarks in infinite loop.

(I've created a <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=882423" target="_blank"><em>bugreport</em></a> in the Mozilla Bugzilla)

So disabling Xmarks solved the issue!

UPD: Bugzilla guys say "it's not their fault" and redirect to Xmarks bugzilla, so I reported an issue in FF addons window for Xmarks]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>996</wp:post_id>
		<wp:post_date><![CDATA[2013-06-12 22:50:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-12 20:50:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[firefox-hangs-and-eats-25-cpu-with-fix]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="addons"><![CDATA[addons]]></category>
		<category domain="post_tag" nicename="cpu"><![CDATA[cpu]]></category>
		<category domain="post_tag" nicename="ff"><![CDATA[ff]]></category>
		<category domain="post_tag" nicename="firefox"><![CDATA[firefox]]></category>
		<category domain="post_tag" nicename="hangs"><![CDATA[hangs]]></category>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="sync"><![CDATA[sync]]></category>
		<category domain="post_tag" nicename="xmarks"><![CDATA[xmarks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[RUSTY DIXON]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[rustyadixon@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://plus.google.com/101641368717288786027</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.66.214.252]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-10-07 18:14:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-10-07 16:14:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Also see this thread: https://getsatisfaction.com/foxmarks/topics/xmarks_4_2_2_breaks_firefox_22

Rusty
openSuse 12.3, FF24]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1381162491.6942241;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_post_as]]></wp:meta_key>
				<wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_avatar]]></wp:meta_key>
				<wp:meta_value><![CDATA[https://lh4.googleusercontent.com/-owAGDEmHziA/AAAAAAAAAAI/AAAAAAAAEvY/mz0oMoyKcmg/photo.jpg?sz=50]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[hc_foreign_user_id]]></wp:meta_key>
				<wp:meta_value><![CDATA[101641368717288786027]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1381162619]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_elasticsearch_indexed_on]]></wp:meta_key>
				<wp:meta_value><![CDATA[2013-10-07 16:14:51]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Use Emacs for remote compilation and catch output</title>
		<link>http://code.jamming.com.ua/use-emacs-for-remote-compilation/</link>
		<pubDate>Wed, 19 Jun 2013 17:57:42 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1012</guid>
		<description></description>
		<content:encoded><![CDATA[Just a small tip. I have souced and makefile on remote  machine and I'm trying to compile it on my local machine, but I don't have the compiler and environment. So when I run "<em>M-x compile</em>", I use a <em>build_remote.sh</em> script with following contents
<pre><code>#!<span style="color:#003366;">/bin/bash</span>
<span style="color:#003366;">ssh</span> my_remote_machine "<span style="color:#003366;">source</span> my_environment_file; <span style="color:#003366;">cd</span> my_build_directory; <span style="color:#003366;">make</span> my_target"
</code></pre>
Remember, that <code>ssh</code> command are executed not in your common environment, so you have to import it before execution of main commands (I use <em>source</em> command with some script to configure environment)

Then Emacs <code>*compilation*</code> buffer would receive stdout from remote make and you even would be able to navigate through compiler errors in your local code (if you have correct paths)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1012</wp:post_id>
		<wp:post_date><![CDATA[2013-06-19 19:57:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-19 17:57:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[use-emacs-for-remote-compilation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="compilation"><![CDATA[compilation]]></category>
		<category domain="category" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="post_tag" nicename="make"><![CDATA[make]]></category>
		<category domain="post_tag" nicename="output"><![CDATA[output]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="remote"><![CDATA[remote]]></category>
		<category domain="post_tag" nicename="ssh"><![CDATA[ssh]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"53632187";s:9:"mod_stamp";s:19:"2013-06-19 19:25:15";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to write template-like data structure in pure C</title>
		<link>http://code.jamming.com.ua/write-template-like-data-structures-in-pure-c/</link>
		<pubDate>Wed, 19 Jun 2013 18:53:22 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1020</guid>
		<description></description>
		<content:encoded><![CDATA[<em>Problem</em>:

write type-independent data structure (say, red-black tree, dynamic array etc.) in pure C (which means you cannot use templates and any other features)

<em>Solution</em>:

First of all, lets create an interface of our "<em>generic</em>" (or "<em>template</em>") type. We can interpret <code>void*</code> as this unknown type and build some interface functions. It definitely has to have a <code>constructor</code> and <code>destructor</code>. Also, it can have a <code>comparator</code> and kind of <code>print</code> function.

So, we can define it like this:
<pre><code><span style="color:#000080;">typedef</span> <span style="color:#008000;">void</span>* (*<span style="color:#008080;">ConstructorFunc</span>)(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>*);
<span style="color:#000080;">typedef</span> <span style="color:#008000;">void</span> (*<span style="color:#008080;">DestructorFunc</span>)(<span style="color:#008000;">void</span>*);
<span style="color:#000080;">typedef</span> <span style="color:#008000;">int</span> (*<span style="color:#008080;">CompareFunc</span>)(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>*, <span style="color:#000080;">const</span> <span style="color:#008000;">void</span>*);
<span style="color:#000080;">typedef</span> <span style="color:#008000;">void</span> (*<span style="color:#008080;">PrintFunc</span>)(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>*);

<span style="color:#000080;">struct</span> <span style="color:#3366ff;">FuncFactory_struct</span>
{
   <span style="color:#3366ff;">ConstructorFunc</span> constructor;
   <span style="color:#3366ff;">CompareFunc</span> compareFunc;
   <span style="color:#3366ff;">DestructorFunc</span> destructorFunc;
   <span style="color:#3366ff;">PrintFunc</span> printFunc;
};

<span style="color:#000080;">#define</span> <span style="color:#008080;">FuncFactory</span> <span style="color:#000080;">struct</span> <span style="color:#3366ff;">FuncFactory_struct
</span></code></pre>
And about implementation details..

<!--more-->

Lets assume we have to implement this for some integral type (like <code>int</code>) and more complicated one (say, <code>string</code>). So, we have to define them and then build our <code>Factory</code> structure and fill with these functions:
<pre><code><span style="color:#008000;">void</span>* StringConstructor(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>*);
/*
&lt; 0 === [line1 &lt; line2] 
= 0 === [line1 == line2] 
&gt; 0 === [line1 &gt; line2]
*/
<span style="color:#008000;">int</span> StringComparer(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>*, <span style="color:#000080;">const</span> <span style="color:#008000;">void</span>*);
<span style="color:#008000;">void</span> StringDestructor(<span style="color:#008000;">void</span>*);
<span style="color:#008000;">void</span> StringPrinter(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>*);

<span style="color:#008000;">void</span>* IntegerConstructor(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>*);
<span style="color:#008000;">int</span> IntegerComparer(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>*, <span style="color:#000080;">const</span> <span style="color:#008000;">void</span>*);
<span style="color:#008000;">void</span> IntegerDestructor(<span style="color:#008000;">void</span>*);
<span style="color:#008000;">void</span> IntegerPrinter(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>*);</code></pre>
We can now write implementation of this declarations. Each implementation will use <code>malloc</code> and <code>free</code> for <code>void*</code> memory management and then cast it to appropriate type:
<pre><code><span style="color:#008000;">void</span>* IntegerConstructor(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>* from)
{
   <span style="color:#000080;">const</span> <span style="color:#008000;">int</span>* data = (<span style="color:#000080;">const</span> <span style="color:#008000;">int</span>*)from;

   <span style="color:#008000;">int</span>* a = (<span style="color:#008000;">int</span>*)malloc(sizeof(<span style="color:#008000;">int</span>));

   (*a) = (*data);

   <span style="color:#000080;">return</span> a;
}

<span style="color:#008000;">int</span> IntegerComparer(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>* op1, <span style="color:#000080;">const</span> <span style="color:#008000;">void</span>* op2)
{
   <span style="color:#000080;">const</span> <span style="color:#008000;">int</span>* a = (<span style="color:#000080;">const</span> <span style="color:#008000;">int</span>*) op1;
   <span style="color:#000080;">const</span> <span style="color:#008000;">int</span>* b = (<span style="color:#000080;">const</span> <span style="color:#008000;">int</span>*) op2;

   return (*a) - (*b);
}

<span style="color:#008000;">void</span> IntegerDestructor(<span style="color:#008000;">void</span>* a)
{
   free(a);
   a = 0;
}

<span style="color:#008000;">void</span> IntegerPrinter(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>* data)
{
   <span style="color:#000080;">const</span> <span style="color:#008000;">int</span>* a = (<span style="color:#000080;">const</span> <span style="color:#008000;">int</span>*)data;
   printf(<span style="color:#993300;">"%d"</span>, (*a));
}</code></pre>
And for String:
<pre><code><span style="color:#008000;">void</span>* StringConstructor(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>* data)
{
   <span style="color:#000080;">const</span> <span style="color:#008000;">char</span>* from = (<span style="color:#000080;">const</span> <span style="color:#008000;">char</span>*) data;
   <span style="color:#008000;">char</span>* str = 0;

   <span style="color:#008000;">int</span> n = strlen(from) + 1;
   str = (<span style="color:#008000;">char</span>*)malloc(n*sizeof(<span style="color:#008000;">char</span>));
   <span style="color:#000080;">return</span> strcpy(str, from);
}

<span style="color:#008000;">int</span> StringComparer(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>* line1, <span style="color:#000080;">const</span> <span style="color:#008000;">void</span>* line2)
{
   <span style="color:#000080;">const</span> <span style="color:#008000;">char</span>* str1 = (<span style="color:#000080;">const</span> <span style="color:#008000;">char</span>*) line1;
   <span style="color:#000080;">const</span> <span style="color:#008000;">char</span>* str2 = (<span style="color:#000080;">const</span> <span style="color:#008000;">char</span>*) line2;

   <span style="color:#000080;">return</span> strcmp(str1, str2);
}

<span style="color:#008000;">void</span> StringDestructor(<span style="color:#008000;">void</span>* data)
{
   free(data);
   data = 0;
}

<span style="color:#008000;">void</span> StringPrinter(<span style="color:#000080;">const</span> <span style="color:#008000;">void</span>* line)
{
   <span style="color:#000080;">const</span> <span style="color:#008000;">char</span>* str = (<span style="color:#000080;">const</span> <span style="color:#008000;">char</span>*)line;
   printf(str);
}</code></pre>
And I'll provide some example of usage. Lets assume we have some tree structure and we have a task to implement  search of a value. Before usage we have to initialize our functions factory. We can just use function names as function pointers.
<pre><code><span style="color:#003366;">void</span> InitIntegerFactoryStruct(<span style="color:#008080;">FuncFactory</span>* factory)
{
   InitFactoryStruct(factory,
      IntegerConstructor,
      IntegerDestructor,
      IntegerComparer,
      IntegerPrinter);
}
// ....
<span style="color:#008080;">FuncFactory</span> integerFunctions;
<span style="color:#008080;">AVL_tree</span>* integerTree = 0;
InitIntegerFactoryStruct(&amp;integerFunctions);
integerTree = CreateAVLTree(&amp;integerFunctions);</code></pre>
And usage:
<pre><code><span style="color:#003366;">struct</span> <span style="color:#008080;">AVL_tree_struct</span>
{
   <span style="color:#008080;">TreeNode</span>* root;
   <span style="color:#008080;">TreeNode</span>* zero_node;
   <span style="color:#008080;">FuncFactory</span>* functions;
};
<span style="color:#003366;">#define</span> <span style="color:#008080;">AVL_tree</span> <span style="color:#003366;">struct</span> <span style="color:#008080;">AVL_tree_struct</span>

<span style="color:#008080;">TreeNode</span>* FindNode(<span style="color:#003366;">const</span> <span style="color:#008080;">AVL_tree</span>* tree, <span style="color:#003366;">const</span> <span style="color:#008000;">void</span>* value)
{
   <span style="color:#008080;">TreeNode</span>* tn = tree-&gt;root;
   <span style="color:#008080;">CompareFunc</span> cmp = tree-&gt;functions-&gt;compareFunc;
   <span style="color:#003366;">while</span> ( (tn != 0) &amp;&amp; ( cmp(tn-&gt;value, value) != 0 ))
   {
      <span style="color:#003366;">if</span> (cmp(tn-&gt;value, value) &gt; 0)
         tn = tn-&gt;left_child;
      <span style="color:#003366;">else</span>
         tn = tn-&gt;right_child;
   }

   <span style="color:#003366;">if</span> (tn == 0)
      <span style="color:#003366;">return</span> (tree-&gt;zero_node);
   <span style="color:#003366;">else</span>
      <span style="color:#003366;">if</span> (IsALeftChild(tn) || IsARightChild(tn))
      {
         <span style="color:#003366;">return</span> tn;
      }
      <span style="color:#003366;">else</span> <span style="color:#003366;">if</span> (tn == tree-&gt;root)
            <span style="color:#003366;">return</span> (tree-&gt;root);

      <span style="color:#003366;">return</span> (tree-&gt;zero_node);
}
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1020</wp:post_id>
		<wp:post_date><![CDATA[2013-06-19 20:53:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-19 18:53:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[write-template-like-data-structures-in-pure-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="post_tag" nicename="data-structure"><![CDATA[data structure]]></category>
		<category domain="post_tag" nicename="generic"><![CDATA[generic]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="pure"><![CDATA[pure]]></category>
		<category domain="post_tag" nicename="template"><![CDATA[template]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"53632187";s:9:"mod_stamp";s:19:"2013-06-19 19:09:11";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simple OpenGL program on C# under Linux</title>
		<link>http://code.jamming.com.ua/simple-opengl-program-on-c-under-linux/</link>
		<pubDate>Wed, 19 Jun 2013 21:12:44 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1030</guid>
		<description></description>
		<content:encoded><![CDATA[Today I'll tell you how to write a very simple OpenGL program on C# at Mono platform. Finally we're going to get something like this:

[caption id="attachment_1031" align="aligncenter" width="300"]<a href="http://code.jamming.com.ua/wp-content/uploads/2013/06/opentk_test.png"><img class=" wp-image-1031 " src="http://code.jamming.com.ua/wp-content/uploads/2013/06/opentk_test.png?w=300" alt="OpenTK Game Window" width="300" height="241" /></a> Result of OpenGL app[/caption]

<!--more-->

Several companies and organizations have developed their own collections of bindings for OpenGL under .NET (Mono), the leader of which is the Tao Framework. The Tao Framework for .NET is a collection of bindings to facilitate cross-platform media application development utilizing the .NET and Mono platforms. But I failed to use it properly under Linux, so I found Open ToolKit, that is a free, cross-platform OpenGL and OpenAL wrapper for C# and other .NET languages.

To use it you should download it from <a href="http://www.opentk.com/" target="_blank">official website of openTK</a> and extract from archive to your favorite location.  Create empty project in your favorite IDE. In Linux (currently OpenSUSE 12.3) I use MonoDevelop. In your project References section right click and add reference to <em>OpenTK.dll</em> which you can find via <em>opentk/Binaries/OpenTK/Release</em> path (and also add <em>System.Drawing.dll</em> assembly reference for <em>Color</em> stuff).

Now add some .cs file to your solution and paste this code:
<pre><code class="language-c">using System;

using OpenTK;
using OpenTK.Graphics.OpenGL;
using OpenTK.Graphics;
using OpenTK.Input;

namespace OpenGLStart
{
	public class SimpleWindow : GameWindow
	{
		public SimpleWindow()
			: base(400, 300)
		{
		}

		protected override void OnUpdateFrame (FrameEventArgs e)
		{
			base.OnUpdateFrame (e);
		}

		protected override void OnRenderFrame (FrameEventArgs e)
		{
			GL.Clear(ClearBufferMask.ColorBufferBit);

			// draw something simple using OpenGL

			// ...

			GL.Begin(BeginMode.Triangles);

			// red apex
			GL.Color3(1.0, 0.0, 0.0);
			GL.Vertex2(-1.0, -1.0);

			// green apex
			GL.Color3(0.0, 1.0, 0.0);
			GL.Vertex2(1.0, -1.0);

			// blue apex
			GL.Color3(0.0, 0.0, 1.0);
			GL.Vertex2(0, 1.0);

			GL.End();
			this.SwapBuffers();

		}

		protected override void OnLoad (EventArgs e)
		{
			GL.ClearColor(Color4.RoyalBlue);
		}

		protected override void OnResize (EventArgs e)
		{
			GL.Viewport(0, 0, Width, Height);
			GL.MatrixMode(MatrixMode.Projection);
			GL.LoadIdentity();
			GL.Ortho(-1.0, 1.0, -1.0, 1.0, 0.0, 4.0);
			base.OnResize (e);

		}

		[STAThread]
		public static void Main(string[] args)
		{
			using (var SimpleWindow1 = new SimpleWindow())
			{
				SimpleWindow1.Run();
			}
		}
	}
}
</code></pre>
Code is quite self-explanatory. We use code in <em>OnRenderFrame</em> to draw main picture and some helpful stuff like <em>OnResize</em> to handle window resizing well. <em>Main()</em> method just creates the window and runs it. Now you can run it and get window with colored triangle.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1030</wp:post_id>
		<wp:post_date><![CDATA[2013-06-19 23:12:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-19 21:12:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[simple-opengl-program-on-c-under-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="post_tag" nicename="csharp"><![CDATA[csharp]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="mono"><![CDATA[mono]]></category>
		<category domain="post_tag" nicename="opengl"><![CDATA[opengl]]></category>
		<category domain="post_tag" nicename="opentk"><![CDATA[opentk]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:60:"http://latobcode.files.wordpress.com/2013/06/opentk_test.png";s:6:"images";a:1:{s:60:"http://latobcode.files.wordpress.com/2013/06/opentk_test.png";a:6:{s:8:"file_url";s:60:"http://latobcode.files.wordpress.com/2013/06/opentk_test.png";s:5:"width";i:400;s:6:"height";i:322;s:4:"type";s:5:"image";s:4:"area";i:128800;s:9:"file_path";b:0;}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"53632187";s:9:"mod_stamp";s:19:"2013-06-19 21:15:57";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>YaCE contester engine</title>
		<link>http://code.jamming.com.ua/yace-contester-engine/</link>
		<pubDate>Mon, 26 Aug 2013 19:43:47 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1035</guid>
		<description></description>
		<content:encoded><![CDATA[This is not-a-success story about one of my projects, YaCE (Yet another Contester Engine). It's a system, written in Ruby and Bash which can check ACM problems solution validity. It can be scaled on a number of nodes, accessible via network (VMs or real machines).

The main reason to create it was to rewrite existing system which we used to train for ACM contests. "ACM Contester" was not scalable enough and it didn't have precise enough measurements of used memory and cpu time, which is crucial for testing our solutions.

I wanted to make it scalable and predictable. I wanted to write it in Ruby on Linux and for Linux.
YaCE has been started 2 years ago and last commit was made 11 months ago.

<!--more-->

YaCE uses primitive yet effective message queuing system over file system. It is also web-oriented.

Here it is some basic workflow:

<a href="http://code.jamming.com.ua/wp-content/uploads/2013/08/yacescheme.jpg"><img class="aligncenter size-medium wp-image-1036" alt="YaCEscheme" src="http://code.jamming.com.ua/wp-content/uploads/2013/08/yacescheme.jpg?w=300" width="622" height="363" /></a>
<ul>
	<li>User somehow submits a solution on a website. It’s saved with some name somewhere.</li>
	<li>Websites runs some quite simple init script, which starts checking process creating a basic pending task</li>
	<li>Scheduler regularly checks if there are some pending tasks and if they are, it tries to schedule them to cluster node (when task is compiled, it depends forever to that node, where it’s compiled or saved). Scheduling means that appropriate task is copied to some abstract storage with queue structure of specified cluster node.</li>
	<li>Worker manager manages some number of workers. Each worker depends on some cluster node. When a task is scheduled to some node, worker starts to execute this task at node using bash scripts on that node.</li>
	<li>When worker task finishes, worker creates next task at all tasks queue. Each worker task can fail and appropriate result is added as <em>get_result task</em> to all tasks queue</li>
	<li>All <em>get_result tasks</em> should be handled by some website mechanism, which will produce gui representation of task results.</li>
</ul>
Connection between scheduler and all tasks queue is implemented using tcp connection, that’s why it can be placed on some other machine. Also, worker connects to node using SSHv2, that’s why cluster nodes can be anything with ssh access (e.g. virtual machine, physical server etc)

This project has a great start but now is not required. I look sometimes at a <a title="YaCE GitHub page" href="https://github.com/Ribtoks/yace" target="_blank">GitHub page </a>and fix some issues. I hope it would be useful someday.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1035</wp:post_id>
		<wp:post_date><![CDATA[2013-08-26 21:43:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-26 19:43:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[yace-contester-engine]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acm"><![CDATA[acm]]></category>
		<category domain="post_tag" nicename="bash"><![CDATA[bash]]></category>
		<category domain="post_tag" nicename="contest"><![CDATA[contest]]></category>
		<category domain="post_tag" nicename="engine"><![CDATA[engine]]></category>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="programming-2"><![CDATA[programming]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[test]]></category>
		<category domain="post_tag" nicename="yace"><![CDATA[yace]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:59:"http://latobcode.files.wordpress.com/2013/08/yacescheme.jpg";s:6:"images";a:1:{s:59:"http://latobcode.files.wordpress.com/2013/08/yacescheme.jpg";a:6:{s:8:"file_url";s:59:"http://latobcode.files.wordpress.com/2013/08/yacescheme.jpg";s:5:"width";i:1329;s:6:"height";i:774;s:4:"type";s:5:"image";s:4:"area";i:1028646;s:9:"file_path";b:0;}}s:6:"videos";a:0:{}s:11:"image_count";i:1;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"53632187";s:9:"mod_stamp";s:19:"2013-08-26 20:15:57";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Queem - open source computer chess in C#</title>
		<link>http://code.jamming.com.ua/queem-open-source-computer-chess-in-c/</link>
		<pubDate>Mon, 26 Aug 2013 20:00:52 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1041</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I had an interview long time ago when I was young and just started programming. I had been showing my badly written battleship game to a skilled guy in his office. It was written in Delphi but with Pascal one-big-function style and it wasn't double buffered so it has known rendering problems. I said then "You see, it is not a chess, but..".</p><p>In a few weeks I started writing my own chess. After 2 years they were rewritten 3 times and now they are implemented in C# using bitboards (chessboard in 64-bit integer).<br /> There're some tests for AI engine, graphics in WPF, svg's for chess figures and a lot more.</p><p>Checkout at a <a title="Queem chess engine" href="https://github.com/Ribtoks/Queem/" target="_blank">GitHub page</a>!</p><p>I have found a lot of interesting materials while writing Queem which have one leader - <a title="Chess programming" href="http://chessprogramming.wikispaces.com/" target="_blank">chessprogramming wikipedia</a>. It contains everything you want to begin write your own chess.</p><p>There is also nice <a title="Rebel programming tips" href="http://www.top-5000.nl/authors/rebel/chess840.htm" target="_blank">web page</a> about Rebel, great chess program.</p><p>And a <a title="Materials for chess programming" href="http://chess.verhelst.org/1997/03/09/sources/" target="_blank">list of materials</a> about chess programming.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1041</wp:post_id>
		<wp:post_date><![CDATA[2013-08-26 22:00:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-26 20:00:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[queem-open-source-computer-chess-in-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ai"><![CDATA[ai]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="post_tag" nicename="chess"><![CDATA[chess]]></category>
		<category domain="post_tag" nicename="chessprogramming"><![CDATA[chessprogramming]]></category>
		<category domain="post_tag" nicename="materials"><![CDATA[materials]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="queem"><![CDATA[queem]]></category>
		<category domain="post_tag" nicename="rebel"><![CDATA[rebel]]></category>
		<category domain="post_tag" nicename="sharp"><![CDATA[sharp]]></category>
		<category domain="post_tag" nicename="source-code"><![CDATA[source code]]></category>
		<category domain="post_tag" nicename="sources"><![CDATA[sources]]></category>
		<category domain="post_tag" nicename="wiki"><![CDATA[wiki]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[queem-computer-chess-in-c]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[tagazine-media]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:0:"";s:6:"images";a:0:{}s:6:"videos";a:0:{}s:11:"image_count";i:0;s:6:"author";s:8:"20401582";s:7:"blog_id";s:8:"53632187";s:9:"mod_stamp";s:19:"2013-08-26 20:13:21";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Problems when ejecting WD My Passport in Linux (OpenSUSE)</title>
		<link>http://code.jamming.com.ua/problems-when-ejecting-wd-my-passport-in-linux-opensuse/</link>
		<pubDate>Tue, 10 Sep 2013 19:46:43 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1049</guid>
		<description></description>
		<content:encoded><![CDATA[Struggled to safely eject my 1TB  Western Digital My Passport external hard drive in OpenSUSE. Googling regarding Western Digital was inefficient, because lots of people have been just saying not-such-a-good-things about WD products and nothing valuable regarding ejecting it.

Usual <code>eject</code> command had no success: hard drive continued to spin. I've even upgraded firmware to 1.49 on my Windows 7 machine at work. No succcess.

After some time googling I've found next working solution:
<ul>
	<li>install <code>udisks</code> utility</li>
	<li>run <code>sudo udisks --unmount /mount/point</code> from terminal</li>
	<li>run <code>sudo udisks --detach /your/device</code> from terminal</li>
	<li>profit</li>
</ul>
So, enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1049</wp:post_id>
		<wp:post_date><![CDATA[2013-09-10 21:46:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-10 19:46:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[problems-when-ejecting-wd-my-passport-in-linux-opensuse]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="digital"><![CDATA[digital]]></category>
		<category domain="post_tag" nicename="eject"><![CDATA[eject]]></category>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="opensuse"><![CDATA[opensuse]]></category>
		<category domain="post_tag" nicename="remove"><![CDATA[remove]]></category>
		<category domain="post_tag" nicename="safe"><![CDATA[safe]]></category>
		<category domain="post_tag" nicename="udisks"><![CDATA[udisks]]></category>
		<category domain="post_tag" nicename="unmount"><![CDATA[unmount]]></category>
		<category domain="post_tag" nicename="western"><![CDATA[western]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Future of C++ presentation by Herb Sutter</title>
		<link>http://code.jamming.com.ua/the-future-of-c-presentation-by-herb-sutter/</link>
		<pubDate>Thu, 10 Oct 2013 08:05:47 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1053</guid>
		<description></description>
		<content:encoded><![CDATA[http://channel9.msdn.com/Events/Build/2013/2-306]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1053</wp:post_id>
		<wp:post_date><![CDATA[2013-10-10 10:05:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-10 08:05:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-future-of-c-presentation-by-herb-sutter]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="herb"><![CDATA[herb]]></category>
		<category domain="post_format" nicename="post-format-link"><![CDATA[Link]]></category>
		<category domain="post_tag" nicename="presentation"><![CDATA[presentation]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="sutter"><![CDATA[sutter]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_f5e5c0cd3cc6c8ae59845a62fe3595bc]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_41dfa2c89d8c2d31aa2cd9a5eb572bde]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_4a31e6869b9c8bf79a21e9ddaeba7cac]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_92f946eebb15ebe1baabc8891fcc1973]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_ab21aa94417abb37835711c0dd54620f]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_249bd6cac91975b48a24ef721e123783]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails development environment in Emacs on OpenSuSE Linux</title>
		<link>http://code.jamming.com.ua/rails-development-environment-in-emacs-on-opensuse-linux/</link>
		<pubDate>Tue, 29 Oct 2013 21:12:15 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1060</guid>
		<description></description>
		<content:encoded><![CDATA[Today we'll set up a complete Ruby On Rails development environment on Linux. For an IDE we'll use Emacs and for host system - OpenSUSE.

Let's install latest Ruby+Rails bundle before configuring Emacs. You can refer to <a title="Rails on OpenSUSE 12.1" href="http://alphacluster.wordpress.com/2012/03/29/rails-on-opensuse-12-1/" target="_blank">nice article</a> on that. In short, you need get RVM and follow through script steps in terminal:
<pre><span style="color: #0000ff;"><span style="color: #000000;">&gt;</span> bash</span> -s stable &lt; &lt;(<span style="color: #0000ff;">curl</span> -s <span style="color: #808000;">https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer</span>)</pre>
Then load path to installed RVM in current bash session:
<pre><span style="color: #000000;">&gt;</span> . ~/.bash_profile</pre>
It's a bit frustrating that if bash finds a <em>.bash_profile</em> file, it ignores <em>.bashrc</em>, so be careful. Usually, I just move this one line from <em>.bash_profile</em> to <em>.profile</em> or <em>.bashrc</em>.

Then check requirements and install everything what is needed
<pre>&gt; rvm requirements</pre>
Now let's set ruby version to 2.0 and install rails (4):
<pre>&gt; rvm install 2.0
&gt; rvm use 2.0
&gt; gem install rails
&gt; gem install sqlite3</pre>
Now, when everything is ready, we can configure Emacs installation. I assume you've already installed emacs package via your favorite package manager.
Then lets add some custom configuration file for ruby configs in the <em>.emacs.d</em> directory, say <em>ruby-configuration.el</em> and add it to your .emacs file using
<pre>(<span style="color: #0000ff;">load</span> <span style="color: #339966;">"~/.emacs.d/ruby-configuration.el"</span>)</pre>
<!--more-->

I use next packages for Emacs + Ruby + Rails development:
<ul>
	<li>rvm.el</li>
	<li>rsense + ri + rurema</li>
	<li>flymake</li>
	<li>rinari</li>
	<li>inf-ruby</li>
	<li>web-mode</li>
	<li>rhtml</li>
	<li>ruby-compilation</li>
	<li>yaml-mode</li>
</ul>
You can easily google how to install and use them. I can only point at some interesting moments. First, you can set some git submodules, as I did:
<pre>[submodule <span style="color: #800000;">".emacs.d/web-mode"</span>]
    path = .emacs.d/web-mode
    url = <span style="color: #008000;">https://github.com/fxbois/web-mode</span>
[submodule <span style="color: #800000;">".emacs.d/rvm"</span>]
    path = .emacs.d/rvm
    url = <span style="color: #008000;">http://github.com/djwhitt/rvm.el.git</span>
[submodule <span style="color: #800000;">".emacs.d/rhtml"</span>]
    path = .emacs.d/rhtml
    url = <span style="color: #008000;">https://github.com/eschulte/rhtml.git</span>
[submodule <span style="color: #800000;">".emacs.d/yaml-mode"</span>]
    path = .emacs.d/yaml-mode
    url = <span style="color: #008000;">http://github.com/yoshiki/yaml-mode.git</span>
[submodule <span style="color: #800000;">".emacs.d/inf-ruby"</span>]
    path = .emacs.d/inf-ruby
    url = <span style="color: #008000;">https://github.com/nonsequitur/inf-ruby</span>
[submodule <span style="color: #800000;">".emacs.d/rinari"</span>]
    path = .emacs.d/rinari
    url = <span style="color: #008000;">https://github.com/eschulte/rinari.git</span>
[submodule <span style="color: #800000;">".emacs.d/fold-dwim"</span>]
    path = .emacs.d/fold-dwim
    url = <span style="color: #008000;">https://github.com/emacsmirror/fold-dwim</span></pre>
Do not forget to add appropriate directories to your load path using function
<pre>(<span style="color: #0000ff;">add-to-list</span> <span style="color: #993366;">'load-path</span> <span style="color: #339966;">"your/directory/with/submodule"</span>)</pre>
My other configuration are mostly copy-and-pasted from EmacsWiki for those packages I mentioned in a list of my Ruby packages. You can find <a href="https://github.com/Ribtoks/configs/blob/master/.emacs.d/elisp/ruby-config.el" target="_blank">my configuration at GitHub</a>.

Links:
<ul>
	<li><a href="http://viget.com/extend/emacs-24-rails-development-environment-from-scratch-to-productive-in-5-minu" target="_blank">Emacs 24 Rails Development Environment - From *scratch* to Productive in 5 Minutes</a></li>
	<li><a href="http://www.emacswiki.org/emacs/RubyOnRails" target="_blank">EmacsWiki: RubyOnRails</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1060</wp:post_id>
		<wp:post_date><![CDATA[2013-10-29 23:12:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-29 21:12:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rails-development-environment-in-emacs-on-opensuse-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="config-el"><![CDATA[config.el]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[Emacs]]></category>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="list"><![CDATA[list]]></category>
		<category domain="post_tag" nicename="rails"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solve problem from string</title>
		<link>http://code.jamming.com.ua/solve-problem-from-string/</link>
		<pubDate>Sat, 02 Nov 2013 19:34:55 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1065</guid>
		<description></description>
		<content:encoded><![CDATA[I with my friends joked that someday .NET framework would be so powerful, that it would be possible to write applications using magic method <em>SolveProblemFromString(string problemDescription)</em> like this:
<pre><span style="color:#0000ff;">public</span> <span style="color:#0000ff;">static</span> <span style="color:#0000ff;">void</span> Main()
{
    SolveProblemFromString(<span style="color:#993366;">"I need a new sync app for my iPod player!"</span>);
}</pre>
So the programmers would be deprecated.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1065</wp:post_id>
		<wp:post_date><![CDATA[2013-11-02 21:34:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-11-02 19:34:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solve-problem-from-string]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
		<category domain="post_tag" nicename="from"><![CDATA[from]]></category>
		<category domain="post_tag" nicename="future"><![CDATA[future]]></category>
		<category domain="category" nicename="humour"><![CDATA[Humour]]></category>
		<category domain="post_tag" nicename="problem"><![CDATA[problem]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="solve"><![CDATA[solve]]></category>
		<category domain="post_tag" nicename="string"><![CDATA[string]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solving mouse delays and lags in linux</title>
		<link>http://code.jamming.com.ua/solving-mouse-delays-and-lags-in-linux/</link>
		<pubDate>Sat, 16 Nov 2013 20:09:52 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1069</guid>
		<description></description>
		<content:encoded><![CDATA[I've been experiencing strange mouse delays and lags some time ago and now I've become tired of it. I'm using OpenSUSE with 3.7.10 kernel and first thing I tried was upgrading the kernel (to 3.12) which was quite useless. Googling related to my distro also wasn't helpful.

The trick was in laptop-mode-tools which I've installed earlier to make my laptop battery life longer. There is an usb autosuspend options which just suspended my usb wireless mouse. So setting
<pre><code>AUTOSUSPEND_USBTYPE_BLACKLIST="usbhid"</code></pre>
in the
<pre><code>/etc/laptop-mode/conf.d/usb-autosuspend.conf</code></pre>
and running
<pre><code>/etc/init.d/laptop-mode restart</code></pre>
was enough.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1069</wp:post_id>
		<wp:post_date><![CDATA[2013-11-16 22:09:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-11-16 20:09:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solving-mouse-delays-and-lags-in-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="delay"><![CDATA[delay]]></category>
		<category domain="post_tag" nicename="kernel"><![CDATA[kernel]]></category>
		<category domain="post_tag" nicename="lag"><![CDATA[lag]]></category>
		<category domain="post_tag" nicename="laptop-mode"><![CDATA[laptop-mode]]></category>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="mouse"><![CDATA[mouse]]></category>
		<category domain="post_tag" nicename="problem"><![CDATA[problem]]></category>
		<category domain="post_tag" nicename="wireless"><![CDATA[wireless]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MediaWiki installation on a linux guest in the VirtualBox: how-to, tips &amp; tricks</title>
		<link>http://code.jamming.com.ua/mediawiki-installation-on-guest-in-virtualbox-how-to-tips-tricks/</link>
		<pubDate>Fri, 22 Nov 2013 16:51:36 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1071</guid>
		<description></description>
		<content:encoded><![CDATA[I've spend half of a day trying to get MediaWiki working on a VirtualBox for the internal project in the internal network. Looks like it's done now and I want to share tips to help someone to spend less time in the future.

I've been installing and configuring MediaWiki 1.21 on the OpenSUSE 12.3, but all tips are valuable for any linux distro.

<!--more-->

<strong>Installation</strong>

I've installed apache2, mediawiki from the <em>php:extensions</em> repository (with tons of dependencies) and php5-related packages (sqlite, xmlreader, zlib and others). The <em>mediawiki</em> package has <em>mysql</em> in dependencies which is annoying, because I want to use PostgreSQL.

Mediawiki installation creates <em>/var/lib/mediawiki</em> directory, in which almost every file is a simulink to the <em>/usr/share/mediawiki</em> corresponding file. After the package is installed and apache is restarted using <em>sudo rcapache2 restart,</em> you're able to start a mediawiki instance installation through <em>http://localhost/w/</em> path in your browser. I recommend you to install some additional packages before the actual mediawiki instance (not package) installation:
<pre><em>php5-xcache, php5-intl, postgresql, php5-postgresql, postgresql-server, sendmail, php5-pear-Mail</em></pre>
<em>XCache</em> and <em>Intl</em> are required for MediaWiki, PostgreSQL is better than MySQL, <em>sendmail</em> and php mail extensions are needed for email confirmation from wiki.

Then I suppose you should install <em>phpPgAdmin</em> and go to <em>http://localhost/phpPgMyAdmin</em> to properly configure one. At the moment, you won't be able to login using the default username-password combination (postgres:postgres). To do so, you should make a bit of DB console hacking and <em>/var/lib/pgsql/data/pg_hba.conf</em> hacking (described in <a href="http://blog.milczarek.it/2012/09/install-postgresql-on-opensuse-12-1/" target="_blank">this article</a>).

After you're able to login to phpPgAdmin, you should create user for mediawiki db connection, say, <em>mediawiki_user</em>.

When you're done, go to <em>http://localhost/w/</em> and start the wiki installation process.

<strong>Configuring</strong>

During installation choose PostgreSQL instead of MySQL. Enter username you've created in phpPgAdmin before. Then you would be asked for username and password for a MediaWiki user, so make sure you're remembered/backed them up, cause they are username-password of so-called <em>sysop</em> user (e.g. main administrator of MediaWiki installation).

After you would succeed with MediaWiki intallation, let's make this Wiki available outside of the VirtualBox. First, go to <em>/etc/apache2/vhosts.d/</em> directory and create two files. One named <em>_default_vhost.conf</em> (with an underscore before name to be the default VirtualHost entry - read more in the <a href="http://activedoc.opensuse.org/book/opensuse-reference/chapter-20-the-apache-http-server" target="_blank">OpenSUSE apache docs</a> and <a href="http://httpd.apache.org/docs/2.2/vhosts/" target="_blank">Official apache docs</a>) with the following contents:
<pre>&lt;VirtualHost *:80&gt;
    ServerName localhost
    DocumentRoot /srv/www/htdocs
&lt;/VirtualHost&gt;</pre>
And the second one, say, <em>your_website_wiki.conf</em>:
<pre>&lt;VirtualHost *:80&gt;
    ServerAdmin your.name@mail.com
    ServerName <em>your_website_wiki</em>.local

    DocumentRoot /var/lib/mediawiki/webroot/

    ErrorLog /var/log/apache2/<em>your_website_wiki</em>.local-error_log
    CustomLog /var/log/apache2/<em>your_website_wiki</em>.local-access_log combined

    # don't loose time with IP address lookups
    HostnameLookups Off

    # needed for named virtual hosts
    UseCanonicalName Off

    &lt;Directory "/var/lib/mediawiki/webroot"&gt;
    AllowOverride None
    Options +ExecCGI -Includes
    Order allow,deny
    Allow from all
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
First file ensures correct resolution for requests to <em>localhost</em> and the second one is for our wiki resolution for external requests. After VirtualHosts are added, edit the <em>/etc/apache2/listen.conf</em> file and uncomment next line
<pre>NameVirtualHost *:80</pre>
Now restart apache (<em>rcapache2 restart</em>).

Don't forget to add HTTP server to the Yast Firewall exceptions and
<pre>127.0.0.1 your_website_wiki.local</pre>
to your <em>/etc/hosts</em> file.

Now you should be able to get you wiki from browser at guest OS from <em>http://your_website_wiki.local</em> address.

<strong>External networking</strong>

What's left is to allow access from the host OS. To do so, go to Port forwarding in the VirtualBox network preferences (I assume you have NAT enabled) and add a rule to forward <em>x.x.x.x</em> with 80 port to the 80 port of guest (where <em>x.x.x.x</em> is an address of you computer in your network). You can also play with Bridget networking but it's not the case.

After you're done, go to Control panel in Windows, choose Firewall and add domain exceptions to [<em>BranchCache - Content Retrieval (Uses HTTP)</em>].

There're two abilities for other people to access your wiki. First, you can add a dns entry to the <em>C:WindowsSystem32Driversetchosts</em> file manually. And the other one can be made by your system administrator which can add DNS record to the nearest internal DNS server for your computer.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1071</wp:post_id>
		<wp:post_date><![CDATA[2013-11-22 18:51:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-11-22 16:51:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mediawiki-installation-on-guest-in-virtualbox-how-to-tips-tricks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apache"><![CDATA[apache]]></category>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="post_tag" nicename="opensuse"><![CDATA[opensuse]]></category>
		<category domain="post_tag" nicename="postgresql"><![CDATA[postgresql]]></category>
		<category domain="post_tag" nicename="sendmail"><![CDATA[sendmail]]></category>
		<category domain="post_tag" nicename="server"><![CDATA[server]]></category>
		<category domain="post_tag" nicename="virtualbox"><![CDATA[virtualbox]]></category>
		<category domain="post_tag" nicename="virtualhost"><![CDATA[virtualhost]]></category>
		<category domain="post_tag" nicename="wiki"><![CDATA[wiki]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TeamCity 8 on CentOS 6.4 from scratch</title>
		<link>http://code.jamming.com.ua/teamcity-8-on-centos-6-4-from-scratch/</link>
		<pubDate>Tue, 26 Nov 2013 14:22:43 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1081</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div>In this post I'll describe whole TeamCity installation process on a fresh CentOS (on the moment I'm writing it's 6.4) for your private project or startup.</div>
<div>First, proceed to the <a title="Download CentOS" href="http://www.centos.org/modules/tinycontent/index.php?id=30" target="_blank">CentOS downloads page</a> and download CentOS distro through <em>.iso</em>, <em>.torrent</em> or <em>whatever-you-like</em> and start the installation process. If you're familiar with any  linux distro installation, it won't take you much time to complete the installation. I'm using the minimal configuration without any Desktop Environment and with minimum core- and other system utils. Nonetheless, consider installing <em>iptables, elinks and java (openjdk)</em>.</div>
<div>After the installation is over, login, add a user for yourself with <em>adduser</em> and let's start with TeamCity (maybe you'll also consider adding yourself to the sudoers file).</div>
<div>First, create <em>/opt/jetbrains/</em> directory and <a title="Download teamcity" href="http://www.jetbrains.com/teamcity/download/index.html" target="_blank">download latest TeamCity</a> using <em>wget</em>.</div>
<pre># mkdir /opt/jetbrains
# cd /opt/jetbrains
# wget http://download.jetbrains.com/teamcity/TeamCity-8.0.5.tar.gz
# tar -xpzf TeamCity-8.0.5.tar.gz</pre>
<div>

Now lets create a system user (e.g. no home directory) for TeamCity to resolve security issues correctly:
<pre># adduser -r teamcity
# passwd teamcity
# chown -R teamcity:teamcity TeamCity</pre>
</div>
<div>We'll use PostgreSQL for the internal database for TeamCity. So let's install postgresql packages (8.4 for CentOS 6.4). For details of the PostgreSQL installation please refer to <a title="PostgreSQL installation" href="http://wiki.postgresql.org/wiki/YUM_Installation" target="_blank">official webpage</a>.</div>
<pre># yum install postgresql
# service postgresql initdb
# chkconfig postgresql on</pre>
<div>Also edit the <em>/var/lib/pgsql/data/pg_hba.conf</em> file to allow authorization from <em>localhost</em>. Go to the end and replace <em>ident</em> to <em>trust</em> for <em>localhost</em> in the configuration for hosts. Now lets create another user for the future TeamCity database and create a database for that user.</div>
<pre># sudo -u postgres psql postgres
password postgres
# sudo -u postgres createuser -D -A -P teamcity_user
# sudo -u postgres createdb -O teamcity_user teamcity_db</pre>
<div>(D = Cannot create databases, A = Cannot add users, P = Force password prompt)</div>
<div><!--more--></div>
<div></div>
<div>To start TeamCity as a service in CentOS, you'll have to register it with <em>chkconfig</em> and to do so, let's create startup script in the <em>/etc/init.d/</em> directory and save it with any name (e.g. teamcity-script):</div>
<pre><code class="language-clike">#!/bin/bash
#
# chkconfig: 235 10 90
# description: TeamCity startup script
#

TEAMCITY_USER=teamcity
TEAMCITY_DIR=/opt/jetbrains/TeamCity/
<strong>TEAMCITY_SERVER=bin/teamcity-server.sh</strong>

TEAMCITY_DATADIR="/opt/jetbrains/TeamCity/.BuildServer"

. /etc/rc.d/init.d/functions

case "$1" in
start)
    sudo -u $TEAMCITY_USER -s -- sh -c "cd $TEAMCITY_DIR; <strong>TEAMCITY_DATA_PATH</strong>=$TEAMCITY_DATADIR $TEAMCITY_SERVER start"
    ;;
stop)
    sudo -u $TEAMCITY_USER -s -- sh -c "cd $TEAMCITY_DIR; TEAMCITY_DATA_PATH=$TEAMCITY_DATADIR $TEAMCITY_SERVER stop"
    ;;
*)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;
esac

exit 0</code></pre>
<div>Note the <em>TEAMCITY_DATA_PATH</em> system variable which is used to overwrite default <em>~/.BuildServer</em> path for the teamcity data. First commented lines exist for <em>chkconfig</em> compatability. Now you're able to register it:</div>
<pre># chkconfig --add teamcity-script
# chkconfig teamcity-script on</pre>
<div>Now our script would autostart on system startup in 2, 3 and 5 runlevels.</div>
<div>But what does actually <em>teamcity-server.sh</em> script do? It's located in the <em>bin/</em> directory of the TeamCity installation directory and it launches Tomcat server with initial config (<em>conf/server.xml</em> file). This config can be useful for us, so let's modify it slightly:</div>
<div>
<ul>
	<li>Find the Connector node and change port to whatever you like (but don't use port 80 - to be discussed later in this post)</li>
	<li>Find the Host node and change <em>name</em> attribute from the <em>localhost</em> to whatever you like host, which also should be duplicated in the <em>/etc/hosts</em> file (e.g. if you host's name is <em>my_server.my_domain</em>, than the <em>/etc/hosts</em> file should also contain <em>"127.0.0.1 my_server.my_domain"</em>)</li>
	<li>Host element has also one useful child node: Alias. You can add <em>&lt;Alias&gt;other_server_name&lt;/Alias&gt;</em> to use aliasing. See <a title="Tomcat aliasing" href="http://tomcat.apache.org/tomcat-6.0-doc/config/host.html#Host_Name_Aliases" target="_blank">official Tomcat documentation on this topic</a>.</li>
	<li>If your server is being accessed through proxy (or it's running on a virtual machine with forwarding from host), you'll have to uncomment last Valve node in the Host config and change the <em>internalProxies</em> respectively to your proxy.</li>
</ul>
</div>
<div>Another important thing is <em>iptables</em>. This is a server, right? So let's configure a firewall properly. You can paste below config as a working one for a server in the <em>/etc/sysconfig/iptables</em> file:</div>
<pre>*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p ah -j ACCEPT
-A INPUT -p esp -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 443 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 53 -j ACCEPT
-A INPUT -m state --state NEW -m udp -p udp --dport 53 -j ACCEPT
<strong>-A INPUT -m state --state NEW -m tcp -p tcp --dport 8111 -j ACCEPT</strong>
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
COMMIT</pre>
<div>The most valuable line for us is highlighted and allows packets on <strong>8111</strong> port (the one Tomcat is listening to). You can easily configure Tomcat to listen to another port in the <em>conf/server.xml</em> file on your TeamCity installation. You can also find lots of articles on the web about making a proxy with <em>apache</em> or <em>lighttpd</em> for Tomcat just in order to enter urls like <em>http://my-server/teamcity</em> instead of <em>http://my-server:8111/teamcity/</em>. Believe me, <del>java and tomcat are not worth normal url in your browser! Besides,</del> you'll have to spend your time to deal with several issues:</div>
<div>
<ul>
	<li>If you want make Tomcat listen to 80 port (in the Connector node in <em>conf/server.xml</em>), you would have to launch <del>TeamCity</del> Tomcat from a <em>root</em> user instead of non-privileged, because only root can listen to 80 port</li>
	<li>You'll have to spend plenty of time looking for proper configuration when trying to configure a proxy for Tomcat regarding build agents which would need special configuration too (just like the server)</li>
</ul>
So, I assume, you have enough reasons to leave the 8111 port as the default one. Let's ensure that <em>iptables</em> function properly:

</div>
<pre># service iptables restart
# chkconfig iptables on
# service teamcity-script start</pre>
<div></div>
<div>Now you can launch a browser and navigate to <em>http://my_server.my_domain:8111 </em>(TeamCity data is stored in <em>webapps/ROOT</em> directory and you're able to move it to some other like <em>webapps/teamcity</em> but in this case your address would be <em>http://my_server.my_domain:8111/teamcity</em>) and see TeamCity page with a correct DATA_PATH (check if it's same like the one you specified in the <em>/etc/init.d/teamcity-script</em>). Check if user <em>teamcity</em> is able to create a directory DATA_PATH.  If everything is correct, proceed, agree to the license terms and wait while TeamCity will finish with basic installation. Please, note, that for now TeamCity is using internal DB which is not for the production purposes! Let's fix this using the <a title="PostgreSQL for TeamCity" href="http://confluence.jetbrains.com/display/TCD8/Setting+up+an+External+Database" target="_blank">official how-to</a> by downloading proper postgresql jdbc driver (for postgresql version on current CentOS) and configuring PostgreSQL authentication:</div>
<pre># service teamcity-script stop
# cd YOUR_DATA_PATH
# cd lib/jdbc
# su - teamcity
$ wget jdbc.postgresql.org/download/postgresql-8.4-703.jdbc4.jar
$ cd ../../config/
$ cp database.postgresql.properties.dist database.properties</pre>
<div>Now edit <em>database.properties</em> with you favorite editor (say, <em>vi</em>) and replace placeholder credentials with those you've specified in the PostgreSQL post-installation configuration.</div>
<div>
<div>
<pre><code>connectionUrl=jdbc:postgresql:</code><code>//</code><code>&lt;host&gt;/&lt;database name&gt;
connectionProperties.user=&lt;user&gt;
connectionProperties.password=&lt;password&gt;</code></pre>
</div>
</div>
<div>After you're done, relaunch TeamCity:</div>
<pre># service teamcity-script start</pre>
<div>Open your browser, go to the teamcity page and you should see TeamCity complaining about missing database. You'll have only one-button choice, so proceed. Now teamcity will try to create another database (many thanks to <a title="TeamCity and YouTrack on Ubuntu" href="http://jerryemilo.com/2012/12/29/teamcity-and-youtrack-on-ubuntu-12-10-quantal-quetzal/" target="_blank">this tutorial</a>) but it will require an authorization key, which can be found at the end of <em>logs/teamcity-server.log</em> file in your TeamCity main directory. Copy it and paste in the browser textbox, press <em>Next</em> and now TeamCity should launch correctly with PostgreSQL in the backend.</div>
<div></div>
<div></div>
A plenty of useful links:
<ul>
	<li>http://jerryemilo.com/2012/12/29/teamcity-and-youtrack-on-ubuntu-12-10-quantal-quetzal</li>
	<li>http://kogentadono.com/category/teamcity/</li>
	<li>http://stackoverflow.com/questions/4247685/teamcity-webserver-with-apache-proxy-get-method-get-not-implemented-try-post</li>
	<li>http://www.cyberciti.biz/tips/postgres-allow-remote-access-tcp-connection.html</li>
	<li>http://www.warp1337.com/content/scientifc-linux-centos-rhel-and-lighttpd-lighttpd-doesnt-start-solved</li>
	<li>http://zeroturnaround.com/rebellabs/rebel-labs-report-why-devs-love-ci-a-guide-to-loving-continuous-integration/5/</li>
</ul>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1081</wp:post_id>
		<wp:post_date><![CDATA[2013-11-26 16:22:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-11-26 14:22:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[teamcity-8-on-centos-6-4-from-scratch]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="autostart"><![CDATA[autostart]]></category>
		<category domain="post_tag" nicename="centos"><![CDATA[centos]]></category>
		<category domain="post_tag" nicename="config"><![CDATA[config]]></category>
		<category domain="post_tag" nicename="continuous-integration"><![CDATA[continuous integration]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[database]]></category>
		<category domain="post_tag" nicename="how-to"><![CDATA[how-to]]></category>
		<category domain="post_tag" nicename="init"><![CDATA[init]]></category>
		<category domain="post_tag" nicename="init-d"><![CDATA[init.d]]></category>
		<category domain="post_tag" nicename="installation"><![CDATA[installation]]></category>
		<category domain="post_tag" nicename="iptables"><![CDATA[iptables]]></category>
		<category domain="post_tag" nicename="jetbrains"><![CDATA[jetbrains]]></category>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="postgresql"><![CDATA[postgresql]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="scratch"><![CDATA[scratch]]></category>
		<category domain="post_tag" nicename="script"><![CDATA[script]]></category>
		<category domain="post_tag" nicename="startup"><![CDATA[startup]]></category>
		<category domain="post_tag" nicename="teamcity"><![CDATA[teamcity]]></category>
		<category domain="post_tag" nicename="tomcat"><![CDATA[tomcat]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[sandeep]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sinha.sandeep01@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[14.140.166.2]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-11-27 13:41:36]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-11-27 11:41:36]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,
Thanks for the nice post.
I followed this document. And when i try to start the teamcity service, it asks for a password for the user teamcity and also complains that /opt/jetbrains/TeamCity is not a directory. Could you please help me with this?
Thank you!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385552755.5542231;s:7:"message";s:46:"latobco changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"latobco";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
				<wp:meta_value><![CDATA[1385552754]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1385552754]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385552496.5910251;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_elasticsearch_indexed_on]]></wp:meta_key>
				<wp:meta_value><![CDATA[2013-11-27 11:41:36]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[latobcode]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[admin@jamming.com.ua]]></wp:comment_author_email>
			<wp:comment_author_url>http://code.jamming.com.ua</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[194.44.221.46]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-11-27 13:48:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-11-27 10:48:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've updated post. Change teamcity user password with
<em># passwd teamcity</em>

Check whether you're starting TeamCity service as a root user 
<em>sudo service teamcity-script start</em>

Also, check if your startup script in the <em>/etc/init.d/</em> directory is same as in the topic.
Check your TeamCity installation directory also. You should unpack TeamCity into the <em>/opt/jetbrains/</em> directory and give appropriate permissions for the <em>teamcity</em> user]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>4</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1385552913]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385552914.2527909;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"latobco";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
				<wp:meta_value><![CDATA[1385552914]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_elasticsearch_indexed_on]]></wp:meta_key>
				<wp:meta_value><![CDATA[2013-11-27 11:48:33]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[seinarsson]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[staffan.einarsson@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[79.145.187.156]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-01-02 12:50:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-01-02 10:50:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for this post! Very useful since Jetbrains do not provide a distribution package for TeamCity.

I've got as far as to the automatic start of the teamcity service on system boot. The init script that you provided seems to work great when I run it manually as root, but does not launch properly after system reboot. I use

# ps -Af | grep java

to look for the running server after boot and it is not there.

Any idea what might be the cause?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_queued]]></wp:meta_key>
				<wp:meta_value><![CDATA[1388662193]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1388662193]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1388662193.0493541;s:7:"message";s:46:"latobco changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"latobco";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
				<wp:meta_value><![CDATA[1388659817]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_jobid]]></wp:meta_key>
				<wp:meta_value><![CDATA[18830808575]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1388659817.7850499;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:16:"staffaneinarsson";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_elasticsearch_indexed_on]]></wp:meta_key>
				<wp:meta_value><![CDATA[2014-01-02 10:50:17]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[latobcode]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[admin@jamming.com.ua]]></wp:comment_author_email>
			<wp:comment_author_url>http://code.jamming.com.ua</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[194.44.221.46]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-01-02 15:13:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-01-02 12:13:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Check whether service is actually installed and enabled on 3 runlevel with
<code>chkconfig --list</code>

and check whether it has executable permissions
<code>ls -la | grep teamcity</code>
in the <em>/etc/init.d/</em> directory
If it doesn't, add using <code>chmod +x /etc/init.d/teamcity-script</code>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>6</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1388668416]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1388668416.860148;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"latobco";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_jobid]]></wp:meta_key>
				<wp:meta_value><![CDATA[18834519502]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_queued]]></wp:meta_key>
				<wp:meta_value><![CDATA[1388668417]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_elasticsearch_indexed_on]]></wp:meta_key>
				<wp:meta_value><![CDATA[2014-01-02 13:13:35]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[seinarsson]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[staffan.einarsson@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.39.95.211]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-01-07 11:39:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-01-07 09:39:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Both of them checks out for me - see output below. I have changed the name of the server script and added an agent service as well, which starts the agent instead.

<code>
[root@xxx ~]# chkconfig --list | grep teamcity
teamcity-agent  0:off   1:off   2:on    3:on    4:on    5:on    6:off
teamcity-server 0:off   1:off   2:on    3:on    4:on    5:on    6:off

[root@xxx ~]# ls -la /etc/init.d/ | grep teamcity
-rwxr-xr-x  1 root root   484 Jan  2 11:24 teamcity-agent
-rwxr-xr-x  1 root root   618 Jan  2 11:23 teamcity-server
</code>

The result was exactly the same when doing exactly as you typed it, i.e. the services start correctly if I type 

<code>
[root@xxx ~]# service teamcity-server start
[root@xxx ~]# service teamcity-agent start
</code>

but nothing happens on boot.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>7</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1389087565]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1389087565.8686111;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:16:"staffaneinarsson";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_jobid]]></wp:meta_key>
				<wp:meta_value><![CDATA[19112862359]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_queued]]></wp:meta_key>
				<wp:meta_value><![CDATA[1389087566]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_elasticsearch_indexed_on]]></wp:meta_key>
				<wp:meta_value><![CDATA[2014-01-07 09:39:25]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[latobcode]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[admin@jamming.com.ua]]></wp:comment_author_email>
			<wp:comment_author_url>http://code.jamming.com.ua</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[194.44.221.46]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-01-08 17:22:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-01-08 14:22:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>seinarsson</strong>, frankly speaking, I have no idea what's wrong with your <em>chkconfig</em> and what can I say is that the problem is in the <em>init.d</em> script (check runlevels again) or smth has broken in your CentOS, so please, google for issues with daemon launching using <em>chkconfig</em>.

Write another simple script, which echo'es "<em>hello world</em>" somewhere and try to add it to the 3 and 5 runlevel and check if it's working. If it works, smth wrong with your teamcity init.d script. If it doesn't, smth wrong with your distro.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>6</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1389194578]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1389194578.799094;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"latobco";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_jobid]]></wp:meta_key>
				<wp:meta_value><![CDATA[19193570808]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_queued]]></wp:meta_key>
				<wp:meta_value><![CDATA[1389194579]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_elasticsearch_indexed_on]]></wp:meta_key>
				<wp:meta_value><![CDATA[2014-01-08 15:22:57]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[kupolua]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[1215@i.ua]]></wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/kupolua</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[95.158.40.93]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-05-15 08:35:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-05-15 06:35:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[When I run a script manually it works correctly. But, when I run a script automatically on system - nothing to work. I found answer. TeamCity run under user teamcity. It must be in suoders and you should be to comment line: Default requiretty =&gt; #Default requiretty

# visudo]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[_elasticsearch_indexed_on]]></wp:meta_key>
				<wp:meta_value><![CDATA[2014-05-15 06:35:47]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400135748.95542;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"kupolua";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_jobid]]></wp:meta_key>
				<wp:meta_value><![CDATA[23957635623]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[email_notification_queued]]></wp:meta_key>
				<wp:meta_value><![CDATA[1400137245]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
				<wp:meta_value><![CDATA[1400137245]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1400137245.812211;s:7:"message";s:46:"latobco changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:7:"latobco";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Generation of spiral matrices</title>
		<link>http://code.jamming.com.ua/generating-spiral-matrices/</link>
		<pubDate>Thu, 30 Jan 2014 18:55:20 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://latobcode.wordpress.com/?p=1111</guid>
		<description></description>
		<content:encoded><![CDATA[Have you ever heard about this simple problem? Generating spiral matrices. The one like this:
<pre>1  2  3  4  5
16 17 18 19 6
15 24 25 20 7
14 23 22 21 8
13 12 11 10 9</pre>
After a hour of trying different approaches (except one which consists of 4 loops for filling up &amp; down row and left &amp; right) I've written a working ruby snippet (just for fun):
<pre><code class="language-clike">def spiral(n)
    arr = Array.new(n){Array.new(n){0}}
    diff = [[0, 1], [1, 0], [0, -1], [-1, 0]]
    i, j = 0, 0
    dindex = 0
    turns = 0
    curr_square = n
    shift = 0

    (n*n).times do |index|
        arr[i][j] = index + 1

        if index == (shift + 4*curr_square - 5)
            curr_square -= 2
            turns, dindex = 0, 0
            shift = index + 1
            j += 1
            next
        end

        i += diff[dindex][0]
        j += diff[dindex][1]

        if index == (shift + (turns + 1)*(curr_square - 1) - 1)
            turns += 1
            dindex += 1
        end
    end

    arr
end

arr = spiral(10)
puts arr.map{|ia| ia.join(' ')}.join("\n")</code></pre>
You can find code about on <a href="https://gist.github.com/Ribtoks/8712591" target="_blank">Gist</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1111</wp:post_id>
		<wp:post_date><![CDATA[2014-01-30 20:55:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-01-30 18:55:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[generating-spiral-matrices]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="array"><![CDATA[array]]></category>
		<category domain="post_tag" nicename="matrix"><![CDATA[matrix]]></category>
		<category domain="post_tag" nicename="numbers"><![CDATA[numbers]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="ruby-programming"><![CDATA[Ruby]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="spiral"><![CDATA[spiral]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to process Nikon D5300 NEF and other unsupported RAW formats in Darktable</title>
		<link>http://code.jamming.com.ua/how-to-process-nikon-d5300-nef-and-other-unsupported-raw-formats-in-darktable/</link>
		<pubDate>Tue, 09 Sep 2014 09:26:07 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1113</guid>
		<description></description>
		<content:encoded><![CDATA[My favorite tool, Darktable, does not support new Nikon D5300 NEF format and, obviously, a lot of other RAW formats due to proprietary software for them. But there is a solution. There is a <a href="http://www.adobe.com/support/downloads/product.jsp?product=106&amp;platform=Windows" target="_blank">free tool from Adobe for Windows</a> and Mac: DNG converter, which is free and converts a lot (almost all, I guess) of proprietary RAW formats to <a href="http://en.wikipedia.org/wiki/Digital_Negative" target="_blank">DNG </a>(Digital NeGative - open lossless raw format. <a href="http://helpx.adobe.com/photoshop/camera-raw.html" target="_blank">Complete list of supported RAW formats</a> for DNG Converter.

<a href="http://code.jamming.com.ua/wp-content/uploads/2014/09/snapshot2.png"><img class="aligncenter wp-image-1123 size-large" src="http://code.jamming.com.ua/wp-content/uploads/2014/09/snapshot2-1024x616.png" alt="snapshot2" width="604" height="363" /></a>

For now DNG Converter is fairly simple so it runs flawlessly under Wine and you're able to export all your NEF (or other) photos first to DNG and then to process them in your favorite RAW editor. That's it!

(in my case then I switched Alt-Tab from working DNG converter, it crashed under Wine, but when window is active all the time, it works ok)

Also, if you set file format to 12-bit NEF in your camera, it would have green colors if you open them in any RAW editor (Darktable, RAWTherapee, Lighthouse, etc). But if you chose 14-bit RAW, it looks ok despite the fact it would be more sharp in native Nikon Windows- and Mac-only software.

If you have any questions, feel free to ask them in commets!

<strong>UPD:</strong> Darktable 1.6 supports D5300 NEF files if processed without OpenCL]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1113</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 12:26:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 09:26:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-process-nikon-d5300-nef-and-other-unsupported-raw-formats-in-darktable]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="12-bit"><![CDATA[12 bit]]></category>
		<category domain="post_tag" nicename="14-bit"><![CDATA[14 bit]]></category>
		<category domain="post_tag" nicename="adobe"><![CDATA[adobe]]></category>
		<category domain="post_tag" nicename="d5300"><![CDATA[d5300]]></category>
		<category domain="post_tag" nicename="darktable"><![CDATA[darktable]]></category>
		<category domain="post_tag" nicename="dng"><![CDATA[dng]]></category>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="nef"><![CDATA[nef]]></category>
		<category domain="post_tag" nicename="nikon"><![CDATA[nikon]]></category>
		<category domain="post_tag" nicename="open"><![CDATA[open]]></category>
		<category domain="post_tag" nicename="photography"><![CDATA[photography]]></category>
		<category domain="post_tag" nicename="raw"><![CDATA[raw]]></category>
		<category domain="post_tag" nicename="wine"><![CDATA[wine]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[how-to-process-nikon-d5300-nef-and-other-unsupported-raw-in-darktable]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2153</wp:comment_id>
			<wp:comment_author><![CDATA[Fred]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hardy_fred_pub@yahoo.fr]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[89.85.171.77]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-06-26 20:35:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-06-26 18:35:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[26 jun 2016
Updating to latest release (as of today) of Darktable solved the issue for my side.
https://www.darktable.org/2016/03/darktable-2-0-2-released/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1466966125.7359650135040283203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1467309100.1401770114898681640625;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"latobcode";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2154</wp:comment_id>
			<wp:comment_author><![CDATA[latobcode]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[contact@jamming.com.ua]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.52.51.14]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-06-30 19:51:55]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-06-30 17:51:55]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool. Good to know!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>2153</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1467309115.60750293731689453125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"latobcode";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Wordpress import Internal Error 500: how to deal with it</title>
		<link>http://code.jamming.com.ua/wordpress-import-internal-error-500-how-to-deal-with-it/</link>
		<pubDate>Tue, 09 Sep 2014 09:38:21 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1120</guid>
		<description></description>
		<content:encoded><![CDATA[When you import really large website to WP, server process can crash because of different restrictions for PHP memory, request processing time, database connection time etc. To deal with it, you have several options:
<ul>
	<li>one can find WP support forum with <a href="http://wordpress.org/support/topic/importing-wordpress-xml-fails-with-a-500-error" target="_blank">appropriate post</a> and solution: the simplier is to refresh page and click "Resend" which will repeat POST request and WP will continue to import data (it's smart enough to skip already imported posts)</li>
	<li>another (wiser) solution is to split your import file to several smaller files and import them one by one. Import file is just an ordinary XML file, so you'll just have to copy-paste header and then split import data is fairly small parts.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1120</wp:post_id>
		<wp:post_date><![CDATA[2014-09-09 12:38:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-09 09:38:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[wordpress-import-internal-error-500-how-to-deal-with-it]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="import"><![CDATA[import]]></category>
		<category domain="post_tag" nicename="internal-error"><![CDATA[internal error]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="refresh"><![CDATA[refresh]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simple Gimp plugin for batch processing in Python</title>
		<link>http://code.jamming.com.ua/simple-gimp-plugin-for-batch-processing-in-python/</link>
		<pubDate>Wed, 12 Nov 2014 08:32:35 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1142</guid>
		<description></description>
		<content:encoded><![CDATA[Not so far ago I needed to batch-process some images. The task was to resize them so they fit to given smallest resolution. Although Gimp has some batch-processing plugins, I wasn't able to solve my problem with them. That's why I've invented small little bike and I'd like to share with you workarounds and explanations of some Gimp plug-in development issues.

Your plugin can take as little as just one python file with call to function <em>register</em> (<em>from gimpfu</em>) and passing to it some metadata and actual method of plugin. You can read more about parameters to register on <a title="Official python Gimp API" href="http://www.gimp.org/docs/python/index.html" target="_blank">official docs website</a>. But a few moments still need clarifications.

<!--more-->

As official documentation says,
<p style="padding-left: 30px;"><em>If the plugin is to be run on an image, the first parameter to the plugin function should be the image, and the second should be the current drawable</em></p>
 And if you'll not change one of the parameters of <em>register</em> function, which is called <em>image_types</em>, your plugin will be disabled without an image opened in GIMP. If you don't know what to write there, just leave it blank (other possible values are "RGB*", "GRAY*").

Other parameters of <em>register</em> function set actual parameters of you plugin main method with default values.

Sample call to register (you can find tons of them on the internet):
<pre><code class="language-clike">register(
    "python_fu_resize_max",
    "Scales the image to fit minimal size in megapixels",
    "Help here",
    "Your Name",
    "Your Name",
    "2014",
    "&lt;Toolbox&gt;/Tools/Resize images to min size...",
    "",
    [
        (PF_INT, "min_size", "Minimum image size", 6000000),
        (PF_BOOL, "copy", "Make a JPEG copy", TRUE),
        (PF_BOOL, "process_dir", "Process a directory", TRUE),
        (PF_DIRNAME, "path", "Directory to Open", "./"),
    ],
    [],
    plugin_main)</code>
</pre>
And declaration of <em>plugin_main</em>:
<pre>def plugin_main(minsize=6000000, savecopy=TRUE, processdir=TRUE, dirname="./"):</pre>
Don't forget to make the script executable itself.

You can find <a href="https://raw.githubusercontent.com/Ribtoks/heap/master/gimp-scale-min-plugin/scale_min.py" target="_blank">complete example here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1142</wp:post_id>
		<wp:post_date><![CDATA[2014-11-12 11:32:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-12 08:32:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[simple-gimp-plugin-for-batch-processing-in-python]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[api]]></category>
		<category domain="post_tag" nicename="gimp"><![CDATA[gimp]]></category>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="plug-in"><![CDATA[plug-in]]></category>
		<category domain="post_tag" nicename="plugin"><![CDATA[plugin]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Building Hedgewars under OS X Yosemite</title>
		<link>http://code.jamming.com.ua/building-hedgewars-under-os-x-yosemite/</link>
		<pubDate>Wed, 31 Dec 2014 10:23:20 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1148</guid>
		<description></description>
		<content:encoded><![CDATA[Ok, you considered to build Hedgewars by yourself. To be clear, I'm going to build 0.9.21 on 10.10 Yosemite on MacBook Pro with Retina. First of all, read <a href="https://code.google.com/p/hedgewars/wiki/BuildingOnMac" target="_blank">official manual</a>. After source code pull from Mercurial failed via <em>hg</em> command I considered downloading source on the <a href="http://www.hedgewars.org/download.html" target="_blank">Downloads page</a>.

As original HowTo says, you should build Ogg and Vorbis, but while Ogg build succeeded, Vorbis said it can't resolve <em>u_int16_t</em> type and after some googling I've found it was a known issue and you should replace <em>#include &lt;inttypes.h&gt;</em> with <em>#include &lt;sys/types.h&gt;</em> under <em>#elfif (defined(__APPLE__) &amp;&amp; defined(__MACH__))</em> in file <em>ogg/os_types.h</em>. Then everything goes more or less ok until you're trying to generate makefile with Cmake. I had to turn off video recording feature, screenshots in PNG (BMPs instead) and no local server. Finally, I came up with

cmake . -DQT_QMAKE_EXECUTABLE=/usr/bin/qmake -DNOPNG=1 -DNOVIDEOREC=1 -DNOSERVER=1 -DCMAKE_BUILD_TYPE=Release

After successful build you still can't play, because <em>hwengine</em> fails to launch. It looks for <em>libfreetype.6.dylib</em> in <em>/usr/X11</em>, but you might even don't have X11 installed. If yes, proceed to <a href="http://xquartz.macosforge.org/trac/wiki" target="_blank">Quartz/X11</a>, download and install it. Don't forget after all make symlink to original X11 directory using <em>sudo ln -s /opt/X11 /usr/X11</em>.

And still, after everything is done, Hedgewars fail to run in fullscreen mode so you might consider running it via VirtualBox and some Linux distro instead.

By the way, you can <a href="http://ge.tt/2eynVr72" target="_blank">download my build of Hedgewars 0.9.21 for OS X Yosemite 10.10 here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1148</wp:post_id>
		<wp:post_date><![CDATA[2014-12-31 13:23:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-31 10:23:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[building-hedgewars-under-os-x-yosemite]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="binary"><![CDATA[binary]]></category>
		<category domain="post_tag" nicename="build"><![CDATA[build]]></category>
		<category domain="post_tag" nicename="download"><![CDATA[download]]></category>
		<category domain="post_tag" nicename="games"><![CDATA[games]]></category>
		<category domain="post_tag" nicename="hedgewars"><![CDATA[hedgewars]]></category>
		<category domain="post_tag" nicename="howto"><![CDATA[howto]]></category>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="os-x"><![CDATA[os x]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to copy data from Excel to SQL</title>
		<link>http://code.jamming.com.ua/how-to-copy-data-from-excel-to-sql/</link>
		<pubDate>Thu, 08 Jan 2015 16:30:48 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1156</guid>
		<description></description>
		<content:encoded><![CDATA[Just an elegant and "hacky" way

<a href="http://tgrignon.wordpress.com/2007/03/07/using-excel-to-generate-inserts-for-sql-server/" target="_blank">http://tgrignon.wordpress.com/2007/03/07/using-excel-to-generate-inserts-for-sql-server/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1156</wp:post_id>
		<wp:post_date><![CDATA[2015-01-08 19:30:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-08 16:30:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-copy-data-from-excel-to-sql]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-link"><![CDATA[Link]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_1838bc5f1266318722e8f16060c2f7f5]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Interesting issues and features of Qt programming</title>
		<link>http://code.jamming.com.ua/interesting-issues-and-features-of-qt-programming/</link>
		<pubDate>Thu, 16 Jul 2015 14:17:35 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1168</guid>
		<description></description>
		<content:encoded><![CDATA[In this post I enlist all interesting facts and issues I've experienced while developing my first project in Qt (from 5.3 to <del>5.4</del> 5.6)

18.02 - QSettings interface in Qml transformed bool to string and was always true on deserialization

18.02 - QByteArray returned from local scope crashed with heap corruption on return of function (destructor of QByteArray)

Qt can delete your object in it's gui loop. QObject should have CppManaged attribute and it should be set before returning object to UI code.

26.02 QTimer can be only started when EventLoop is already running (e.g. with app.exec()) otherwise you get an error "QTimer can be started in QThread"

Drag and Drop files in OS X inserts NSUrl instead of QUrl and you have to convert it using Objective C to real filepath. You can add .m file to Qt project and write C++/Objective-C code.

23.03 QtConcurrent::mapped can accept a struct with operator() but only with inner <em>typedef T return_type;</em> where T is mapped type for correct QFuture&lt;T&gt; conversion. Also, QtConcurrent::mapped cannot be cancelled.

30.05 Qt Column allows to do animations, but has issues with stretching and ColumnLayout has no issues with stretching, but doesn't allow you to do animations. I had to use simple anchors layout and States with Transitions to animate properties I wanted

1.06 Qt ListView has Transitions add/remove/removeDisplaced/displaced/etc, which allow to create nice animations for adding/deleting items from listview and to make UI really nice

6.06 Qt lacks standard Zip/Unzip functionality. QuaZip makes life easier, but has minor issues with compilation (linking etc).

22.07 TextInput's EditingFinished signal fires twice in OS X

6.09 Windeployqt does not pack qml dlls into the bundle, you have to do it manually from your &lt;Qt-bin-dir&gt;/qml. You need to copy QtQuick and QtQuick2 directories and others which you use

19.09 Tab control is a loader and you can't access it's child object by Id. You have to create a property of Tab and do double binding inside and outside Tab to that property.

25.10 Repeater in GridLayout does not respect QAbstractItemModel changes, but does respect once put into Flow

23.11 Always initialize boolean fields, volatile or not. Always do that because in other case you will get tons of unpredictable behavior.

28.11 Use QVector instead of QList for most types. If you have released public version with wrong type and users depend on it, you're screwed

12.12 QML ListView fails to update itself after sophisticated filter/remove operations. You have to manually <code class="language-clike">positionViewAtBeginning()</code> stuff

20.03 QFile in Windows does not respect flag QIODevice::Unbuffered because of "lack of native support in Windows" (bullshit) as of Qt 5.6

21.03 QProcess has super strange problems. Exiftool does not work with unicode from QProcess but works when launched via cmd.exe

2.05 QWaitCondition destructor produced a warning that it's destroyed while inner Mutex is still locked. Was able to debug that using export QT_FATAL_WARNINGS=true in the running environment

20.07 QString::fromLatin1() truncated buffer of QByteArray parameter if the latter contained some eol/nl characters

16.12 virtual inheritance from the QObject is not supported.. Need to have stubs for calling signals

17.03 Timer in QML can have very high CPU utilization. Need to use with care]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1168</wp:post_id>
		<wp:post_date><![CDATA[2015-07-16 16:17:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-16 14:17:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[interesting-issues-and-features-of-qt-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="issue"><![CDATA[issue]]></category>
		<category domain="post_tag" nicename="problem"><![CDATA[problem]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="qt"><![CDATA[qt]]></category>
		<category domain="category" nicename="qt"><![CDATA[Qt]]></category>
		<category domain="post_tag" nicename="solution"><![CDATA[solution]]></category>
		<category domain="post_tag" nicename="tip"><![CDATA[tip]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.NET String Dictionary vs string switch performance</title>
		<link>http://code.jamming.com.ua/net-string-dictionary-vs-string-switch-performance/</link>
		<pubDate>Wed, 18 Feb 2015 20:11:26 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1170</guid>
		<description></description>
		<content:encoded><![CDATA[I had a simple task to map a collection of objects with string property. Map function should replace one string property to another from set of 5-6 strings. Existing solution used Dictionary initialized with those hard-coded values. Once upon a time I tried to compare Dictionary with <em>int</em> keys to <em>int</em> switch and int switch was FAR better. It was chess engine so performance mattered.

Now it's a web request with thousands of rows of reply, serialized to json, so performance matters again. I wrote simple program, which generated 10 million instances of my simple class with several properties and mapped this list with both methods. Before that I ensured that both methods were JIT'ed. You can find <a href="https://github.com/Ribtoks/heap/blob/master/PerformanceTests/StringSwitchTest/StringSwitchTest/Program.cs" target="_blank">source code at Github</a>.

Details below..

<!--more-->

I can show two Map methods for the reference here:
<pre><code class="language-clike">private static string MapStringBySwitch(string line)
        {
            switch (line)
            {
                case LargeBoobsType:
                    return "test 1";
                case ExtremeBoobsType:
                    return "another unexpected";
                case UserDefinedBoobs:
                    return "numbers";
                case PrivatePersonCleanBoobs:
                    return "12345567";
                case FixedAcceptSSSBoobs:
                    return ";jhibkjkgyufyj";
                default:
                    return "default value here";
            }
        }</code></pre>
Dictionary method is here:
<pre><code class="language-clike">private static readonly IDictionary&lt;String, String&gt; BoobsTypeNameMap =
            new Dictionary&lt;String, String&gt;
            {
                {"MultipleType", "MultipleType"},

                {LargeBoobsType, "test 1"},
                {ExtremeBoobsType, "another unexpected"},
                {UserDefinedBoobs, "numbers"},
                {PrivatePersonCleanBoobs, "12345567"},
                {FixedAcceptSSSBoobs, ";jhibkjkgyufyj"},
            };

        public static String MapStringByDict(String type)
        {
            string result;
            if (type == null || 
                !BoobsTypeNameMap.TryGetValue(type, out result))
            {
                result = "default value here";
            }

            return result;
        }</code></pre>
Null comparison should be in the original, so I preserved it. Null-check added about 100 milliseconds to Dictionary Map on my machine.

Results:

In Debug version Map with Dictionary took around 750 milliseconds on my machine. In Release version Dictionary Map took around 650 milliseconds. I used method <a href="https://msdn.microsoft.com/en-us/library/bb347013%28v=vs.110%29.aspx" target="_blank">TryGetValue()</a> which is, I guess, the most efficient (Remember to minus 100 milliseconds if you do not need null check).

In Debug version Map with switch took around 450 milliseconds on my machine which is not far better than dictionary and is more complex to actually write (Dictionary is more programmer-friendly than giant switch). In Release version Map with switch took around 250 milliseconds which is 3 times faster than Dictionary Map in Debug and <strong>2.5 times faster than Dictionary Map</strong> in Release.

So, if your goal is to build quick app, use such a low-level optimizations.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1170</wp:post_id>
		<wp:post_date><![CDATA[2015-02-18 22:11:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-18 20:11:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[net-string-dictionary-vs-string-switch-performance]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="post_tag" nicename="dictionary"><![CDATA[dictionary]]></category>
		<category domain="post_tag" nicename="efficient"><![CDATA[efficient]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="programming-2"><![CDATA[programming]]></category>
		<category domain="post_tag" nicename="string"><![CDATA[string]]></category>
		<category domain="post_tag" nicename="switch"><![CDATA[switch]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Text encryption in Qt/C++ with tiny AES 128bit</title>
		<link>http://code.jamming.com.ua/text-encryption-in-qtc-with-tiny-aes-128bit/</link>
		<pubDate>Tue, 24 Feb 2015 13:12:39 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1173</guid>
		<description></description>
		<content:encoded><![CDATA[Have you ever needed a small, really small encryption in your C++ project for some piece of text? Say, credentials, login details or any other sensitive data? Of course, the best way is to keep just hash of salted password, but... What if you just <strong>need</strong> to do it and the size is so much critical for you?

There're <a href="https://www.openssl.org/" target="_blank" rel="noopener">openSSL</a> library and <a href="http://www.cryptopp.com/" target="_blank" rel="noopener">Crypto++</a> library which are monsters with tons of encryption algorithms, used in a number of solid projects etc. But.. they are big! I don't want 30Mb library in my tiny project, which weights 10 Mb with high-resolution icons for OS X which weight by itself 5Mb. So I don't want to sacrifice the size but still need encryption. Meet <a href="https://github.com/kokke/tiny-AES128-C" target="_blank" rel="noopener">tiny-AES.</a> It's really small AES 128-bit library which does encryption in <a href="https://en.wikipedia.org/wiki/Block_cipher_modes_of_operation" target="_blank" rel="noopener">CBC and ECB modes</a>. It really contains everything you needed just to encrypt and decrypt your sensitive data and forget about it.

You can find example under the hood.

<!--more-->

Tiny-AES is not super-strong, it implements AES, it's build for ARMs.. but it works! It's easy to adopt to any C++ project. Here's how I implemented encryption in my small Qt C++ project.

Key for AES-128 should be 128 bit length, so I used MD5 hashing to get exactly 128 bit buffer for AES key. Cypher-text should be 16 bit aligned, so I use my own inlined alignment function (which could be macro etc.). Also I used <em>utf8()</em> method of QString to get pointer to underlying <em>ushort*</em> buffer and to encode directly it.
<pre><code class="language-clike">#ifndef AESQT_H
#define AESQT_H

# tons of other includes
#include "../tiny-aes/aes.h"

namespace Encryption {

    const uint8_t iv[] = { 0xf0, 0xe1, 0xd2, 0xc3, 0xb4, 0xa5, 0x96, 
              0x87, 0x78, 0x69, 0x5a, 0x4b, 0x3c, 0x2d, 0x5e, 0xaf };

    inline int getAlignedSize(int currSize, int alignment) {
        int padding = (alignment - currSize % alignment) % alignment;
        return currSize + padding;
    }

    QString encodeText(const QString &amp;rawText, const QString &amp;key) {
        QCryptographicHash hash(QCryptographicHash::Md5);
        hash.addData(key.toUtf8());
        QByteArray keyData = hash.result();

        const ushort *rawData = rawText.utf16();
        void *rawDataVoid = (void*)rawData;
        const char *rawDataChar = static_cast(rawDataVoid);
        QByteArray inputData;
        // ushort is 2*uint8_t + 1 byte for '\0'
        inputData.append(rawDataChar, rawText.size() * 2 + 1);

        const int length = inputData.size();
        int encryptionLength = getAlignedSize(length, 16);

        QByteArray encodingBuffer(encryptionLength, 0);
        inputData.resize(encryptionLength);

        AES128_CBC_encrypt_buffer((uint8_t*)encodingBuffer.data(), (uint8_t*)inputData.data(),
           encryptionLength, (const uint8_t*)keyData.data(), iv);

        QByteArray data(encodingBuffer.data(), encryptionLength);
        QString hex = QString::fromLatin1(data.toHex());
        return hex;
    }

    QString decodeText(const QString &amp;hexEncodedText, const QString &amp;key) {
        QCryptographicHash hash(QCryptographicHash::Md5);
        hash.addData(key.toUtf8());
        QByteArray keyData = hash.result();

        const int length = hexEncodedText.size();
        int encryptionLength = getAlignedSize(length, 16);

        QByteArray encodingBuffer(encryptionLength, 0);

        QByteArray encodedText = QByteArray::fromHex(hexEncodedText.toLatin1());
        encodedText.resize(encryptionLength);

        AES128_CBC_decrypt_buffer((uint8_t*)encodingBuffer.data(), (uint8_t*)encodedText.data(), 
          encryptionLength, (const uint8_t*)keyData.data(), iv);

        encodingBuffer.append("\0\0");
        void *data = encodingBuffer.data();
        const ushort *decodedData = static_cast(data);
        QString result = QString::fromUtf16(decodedData);
        return result;
    }
}

#endif // AESQT_H</code></pre>
I wrote <a href="https://github.com/Ribtoks/xpiks/blob/master/src/xpiks-tests/encryption_tests.cpp" target="_blank" rel="noopener">a bunch of tests</a> against that functions so the solution is proven to be working. So if you're looking for really tiny encryption or AES implementation, use <a href="https://github.com/kokke/tiny-AES128-C" target="_blank" rel="noopener">tiny-AES-128</a>!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1173</wp:post_id>
		<wp:post_date><![CDATA[2015-02-24 15:12:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-24 13:12:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[text-encryption-in-qtc-with-tiny-aes-128bit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="aes"><![CDATA[aes]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="data"><![CDATA[data]]></category>
		<category domain="post_tag" nicename="encryption"><![CDATA[encryption]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="qt"><![CDATA[qt]]></category>
		<category domain="category" nicename="qt"><![CDATA[Qt]]></category>
		<category domain="post_tag" nicename="text"><![CDATA[text]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2155</wp:comment_id>
			<wp:comment_author><![CDATA[Swarit]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[swarit.wipra@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[182.73.254.34]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-07-04 10:09:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-07-04 08:09:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[i'm getting error :
error: undefined reference to `AES128_CBC_encrypt_buffer(unsigned char*, unsigned char*, unsigned int, unsigned char const*, unsigned char const*)']]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1467619755.9189739227294921875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1467802788.812179088592529296875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"latobcode";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2158</wp:comment_id>
			<wp:comment_author><![CDATA[latobcode]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[contact@jamming.com.ua]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[194.69.104.22]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-07-06 13:01:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-07-06 11:01:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How do you get this error? Can you provide more details? (try to add "#define CBC 1" in the beginning of some "main.cpp" or compile-time define)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>2155</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1467802870.108644962310791015625;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"latobcode";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4698</wp:comment_id>
			<wp:comment_author><![CDATA[Parco]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[mateo8888@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://--</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[95.18.173.53]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-01 12:00:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-01 10:00:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you so much!!!! Your work is fabulous!!! This example was very important for me .]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1511381147.976293087005615234375;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"latobcode";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1509530428.6115620136260986328125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4945</wp:comment_id>
			<wp:comment_author><![CDATA[latobcode]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[contact@jamming.com.ua]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[85.253.101.207]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-11-22 22:08:21]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-11-22 20:08:21]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My pleasure!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>4698</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1511381301.203979969024658203125;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"latobcode";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Configuring a user for restored/imported database in MS SQL Server</title>
		<link>http://code.jamming.com.ua/configuring-a-user-for-restoredimported-database-in-ms-sql-server/</link>
		<pubDate>Thu, 26 Mar 2015 12:09:30 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1190</guid>
		<description></description>
		<content:encoded><![CDATA[When you import or restore a database from bak file, you can have same problems as I had. Problems with user access and restoration of login schemes.

First of all, make sure SQL server is in Mixed Authentication mode (right click on SQL server connection and Security tab). Then create a new Login in top Security object, and memorize username and password for your connection string.

Then you can add a User in appropriate Security object of your database, also setting a Login to one you created just before. Now it's valid!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1190</wp:post_id>
		<wp:post_date><![CDATA[2015-03-26 14:09:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-26 12:09:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[configuring-a-user-for-restoredimported-database-in-ms-sql-server]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="login"><![CDATA[login]]></category>
		<category domain="post_tag" nicename="management-studio"><![CDATA[management studio]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="post_tag" nicename="sql-server"><![CDATA[sql server]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[windows]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tips and tricks to improve performance of your ACM solution</title>
		<link>http://code.jamming.com.ua/tips-and-tricks-to-improve-performance-of-your-acm-solution/</link>
		<pubDate>Wed, 29 Jul 2015 10:21:32 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1210</guid>
		<description></description>
		<content:encoded><![CDATA[Here I gathered system-programming tricks that can improve performance of your solution in C++ dramatically!
<ul>
	<li>Use <em>scanf/printf</em> functions for standard IO instead of <em>cin/cout</em></li>
	<li><em>Memory-align</em> buffers and structures to WORD size of your architecture (4 bytes for 32-bit and 8 bytes for 64-bit)</li>
	<li>Use arrays instead of linked lists (to use memory block caching)</li>
	<li>Avoid "<em>if</em>" stamements in loops</li>
	<li>If-clause should contain code, which is more likely to execute (<em>if</em>-condition == true)</li>
	<li>Use <em>inlining</em> for short functions</li>
	<li>Use objects allocated on stack but not on heap (local objects for functions instead of allocated with <em>malloc/new</em>)</li>
	<li>Use <em>pre-calculated hardcoded data</em> (e.g. you can store first N prime numbers or first N Fibonacci numbers in order not to calculate them every time you need one)</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1210</wp:post_id>
		<wp:post_date><![CDATA[2015-07-29 12:21:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-29 10:21:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tips-and-tricks-to-improve-performance-of-your-acm-solution]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acm"><![CDATA[acm]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="contest"><![CDATA[contest]]></category>
		<category domain="post_tag" nicename="hack"><![CDATA[hack]]></category>
		<category domain="post_tag" nicename="problem"><![CDATA[problem]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="solution"><![CDATA[solution]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to download huge folder from Dropbox</title>
		<link>http://code.jamming.com.ua/how-to-download-folder-from-dropbox/</link>
		<pubDate>Wed, 14 Oct 2015 13:53:49 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1227</guid>
		<description></description>
		<content:encoded><![CDATA[If you face a problem to download folder from Dropbox which contains tons of files, no known browser extension can help you. Dropbox moves each file download to it's separate page and you can't do it directly.

When I faced this problem I knew I would need to create my own solution and quick googling just confirmed that.

I opened javascript console and extracted all links from the folder. Then I replaced "dl=0" to "dl=1" to get actual download link.
<pre><code class="language-javascript">var links = document.querySelectorAll("div.filename a")
var processed = Array.prototype.map.call(links, 
  function(link) { 
    return link["href"].replace("dl=0", "dl=1"); 
})
console.log(processed.join("\n"))</code></pre>
After I copied those to file <em>links_to_download</em>. If your <em>processed</em> array is too big, you can print it to console by chunks, using <em><code class="language-">slice(start, end)</code></em> method from Javascript. Now the problem is to download them.

I came up with <em>wget</em> for such problem. Linux and OS X users should have wget available (OS X users can install it via e.g. homebrew). Windows users have to download it separately, install and add to the <em>PATH</em> environmental variable. Additionaly I used <em>--trust-server-names</em> and <em>--content-disposition</em> parameters to save real filenames instead of dropbox hashed url. Then I faced a problem that it fails to download a file on first request and request timeout is quite big so I've set it to 5 seconds. Now it makes several timed-out requests, but they quickly resolve to the successful one.
<pre><code class="language-">wget --content-disposition --trust-server-names 
  --timeout=5 -i links_to_download</code></pre>
Also in order to download via https in Windows you probably will need to use "<em>--no-check-certificate</em>".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1227</wp:post_id>
		<wp:post_date><![CDATA[2015-10-14 15:53:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-14 13:53:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-download-folder-from-dropbox]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="download"><![CDATA[download]]></category>
		<category domain="post_tag" nicename="dropbox"><![CDATA[dropbox]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="parse"><![CDATA[parse]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="wget"><![CDATA[wget]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to keyword and upload photos/illustrations to microstocks</title>
		<link>http://code.jamming.com.ua/how-to-keyword-and-upload-photosillustrations-to-microstocks/</link>
		<pubDate>Wed, 18 Nov 2015 12:20:07 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1243</guid>
		<description></description>
		<content:encoded><![CDATA[If you're a photographer new to <a href="https://en.wikipedia.org/wiki/Microstock_photography" target="_blank">microstock photography</a>, I highly reccomend you to embark this wonderful way of passive earning using your artworks. But I will suppose that you know what is this about and how basically use it. I would even suppose you've passed an exam on some stock agency and uploaded your first artworks. But did you know there're plenty of stocks? And did you know it's better to work with all major players of this industry? Shutterstock, iStock, Fotolia, Depositphotos to name just a few. And there is a lot more.

Keywording and uploading your photos to stocks can be fairly considered as the most boring part of this business. It's quite a long way to upload your files to 10 different websites, keyword them and submit. For such a purpose I'm working on a keywording and uploading tool, called <a href="http://ribtoks.github.io/xpiks/" target="_blank">Xpiks</a>. It's main objective is to help you to dramatically reduce time you spend on keywording and uploading and enable you to upload to more stocks simultaneously. For that reason I added features like parallel editing of several files, keywords suggestion, spell checking, automatic FTP uploading, stock requirements checking and others.

You can <a href="http://ribtoks.github.io/xpiks/screenshots/" target="_blank">see screenshots</a> or read more on <a href="http://ribtoks.github.io/xpiks/blog/2015/how-to-use-xpiks-part-1" target="_blank">how to use it</a> on the official website.

This program is open source and free and available through all major platforms: OS X, Windows and Linux. There's <a href="http://ribtoks.github.io/xpiks/support/" target="_blank">a support section</a> and you're welcome <a href="http://ribtoks.github.io/xpiks/blog/2015/how-to-report-an-error" target="_blank">to file your bug</a> or post a question there.

Don't waste more time than needed, <a href="http://ribtoks.github.io/xpiks/downloads/" target="_blank">download Xpiks</a> and enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1243</wp:post_id>
		<wp:post_date><![CDATA[2015-11-18 14:20:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-18 12:20:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-keyword-and-upload-photosillustrations-to-microstocks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="mac"><![CDATA[mac]]></category>
		<category domain="post_tag" nicename="microstock"><![CDATA[microstock]]></category>
		<category domain="post_tag" nicename="os-x"><![CDATA[os x]]></category>
		<category domain="post_tag" nicename="photography"><![CDATA[photography]]></category>
		<category domain="post_tag" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[windows]]></category>
		<category domain="post_tag" nicename="xpiks"><![CDATA[xpiks]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Handling drag&#039;n&#039;drop of files in Qt under OS X</title>
		<link>http://code.jamming.com.ua/handling-dragndrop-of-files-in-qt-under-os-x/</link>
		<pubDate>Wed, 25 Nov 2015 16:00:02 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1248</guid>
		<description></description>
		<content:encoded><![CDATA[If you ever tried to handle drag'n'drop files in your Qt application, you would usually come up with the code like the following.
First of all you will need a Drop Area somewhere in your application, which will handle drops
<pre><code class="language-javascript">DropArea {
  anchors.fill: parent
  onDropped: {
    if (drop.hasUrls) {
      var filesCount = yourCppModel.dropFiles(drop.urls)
      console.log(filesCount + ' files added via drag&amp;drop')
    }
 }
}</code></pre>
Where <em>yourCppModel</em> is a model exposed to Qml in main.cpp or wherever like this:
<pre><code class="language-clike">QQmlContext *rootContext = engine.rootContext();
rootContext-&gt;setContextProperty("yourCppModel", &amp;myCppModel);
</code></pre>
and <code class="language-clike">int dropFiles(const QList&lt;QUrl&gt; &amp;urls)</code> is just an ordinary method exposed to QML via <em><code>Q_INVOKABLE</code></em> attribute.

You will sure notice everything works fine unless you're working under OS X. In OS X instead of QUrls to local files you will get something like this: <em><code> file:///.file/id=6571367.2773272/</code></em>. There's a bug in Qt for that and it even looks closed, but it still doesn't work for me that's why I've implemented my own helper using mixing of Objective-C and Qt-C++ code.

<!--more-->

I've added a <code>osxnshelper.h</code> and <code>osxnshelper.mm</code> source file with helper method to my project:
<pre><code class="language-clike">#include &lt;Foundation/Foundation.h&gt;
#include &lt;QUrl&gt;

QUrl fromNSUrl(const QUrl &amp;url) {
    NSURL *nsUrl = url.toNSURL();
    NSString *path = nsUrl.path;

    QString qtString = QString::fromNSString(path);
    return QUrl::fromLocalFile(qtString);
}
</code></pre>
and added it into the .pro file with conditional define:
<pre><code class="language-clike">macx {
OBJECTIVE_SOURCES += \
    osxnsurlhelper.mm

LIBS += -framework Foundation
HEADERS += osxnsurlhelper.h
}
</code></pre>
Now I'm able to use this helper in my actual <code>dropFiles()</code> method:
<pre><code class="language-clike">int MySuperCppModel::dropFiles(const QList&lt;QString&gt; &amp;urls)
{
    QList&lt;QString&gt; localUrls;

#ifdef Q_OS_MAC
    foreach (const QUrl &amp;url, urls) {
        QUrl localUrl = fromNSUrl(url);
        localUrls.append(localUrl);
    }
#else
    localUrls = urls;
#endif
    // ......
}
</code></pre>
That's it. Now it works perfectly.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1248</wp:post_id>
		<wp:post_date><![CDATA[2015-11-25 18:00:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-25 16:00:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[handling-dragndrop-of-files-in-qt-under-os-x]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="drag"><![CDATA[drag]]></category>
		<category domain="post_tag" nicename="drop"><![CDATA[drop]]></category>
		<category domain="post_tag" nicename="mac"><![CDATA[mac]]></category>
		<category domain="post_tag" nicename="model"><![CDATA[model]]></category>
		<category domain="post_tag" nicename="os-x"><![CDATA[os x]]></category>
		<category domain="post_tag" nicename="qml"><![CDATA[qml]]></category>
		<category domain="post_tag" nicename="qt"><![CDATA[qt]]></category>
		<category domain="category" nicename="qt"><![CDATA[Qt]]></category>
		<category domain="post_tag" nicename="url"><![CDATA[url]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Implementing autocomplete for English in C++</title>
		<link>http://code.jamming.com.ua/implementing-autocomplete-for-english-in-c/</link>
		<pubDate>Sun, 27 Mar 2016 20:07:35 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1301</guid>
		<description></description>
		<content:encoded><![CDATA[When it comes to implementing autocompletion in C++ in some type of input field, the question is which algorithm to choose and where to get the source for completion. In this post I'll try to answer both questions.

As for the algorithm, SO gives us hints about tries, segment trees and others. You can find <a href="http://dhruvbird.blogspot.com.ee/2010/09/very-fast-approach-to-search.html" target="_blank">good article</a> about them. Author has implemented some of them in a repository called FACE (fastest auto-complete in the east). You can easily find it <a href="https://github.com/duckduckgo/cpp-libface" target="_blank">on GitHub</a>. This solution is used for the autocompletion in search engine Duck-Duck-Go which should tell you how good it is. Unfortunately their solution requires dependencies on <code>libuv</code> and joyent <code>http-parser</code>, which is not good in case you need just to integrate autocompletion functionality into your C++ application, but not build auto-complete server and send queries to it. Another drawback - <code>libuv</code> and <code>cpp-libface</code> itself fails to compile in Windows which is bad in case you're building cross-platform solution.

You can find out how to built FACE into your cross-platform C++ application below.

<!--more-->

Here comes my fork: <a href="https://github.com/Ribtoks/cpp-libface" target="_blank">library version of cpp-libface</a>. I've removed dependencies on <code>libuv</code> and <code>http-parser</code>. For Windows, one would need also <code>mman</code> - memory-mapped files IO. The only such thing I was able to find was <code>mman-win32</code> - cygwin port of mman from *nix'es. After puking thousands of warning, VS compiler did it's job and in real life <code>mman-win32</code> worked so it's ready at least for testing. I've created two Makefiles: for Windows and OS X/Linux. After building you will get library FACE (<code>libface.lib</code> or <code>libface.a</code>) and PoC executable for testing of auto-completion through the command line.

As for the interface of libface, I have left only two methods:
<pre><code class="language-clike">public:
    bool import(const char *ac_file);
    vp_t prompt(std::string prefix, uint_t n = 16);
</code></pre>
one of which allows you to import a file and another - generate completion suggestions.

But it's only half of the story. Also you need source for completion. Library FACE is able to digest TSV files (Tab-Separated Values) where first column is frequency of phrase/word and second column - phrase/word itself. After searching through the internet for some time I've found <a href="https://github.com/mozilla-b2g/gaia/tree/master/apps/keyboard/js/imes/latin/dictionaries" target="_blank">frequency tables for different languages</a> for Android. There are in the XML with simple structure and simple Ruby script written in 5 minutes transformed them into TSV:
<pre><code class="language-ruby">
require 'nokogiri'
doc = File.open(ARGV.first) { |f| Nokogiri::XML(f) }

result_filename = ARGV.first.sub(/[.]xml$/, '.tsv')
tsv_file = File.open(result_filename, 'w')

doc.xpath('//w').each do |node|
  frequency = node['f'];
  word = node.content

  tsv_file.puts("#{frequency}\t#{word}")
end

tsv_file.close

puts "Done"</code></pre>
Now everything is ready and you can easily integrate library FACE into your C++ solution and fed it with tsv dicts.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1301</wp:post_id>
		<wp:post_date><![CDATA[2016-03-27 22:07:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-27 20:07:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[implementing-autocomplete-for-english-in-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="autocomplete"><![CDATA[autocomplete]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="cross-platform"><![CDATA[cross-platform]]></category>
		<category domain="post_tag" nicename="interface"><![CDATA[interface]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="makefile"><![CDATA[makefile]]></category>
		<category domain="post_tag" nicename="os-x"><![CDATA[os x]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<category domain="post_tag" nicename="tsv"><![CDATA[tsv]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[windows]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[implementing-autocomplete-for-english]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Classic Producer-Consumer in Qt/C++</title>
		<link>http://code.jamming.com.ua/classic-producer-consumer-in-qtc/</link>
		<pubDate>Mon, 28 Mar 2016 13:44:38 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1310</guid>
		<description></description>
		<content:encoded><![CDATA[Producer-Consumer is a classic pattern of interaction between two or more threads which share common tasks queue and workers who process that queue. When I came to similar task first I googled for standard approaches in Qt to solve this problem, but they were based on signals/slots plus synchronization primitives while I wanted simple and clear solution. Of course, in the end I've invented my own wheel and I invite you to take a look at it.

For the synchronization in Producer-Consumer it's useful to use Mutex and some kind of WaitingEvent for synchronous waiting until mutex is acquired. In Qt you have QMutex and QWaitCondition which are all that we need.

Let's suppose we have following data structures:
<pre><code class="language-clike">        QWaitCondition m_WaitAnyItem;
        QMutex m_QueueMutex;
        QVector&lt;T*&gt; m_Queue;</code></pre>
where T is type of messages we're producing/consuming. So we have queue of elements being processed, mutex to secure access to the queue and wait condition to wait if the queue is empty.

For Producer-Consumer usually we need methods <code>produce()</code> and <code>consume()</code>. Let's see how we can implement them.

<!--more-->

For consuming we will run a loop where we would check if queue has any item available and if yes - we will process it. Also NULL item will stop processing.
<pre><code class="language-clike">        // consuming is an infinite loop
         void consume() {
            for (;;) {
                m_QueueMutex.lock();

                while (m_Queue.isEmpty()) {
                    m_WaitAnyItem.wait(&amp;m_QueueMutex);
                }

                T *item = m_Queue.first();
                m_Queue.removeFirst();

                m_QueueMutex.unlock();

                if (item == NULL) { break; }
                
                processOneItem(item);
            }
        }</code></pre>
If queue is not empty then first item is extracted and processed using <code>processOneItem()</code> method. If queue is empty then we're waiting for any item to be added to the queue using <code>WaitCondition</code>. Waiting itself is put into the while loop because of "spurious wakeups". It's the situation when kernel object responsible for wait condition was signaled after timeout (quite big one) in order not to block calling thread forever.

To add an item for processing, we call <code>produce()</code> method:
<pre><code class="language-clike">        // producer is another thread
        void produce(T *item) {
            m_QueueMutex.lock();
            {
                bool wasEmpty = m_Queue.isEmpty();
                m_Queue.append(item);

                if (wasEmpty) {
                    m_WaitAnyItem.wakeOne();
                }
            }
            m_QueueMutex.unlock();
        }
</code></pre>
This method acquires the mutex, adds an element into the queue and signals a WaitCondition if the queue was empty before.

To get actually working example one can add more logic like cancelling processing from the outside, notification about emptiness of the queue and some memory management for items of type <code>T*</code>.

You can check out full example of Producer-Consumer implementation, used in <a href="https://github.com/Ribtoks/xpiks/blob/master/src/xpiks-qt/Common/itemprocessingworker.h" target="_blank">Xpiks at GitHub</a>. Feel free to ask any questions in case something is not clear.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1310</wp:post_id>
		<wp:post_date><![CDATA[2016-03-28 15:44:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-03-28 13:44:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[classic-producer-consumer-in-qtc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="consumer"><![CDATA[consumer]]></category>
		<category domain="post_tag" nicename="cross-platform"><![CDATA[cross-platform]]></category>
		<category domain="post_tag" nicename="multithreading"><![CDATA[multithreading]]></category>
		<category domain="post_tag" nicename="pattern"><![CDATA[pattern]]></category>
		<category domain="post_tag" nicename="producer"><![CDATA[producer]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="qt"><![CDATA[qt]]></category>
		<category domain="category" nicename="qt"><![CDATA[Qt]]></category>
		<category domain="post_tag" nicename="spurious-wakeup"><![CDATA[spurious wakeup]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Implementing spellchecking in desktop application in C++</title>
		<link>http://code.jamming.com.ua/implementing-spellchecking-in-desktop-application-in-c/</link>
		<pubDate>Sun, 05 Jun 2016 10:24:38 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1324</guid>
		<description></description>
		<content:encoded><![CDATA[When user is supposed to enter significant amount of text in your application, it's better to help him/her to control it with checking spelling. Basically, to check spelling you need a dictionary with words and algorithm to order these words. Also it might be useful to provide user with possible corrections for any spelling error. Here where <a href="https://hunspell.github.io/">Hunspell</a> comes handy. It's an open source library built on top of MySpell library and used in a significant number of projects varying from open source projects like Firefox to proprietary like OS X. It contains bindings to a number of platforms (.NET, Ruby etc.) and should be fairly easy to integrate to your project. In this post I'll discuss how to integrate it to C++/Qt project.

<!--more-->

First of all, you should download Hunspell source code and try to build it for your platform. You can take a look at README for the instructions. Once you're done, it's time to link just built library with your project. Also you should add Hunspell include files to your include path in order to use the API.

After you're done, let's include C++ Hunspell API to your header and add following variable to your class
<pre><code class="language-clike">Hunspell *m_Hunspell;</code></pre>
Constructor of Hunspell class takes paths to DIC and AFF files (wordlist and affix files). If you're building cross-platform solution, it will be useful to know, that to handle utf-8 paths in Windows, you need to prefix paths to DIC and AFF files with "\\?\". Loading code in my Qt project looks like this:
<pre><code class="language-clike">#ifdef Q_OS_WIN
// specific Hunspell handling of UTF-8 encoded pathes
affPath = "\\\\?\\" + QDir::toNativeSeparators(affPath);
dicPath = "\\\\?\\" + QDir::toNativeSeparators(dicPath);
#endif

try {
    m_Hunspell = new Hunspell(affPath.toUtf8().constData(),
                              dicPath.toUtf8().constData());
    LOG_DEBUG &lt;&lt; "Hunspell with AFF" &lt;&lt; affPath &lt;&lt; "and DIC" &lt;&lt; dicPath; 
    m_Encoding = QString::fromLatin1(m_Hunspell-&gt;get_dic_encoding());
    m_Codec = QTextCodec::codecForName(m_Encoding.toLatin1().constData());
}
catch(...) {
    LOG_DEBUG &lt;&lt; "Error in Hunspell with AFF" &lt;&lt; affPath &lt;&lt; "and DIC" &lt;&lt; dicPath;
    m_Hunspell = NULL;
}</code></pre>
In this code except of instantiating Hunspell class we also get right Codec to query the dictionary. Now you can use API's of <code class="language-clike">Hunspell</code> class to access spellchecking API. To get real AFF and DIC files, you can check out a number of open source projects which use spellchecking and hunspell - e.g. OpenOffice.

The most common operation is, of course, to check if particular word is spelled OK or not:
<pre><code class="language-clike">bool isSpellingCorrect(const QString &amp;word) const {
    bool isOk = false;
    try {
        isOk = m_Hunspell-&gt;spell(m_Codec-&gt;fromUnicode(word).constData()) != 0;
    }
    catch (...) {
        isOk = false;
    }
    return isOk;
}
</code></pre>
This demonstrates also usage of <code class="language-clike">Codec</code> retrieved before.

Besides of checking spelling, it's useful to provide user with corrections for the particular word. <code class="language-clike">Hunspell</code> class has API for this and it can be used like this:
<pre><code class="language-clike">QStringList suggestCorrections(const QString &amp;word) {
    QStringList suggestions;
    char **suggestWordList = NULL;

    try {
        // Encode from Unicode to the encoding used by current dictionary
        int count = m_Hunspell-&gt;suggest(&amp;suggestWordList, m_Codec-&gt;fromUnicode(word).constData());
        QString lowerWord = word.toLower();

        for (int i = 0; i &lt; count; ++i) { 
            QString suggestion = m_Codec-&gt;toUnicode(suggestWordList[i]);
            suggestions &lt;&lt; suggestion;
            free(suggestWordList[i]);
        }
    }
    catch (...) {
        LOG_WARNING &lt;&lt; "Error for keyword:" &lt;&lt; word;
    }

    return suggestions;
}</code></pre>
This code demonstrates usage of <code class="language-clike">suggest()</code> API of Hunspell object. Also useful tip would be to check case of the suggestion, since Hunspell can correct you word like "europe" with "Europe" and stuff like that.

If you're going to check spelling on the fly it might be a good idea to combine this approach with <a href="http://code.jamming.com.ua/classic-producer-consumer-in-qtc/">producer-consumer implemented in Qt</a>. So your app's UI will be responsive while background worker will serve spelling requests.

That's all folks.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1324</wp:post_id>
		<wp:post_date><![CDATA[2016-06-05 12:24:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-06-05 10:24:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[implementing-spellchecking-in-desktop-application-in-c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="checking"><![CDATA[checking]]></category>
		<category domain="post_tag" nicename="consumer"><![CDATA[consumer]]></category>
		<category domain="post_tag" nicename="error"><![CDATA[error]]></category>
		<category domain="post_tag" nicename="hunspell"><![CDATA[hunspell]]></category>
		<category domain="post_tag" nicename="myspell"><![CDATA[myspell]]></category>
		<category domain="post_tag" nicename="producer"><![CDATA[producer]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="qt"><![CDATA[qt]]></category>
		<category domain="category" nicename="qt"><![CDATA[Qt]]></category>
		<category domain="post_tag" nicename="spelling"><![CDATA[spelling]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Resources to learn and understand parallel programming. The hard way</title>
		<link>http://code.jamming.com.ua/resources-to-learn-and-understand-parallel-programming-the-hard-way/</link>
		<pubDate>Mon, 29 Aug 2016 10:28:38 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1343</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>There's no way other than the hard way. (c)</blockquote>
Parallel programming is considered as not easy or even advanced topic by many programmers. It's the starting point for even more advanced stuff like distributed computations, reliability, CAP theorem, consensus problems and much more. Besides, deep understanding of how CPU and operating system works can help you to write less buggy software and parallel programming can help you with that too.

In this post I will focus on books describing parallel programming using 1 computer and 1 CPU using classical approaches. Neither they contain SSE instructions guides nor you will find matterials on CUDA or OpenCL. Similary you will find no resourced about Hadoop and/or MapReduce technologies and nothing about technologies supporting parallel programming out of the box like Go or Erlang.

So I will go now through all the resources which I find more or less useful. I'm not going to stick to any technology in general - the point is to understand the topic from different perspectives. The materials I'm refering to in general should not be considered as entry-level -  they require fair amount of knowledge, but nevertheless, list goes sorted starting from "easier" things.

<!--more-->
<ul>
 	<li><strong>Robert Krten -<em> "Getting Started with QNX Neutrino 2"</em></strong>. Several first chapters are especially good at explaining how do mutexes and semaphores work. Other chapters of the book are in-depth details of how the real-time operating system works and for those who are interested this can be valuable too - to understand how the processes and threads relate to each other and how they are scheduled and managed by the OS.</li>
 	<li><span class="fontstyle0"><strong>Allen B. Downey - <em>"The little book of semaphores"</em></strong>. This book is an invaluable list of classical synchronization problems </span> with their solutions on python-like pseudocode. All solutions are based on semaphores as a basic synchronization primitive. The book explains how to solve trivial problems like rendezvous or barrier and what caveats you can expect there and later going on to some really advanced problems like Santa-Claus problem or search-insert-delete problem.</li>
 	<li><strong>Jeffrey Richter - <em>"CLR via C# 4.5"</em></strong>. This book from .NET world contains valuable chapters about Threading and synchronization. It helps to understand differences in volatility in C++ and C#, memory fences, context switching in Windows and everything related. Aforementioned chapters help to see wider picture than just from the low-level side.</li>
 	<li><strong>Paul McKenney - "<em>Is Parallel Programming hard, and, if so, what can you do about it?</em>"</strong>. A true gem from the Linux kernel developers. This book will reveal to you low-level synchronization problems and their solutions as well as high-level design of data structures used in Linux kernel. The book can be considered as Advanced and requires fair amount of time to understand some topics. After reading this book you will know what RCU is and why it is so important as well as design of several reliable almost lock-free data structures and algorithms.</li>
 	<li><strong>Sergey Babkin - <em>"The practice of parallel programming"</em>.</strong> By far the most advanced material I've read on the topic, this book focuses on practical applications of all theory for major platforms (*nix, Windows). Author dives into how to tackle problems such as implementing missing synchronization primitives, implementing message queues, multithreaded program exit, multiplexing of socket IO and others. All topics contain working pieces of "production-ready" code in C++.</li>
</ul>
Personally I find books like "Parallel programming in C++/C#/Python" not quite useful since they are more skill-based and 95% can be found in the official documentation by people knowing what they are looking for.

If you know any other interesing and valuable books on the topic, you're more than welcome to post them in the comments.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1343</wp:post_id>
		<wp:post_date><![CDATA[2016-08-29 12:28:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-08-29 10:28:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[resources-to-learn-and-understand-parallel-programming-the-hard-way]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net"><![CDATA[.net]]></category>
		<category domain="post_tag" nicename="book"><![CDATA[book]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="clr"><![CDATA[clr]]></category>
		<category domain="post_tag" nicename="mutex"><![CDATA[mutex]]></category>
		<category domain="post_tag" nicename="parallel"><![CDATA[parallel]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="programming-2"><![CDATA[programming]]></category>
		<category domain="post_tag" nicename="qnx"><![CDATA[qnx]]></category>
		<category domain="post_tag" nicename="recommendation"><![CDATA[recommendation]]></category>
		<category domain="post_tag" nicename="richter"><![CDATA[richter]]></category>
		<category domain="post_tag" nicename="semaphore"><![CDATA[semaphore]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Replacing QNetworkAccessManager for the great good</title>
		<link>http://code.jamming.com.ua/replacing-qnetworkaccessmanager-for-the-great-good/</link>
		<pubDate>Fri, 23 Sep 2016 08:49:55 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1352</guid>
		<description></description>
		<content:encoded><![CDATA[Everybody using Qt for networking for small tasks will sometimes face oddities of <code class="language-clike">QNetworkAccessManager</code>. This class aims to be useful and convenient while having few quite sensible drawbacks. First one of couse is inability to use it in blocking way. What you should do instead is to create instance of <code class="language-clike">QEventLoop</code> and connect it's <code class="language-clike">quit()</code> signal with network manager.
<pre><code class="language-clike">QNetworkAccessManager networkManager;</code><code class="language-clike">
QEventLoop loop;</code><code class="language-clike">
QNetworkReply *netReply = networkManager.get(resource);
connect(netReply, SIGNAL(finished()), &amp;loop, SLOT(quit()));
loop.exec();    
</code></pre>
This is overkill and overengineering of course. This inconveniency strikes also when you try to use it from background thread for downloading something - <code class="language-clike">QNetworkAccessManager</code> needs an event loop and it will launch one more thread - it's own to do all the operations required.

Also it has a lot of data, methods and abilities not needed for "everyday simple network operations" like querying some API or downloading files. I don't know anybody who wasn't looking for a substitude for it at least once. But fortunately the solution exists.

<!--more-->

So what I came up with was <a href="https://curl.haxx.se/libcurl/">libcurl library</a>. F*cking stable over decades, simple and with backwards-compatible API (sign of good design) it is the library of choise of thousands of desktop, mobile or server-side solutions. This library has bindings to all possible languages and technologies one can imagine so you don't need to look further.

To add it to the project, you need to download source code, build it and add it as linkage dependency to your own Qt project:
<pre><code class="language-clike">INCLUDEPATH = "/path/to/libcurl/source/code"
LIBS += -lcurl
</code></pre>
Curl library has <a href="https://curl.haxx.se/libcurl/c/example.html">tons of examples</a> available to a fellow programmer and it won't take much time to copy-and-paste solutions to almost any problem you may encounter. Using libcurl will allow you to choose if you want to create a blocking calls or to do everything in thread controlled by you. You can read more on that by wonderful <a href="https://mayaposch.wordpress.com/2011/11/01/how-to-really-truly-use-qthreads-the-full-explanation/">topic by Maya Posch</a>.

You can find working examples of replacement for <code class="language-clike">QNetworkAccessManager</code> for API calls named <code class="language-clike">SimpleCurlRequest</code> <a href="https://github.com/Ribtoks/xpiks/blob/master/src/xpiks-qt/Conectivity/simplecurlrequest.cpp">at GitHub as part of Xpiks project</a> and <a href="https://github.com/Ribtoks/xpiks/blob/master/src/xpiks-qt/Helpers/remoteconfig.cpp">it's usage</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1352</wp:post_id>
		<wp:post_date><![CDATA[2016-09-23 10:49:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-23 08:49:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[replacing-qnetworkaccessmanager-for-the-great-good]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="alternative"><![CDATA[alternative]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="curl"><![CDATA[curl]]></category>
		<category domain="post_tag" nicename="libcurl"><![CDATA[libcurl]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="qnetworkaccessmanager"><![CDATA[qnetworkaccessmanager]]></category>
		<category domain="category" nicename="qt"><![CDATA[Qt]]></category>
		<category domain="post_tag" nicename="replacement"><![CDATA[replacement]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to pass Amazon SDE interview</title>
		<link>http://code.jamming.com.ua/how-to-pass-amazon-sde-interview/</link>
		<pubDate>Sat, 24 Dec 2016 17:45:06 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1365</guid>
		<description></description>
		<content:encoded><![CDATA[Amazon is considered to be one for the most wanted employers among software engineers who don't work for any of the tech giants. Standing in one line with Google, Microsoft, Facebook and maybe some smaller like Twitter, Uber, Dropbox etc., it has unstoppable flow of CV's from people passionate of working on big scale.

But is it really that cool, demanding and, in the end, rewarding? A lot of people <a href="https://sites.google.com/site/thefaceofamazon/">would disagree</a> with that, others will be neutral and there will be only few of those who will agree. For example, typical everyday job of server-side SDE II responsible for customer experience with purchasing goods can only consist of sending/receiving requests to/from internal web-services, validating input data, fixing small bugs and that's all. Oh no, there's one more thing - on-call rotations. So one week every few months (that depends on a team, but just to give you an idea) that employee despite of his "interesting and challenging" duties will be responsible for fixing bugs on production asap which literally means ASAP - during the weekend, in the evening, in the night - doesn't matter.

That is why Amazon looks for people who won't whine about such lifestyle. Amazon has a dozen of so-called "principles" (read "search criteria for new employees") where some are contradictory to the others. Like they need employees who have a "bias for action" but are "insisting on highest standards" or who are "frugal" but "think big" and stuff like that. Interviewers will ask you about how do you match with these principles and <em>what they're really interested in is if you had experience working overtime, on the weekends, under pressure, overnight</em> - in order to deliver results in short terms and fix bugs. They clearly tell you about it - if you're weak in programming or algorithms - it does not matter if on the other hand you're used to working overtime just to deliver results.

So how to pass Amazon interview? They will ask you about your experience and definitely will ask you to give them example where you had tight deadlines and half-finished task. They want to hear how did you work overnights and did not complain for that. If they will - you've passed even if your solution for their O(N^2) dynamic programming puzzle is NP-complete.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1365</wp:post_id>
		<wp:post_date><![CDATA[2016-12-24 19:45:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-12-24 17:45:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-to-pass-amazon-sde-interview]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="amazon"><![CDATA[amazon]]></category>
		<category domain="post_tag" nicename="deadline"><![CDATA[deadline]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="engineer"><![CDATA[engineer]]></category>
		<category domain="post_tag" nicename="experience"><![CDATA[experience]]></category>
		<category domain="post_tag" nicename="howto"><![CDATA[howto]]></category>
		<category domain="post_tag" nicename="interview"><![CDATA[interview]]></category>
		<category domain="post_tag" nicename="on-call"><![CDATA[on-call]]></category>
		<category domain="post_tag" nicename="overnight"><![CDATA[overnight]]></category>
		<category domain="post_tag" nicename="overtime"><![CDATA[overtime]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="rotation"><![CDATA[rotation]]></category>
		<category domain="post_tag" nicename="software"><![CDATA[software]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Unicode support for avformat_open_input in Windows</title>
		<link>http://code.jamming.com.ua/unicode-support-for-avformat_open_input-in-windows/</link>
		<pubDate>Fri, 31 Mar 2017 11:59:09 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1379</guid>
		<description></description>
		<content:encoded><![CDATA[For those of us ever writing cross-platform application there has always been enough quires and quests to accomplish. Typical one is to correctly handle multibyte/unicode filepaths in Windows. And though they are handled pretty good in Qt, when you write your own library you have to do it yourself.

Another level of quests is using third-party libraries which were not designed for cross-platform usage. For example if you wanted to use ffmpeg / libav libraries in Windows, you have to deal with lack of support of <code>std::wstring</code> parameters in the API. One way to deal with it - arrange a custom IO using <code>AVFormatContext</code> and handle file paths by yourself. I have found a wonderful article and code example of how to do it in the <a href="https://mw.gl/posts/ffmpeg_custom_io/">blog of Marika Wei</a>. Slightly adapted, the solution will handle all Windows paths
<pre><code class="language-clike">
struct {
#ifdef _WIN32
    std::wstring m_FilePath;
#else
    std::string m_FilePath;
#endif
    AVIOContext *m_IOCtx;
    uint8_t *m_Buffer; // internal buffer for ffmpeg
    int m_BufferSize;
    FILE *m_File;
}

#ifdef _WIN32
    m_File = _wfopen(m_FilePath.c_str(), L"rb");
#else
    m_File = fopen(m_FilePath.c_str(), "rb");
#endif

m_IOContext = avio_alloc_context(
    m_Buffer, m_BufferSize, // internal buffer and its size
    0, // write flag (1=true, 0=false)
    (void*)this, // user data, will be passed to our callback functions
    IOReadFunc,
    0, // no writing
    IOSeekFunc
);

</code></pre>
Check out the <a href="https://github.com/Ribtoks/libavthumbnailer/blob/master/src/libavthumbnailer/genericiocontext.cpp">full code at GitHub</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1379</wp:post_id>
		<wp:post_date><![CDATA[2017-03-31 13:59:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-03-31 11:59:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unicode-support-for-avformat_open_input-in-windows]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="ffmpeg"><![CDATA[ffmpeg]]></category>
		<category domain="post_tag" nicename="libav"><![CDATA[libav]]></category>
		<category domain="post_tag" nicename="path"><![CDATA[path]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thumbnail"><![CDATA[thumbnail]]></category>
		<category domain="post_tag" nicename="unicode"><![CDATA[unicode]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[video]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[windows]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BackToWork - smarter Alt+Tab for Windows</title>
		<link>http://code.jamming.com.ua/backtowork-smart-alttab-for-windows/</link>
		<pubDate>Wed, 03 May 2017 15:44:32 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1386</guid>
		<description></description>
		<content:encoded><![CDATA[Frequently there's a need to quickly switch to a specific window or two from a dozen. What I usually do is I hit Alt+Tab and cycle through windows to find the one. Today I decided that it's enough and wrote a simple productivity tool to switch to the needed windows with a hotkey. It reads a config file and gets patterns to find the needed windows and once you hit a hotkey - it brings them to front. It is especially useful when you have those "5 minutes of procrastination" and then you want to switch back to the development routine, but you need to find your IDE among windows you have opened before.

<a href="https://github.com/ribtoks/BackToWork">BackToWork at GitHub</a> - just download the binaries (built for x86), edit config and you're done.

Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1386</wp:post_id>
		<wp:post_date><![CDATA[2017-05-03 17:44:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-05-03 15:44:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[backtowork-smart-alttab-for-windows]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_desired_post_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[__trashed]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dependency-driven development: forced OSS contributions</title>
		<link>http://code.jamming.com.ua/dependency-driven-development-forced-oss-contributions/</link>
		<pubDate>Sun, 04 Jun 2017 11:26:08 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1393</guid>
		<description></description>
		<content:encoded><![CDATA[It is such a relief when you app just works. Moreover, when it is open. My pet project <a href="https://github.com/ribtoks/xpiks">Xpiks</a> is not only an open-source project itself, but it also uses a lot of the other open-source technologies inside. Qt framework, zlib, hunspell - to name just a few. A big deal is to make them work together. A much bigger deal to make them work together across different platforms (Xpiks is announced as cross-platform for Windows, OS X and Linux). The least problems you can expect - is a tricky build process or somebody's typo in the Makefile which breaks the-other-system's build.

More often what you'll encounter - is people building a huge pile of code working <strong>only</strong> for their needs. Only for their server. Only for their version if libcurl. Only for x86 operating system. And then they open-source it to GitHub - much like a cemetery for projects with 1 star and 0 forks, decaying there until forgotten forever.

This is how the initial joy of finding an open-source technology you needed is being replaced by a constant frustration of not just a need to slightly tweak some header file or Makefile, but to go the sources, read them, understand everything inside and fix. This is what I have encountered many times and what I did as well.

<!--more-->

Do you want to have <a href="http://code.jamming.com.ua/implementing-autocomplete-for-english-in-c/">autocompletion for English</a> in your app? Have you heard about libface? <a href="https://github.com/duckduckgo/cpp-libface">face</a> - fastest autocomplete in the east - by duckduckgo. A nice implementation of trie-derived algorithms packed into a monstrous-size solution. A nice tool for autocompletion tightly coupled with <em>libuv</em> and <em>http-parser</em> to be ready to start the server on your hosting. Sounds good? But what if you only needed the autocompletion? Would that be much better to have this functionality in the library and then use in in the webserver? Oh God of course not. What should I do? Fork and remove 70% of the unneeded features, leaving only the core - autocomplete implementation on tries, bundled to an ordinary C++ library. Unfortunately, it works only on Linux because authors used specific memory-mapping functions. Ok, quick search revealed <a href="https://github.com/Ribtoks/mman-win32">mman32</a> library for Windows. Does the latter work out of the box? Surely not. Only not as a shared library. Few more polishing commits and now <a href="https://github.com/Ribtoks/cpp-libface">this</a> started to look more like universal solution.

What if you want to have basic translations functionality? Anything cross-platform? Meet StarDict - a format for pirated Lingvo dictionaries for Linux, though having many legal dictionaries available as well. Do we have the technology? Of course! It depends on glib, it works only with latin paths to the dictionaries and it is written like there were no x86_64 systems. What do I do? Fork, fix all <code lang="c-like">std::string</code> to platform-specific (<code lang="c-like">std::wstring</code> for Windows), fix 64-bit offsets for the format which have not been handled, implement a bundle of glib functions to void the dependency. <a href="https://github.com/ribtoks/ssdll">The result</a> builds and works in Windows, OS X and Linux, but minus 1 week of my life. Could that have been accounted initially? A rhetorical question.

Video thumbnails, anybody? After some googling the only solution that could be used cross-platformly - libav or ffmpeg. It only compiles 20 minutes, there's no way in reading it's source code. Even Makefile is giant. But that cannot stop people who need a solution. These people would certainly read whole <code lang="c-like">./configure</code> code, understand the parameters and cut off audio, filters and what not. Trying to use it in Windows with non-latin paths? Screw you! The result? <a href="https://github.com/Ribtoks/libavthumbnailer">Another fork</a>. It was so easy - just to use platform-specific string type and <a href="http://code.jamming.com.ua/unicode-support-for-avformat_open_input-in-windows/">to use platform-specific <code lang="c-like">open()</code> call for files</a>. No, nobody cares.

Even Linux products for Linux sometimes suck. So you want to distribute your fancy application on Linux, you say. Ok, be ready to create a 100+1 packages for all possible distros! What if we had a technology like .app directories in the OS X where you can just copy the files and run them.. And there's <a href="https://appimage.org">one</a> (or <a href="http://flatpak.org/">two</a>) indeed! There have been many discussions after the AppImage format emerged recently, but the truth is that, being properly used, this can solve packages problems to an extent. Do we have the technology to bundle Qt apps for that? Yes, please meet <a href="https://github.com/probonopd/linuxdeployqt/">linuxdeployqt</a>. A copy-paste from <em>macdeployqt</em> from Qt source code, bringing 20% of unuseful and duplicated code and adding more. But the latter at least works, instead of <a href="https://github.com/probonopd/linuxdeployqt/issues/117">brilliant</a> <a href="https://github.com/probonopd/linuxdeployqt/issues/25">bugs</a> of the Linux clone. A solution? Just contribute, no need for yet another clone. So I started contributing. Translations support - done, blacklist fix - done. And now there're only 99 bugs left. After my frustration exceeded some threshold, I sat and wrote my own <a href="https://github.com/Ribtoks/linuxdeploy">linuxdeploy</a> in Go in 1.5 weeks and "it just works" (for my needs at least). Could that have been done from the beginning by the original authors? Probably. Nobody cares.
<h3>Moral of the story</h3>
<ul>
 	<li>build small units of software that work be it a library or a header file. Divide and conquer you giants!</li>
 	<li>if you say you release cross-platform software do care about testing it on these platforms (especially try the f&amp;cking non-latin paths on Windows for all your <code lang="c-like">open()</code> calls)</li>
 	<li>better don't open-source poorly written software. Do me a favor, keep if private.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1393</wp:post_id>
		<wp:post_date><![CDATA[2017-06-04 13:26:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-06-04 11:26:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dependency-driven-development-forced-oss-contributions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="craftmanship"><![CDATA[craftmanship]]></category>
		<category domain="post_tag" nicename="duckduckgo"><![CDATA[duckduckgo]]></category>
		<category domain="post_tag" nicename="ffmpeg"><![CDATA[ffmpeg]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[github]]></category>
		<category domain="post_tag" nicename="libav"><![CDATA[libav]]></category>
		<category domain="category" nicename="linux-2"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linuxdeploy"><![CDATA[linuxdeploy]]></category>
		<category domain="post_tag" nicename="mman"><![CDATA[mman]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="software"><![CDATA[software]]></category>
		<category domain="post_tag" nicename="stardict"><![CDATA[stardict]]></category>
		<category domain="post_tag" nicename="wstring"><![CDATA[wstring]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3433</wp:comment_id>
			<wp:comment_author><![CDATA[latobcode]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[contact@jamming.com.ua]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[84.159.102.133]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-06-05 10:29:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-06-05 08:29:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, the only thing I blindly copy-pasted from linuxdeployqt was the blacklist of libraries. 
Other things were pure macdeployqt- or windeployqt-derived code.

The answer to your question - No, definitely not the same time. But that would be minus time that I tried using linuxdeployqt itself. So frankly speaking - might be the same overall time in the end. Who knows.

Nice email, btw :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>3430</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1496651345.4951989650726318359375;s:5:"event";s:9:"check-ham";s:4:"user";s:9:"latobcode";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3430</wp:comment_id>
			<wp:comment_author><![CDATA[probonopd]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[no@spam.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[5.146.198.21]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-06-04 21:22:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-06-04 19:22:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Had we kept it closed, would you have been able to rewrite yours in Go in the same time?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1496651263.5500628948211669921875;s:5:"event";s:15:"status-approved";s:4:"user";s:9:"latobcode";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1496604143.089023113250732421875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Key-Value storage for poor</title>
		<link>http://code.jamming.com.ua/key-value-storage-for-poor/</link>
		<pubDate>Fri, 01 Sep 2017 09:30:44 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1440</guid>
		<description></description>
		<content:encoded><![CDATA[Despite the hype about NoSql databases, sometimes it's nice to have an embedded key-value storage available in your app. For example, I'm maintaining a cache of metadata of images in my cross-platform desktop app <a href="https://github.com/ribtoks/xpiks">Xpiks</a> and anyway I have to search by filepath to find the metadata. Besides that I have few more requirements specific to my project:
<ul>
 	<li>the database should be possible to embed directly into your app</li>
 	<li>the license should allow linking with proprietary code (so to be either permissive MIT, BSD-like or LGPL)</li>
 	<li>it should be cross-platform in a sense of Windows, macOS and Linux</li>
 	<li>it should have a history of being used across various projects (sort of to be 5+ years old)</li>
 	<li>it should be affordable to get, since I'm not a big company or any sort of company</li>
</ul>
So when I started looking for this sort of databases, first thing I found was <a href="http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html">Berkeley DB</a>. This is a very well tested, stable key-value storage, used for decades by programmers. It is very well documented with extensive examples and APIs for C, C++ and Java. Also it is a cross-platform solution available for many more platforms than just Windows, macOS and Linux. I even wrote a <a href="https://gist.github.com/Ribtoks/8be6425a7a78b94e03948ea64fd1e171">small wrapper for Qt</a> to use this library. But it appears to use two licenses: AGPL 3.0+ and Commercial license. AGPL is nowhere near being permissive and the commercial license costs literally thousands of dollars so this is not an option for me. Also early versions of Berkeley DB (before it was brought by Oracle) were released under SleepyCat Software License which is a BSD license with a small AGPL-like amendment (about network use and releasing the source code). Overall verdict - unfortunately NO.. (but if the license would allow - better than any other in this post)

There're many nice LSM-like modern key-value databases with permissive licenses on the market which are not cross-platform like <a href="https://github.com/google/leveldb">Google's LevelDB</a> or memory-only databases like <a href="https://symas.com/lightning-memory-mapped-database/">LMDB </a>("memory-only" is speculative, but there were some issues with hard drives and cross-platform use with this DB like missing memory-mapping implementations for Windows).

Next embedded database I looked at was <a href="http://rocksdb.org/">RocksDB</a>. This is a relatively fresh database from Facebook, but very well tested under Facebook's load. It is advertised to be cross-platform (though building it is not very straightforward) and available under Apache License 2.0. Really sounds like what I need. The only thing which looked suspicious was that they are adding same amount of features each release as they are fixing bugs. Of course, I'm not maintaining a stocks exchange market, but I'm striving to create a very stable software and therefore I have to use very stable third-party software too. So overall verdict - almost YES, maybe later.

Of course when it comes to an embedded database with permissive license, you cannot omit SQLite. This is a very old, well-tested project, given to the public domain (in terms of licensing) and used across enormous amount of platforms (most extensively right now in Android) product.  Easy to use, well documented, but with one "minor" problem: it is not a key-value storage. But can we use it as one? Probably. All we need to do is to create a table with 2 columns "key" and "value" and use the former as a PRIMARY KEY. Performance? Yeah it is probably not great with this approach, but for me it is not <em>that</em> critical so I wrote a <a href="https://github.com/Ribtoks/xpiks/blob/master/src/xpiks-qt/Helpers/database.cpp">wrapper</a> around it and it works sufficiently for my project. Overall verdict - YES, for now.

The bottom line is:

So in this pursuit of a key-value storage for my cross-platform desktop app I have found two very good-looking options: RocksDB and SQLite (with modifications). The time will show if it was a wise choice to use SQLite, but I can always switch to the other later. Also if Oracle would have changed BerkeleyDB license, that would definitely be my choice.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1440</wp:post_id>
		<wp:post_date><![CDATA[2017-09-01 11:30:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-09-01 09:30:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[key-value-storage-for-poor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="berkeleydb"><![CDATA[berkeleydb]]></category>
		<category domain="post_tag" nicename="cross-platform"><![CDATA[cross-platform]]></category>
		<category domain="post_tag" nicename="database"><![CDATA[database]]></category>
		<category domain="post_tag" nicename="embedded"><![CDATA[embedded]]></category>
		<category domain="post_tag" nicename="key-value"><![CDATA[key-value]]></category>
		<category domain="post_tag" nicename="nosql"><![CDATA[nosql]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="review"><![CDATA[review]]></category>
		<category domain="post_tag" nicename="rocksdb"><![CDATA[rocksdb]]></category>
		<category domain="post_tag" nicename="sqlite"><![CDATA[sqlite]]></category>
		<category domain="post_tag" nicename="storage"><![CDATA[storage]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ultimate ComboBox in QML</title>
		<link>http://code.jamming.com.ua/ultimate-combobox-in-qml/</link>
		<pubDate>Wed, 22 Nov 2017 21:28:25 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1453</guid>
		<description></description>
		<content:encoded><![CDATA[Everybody who wanted to customize UI of <code>ComboBox</code> in QML knows that it is only possible though crutches and hacks. Usually that's not a problem and people start implementing their own custom ComboBoxes that are docked to somewhere. You can see an example of such implementation below (the code is simplified). These sort of implementations have few big problems which I will cover afterwards.
<pre><code class="language-clike">Item {
    id: comboBox
    property alias model: dropDownItems.model

    signal comboIndexChanged(int index);

    Rectangle {
        id: header
        anchors.fill: parent
        color: "gray"

        Text { text: dropDownItems.currentItem.itemText }

        MouseArea {
            anchors.fill: parent
            onClicked: { comboBox.state = comboBox.state === "down" ? "" : "down" }
        }
    }

    Rectangle {
        id: dropDown
        anchors.left: parent.left
        anchors.right: parent.right
        anchors.top: header.bottom
        visible: false
        height: 0
        onActiveFocusChanged: { if (!activeFocus) { comboBox.state = ""; } }

        ListView {
            id: dropDownItems
            anchors.fill: parent

            delegate: Rectangle {
                property alias itemText: modelData
                height: 20
                width: parent.width

                Text { text: modelData }

                MouseArea {
                    anchors.fill: parent
                    onClicked: {
                        comboBox.state = ""
                        if (index !== comboBox.selectedIndex) {
                            comboBox.selectedIndex = index
                            comboIndexChanged(index)
                        }
                    }
                }
            }
        }
    }

    states: State {
        name: "down";
        PropertyChanges {
            target: dropDown
            height: 20 * dropDownItems.count
            visible: true
        }
    }
}
</code></pre>

This approach has 2 big flaws.

The very first problem with this approach is <code>z-index</code> management. You have to make sure that owner of your custom <code>ComboBox</code> is on top of everything possible so I set <code>z: 100500</code> every time I instantiated my object. But what if you have several instances which can overlap? Correct, you have to assign <code>z-index</code> dynamically every time..

The other problem with this way is the focus management in QML apps which I personally find quite clumsy and raw (but of course it could be just my lack of skill). Simple enough, you want to click outside to close the dropdown and .. usually that's just not possible without hacks. I've done horrible things to workaround this. I used to put huge <code>MouseArea</code> elements everywhere to emit <code>closeComboBoxes()</code> signal when it get's clicked and all the <code>ComboBox</code> in the area were subscribed to that signal.

So is there anything better?

<!--more-->

But finally, I managed to get a satisfying solution. What I did is that I created 2 controls <code>ComboBoxHeader</code> and <code>ComboBoxDropdown</code>. The first one was the control I used to put in the QML here and there where I needed the <ComboBox> functionality. It's code is pretty simple (file <em>ComboBoxHeader.qml</em>):
<pre><code class="language-clike">Item {
    id: comboBox

    property var globalParent
    property var model
    property int selectedIndex

    signal comboItemSelected(int index);

    function openPopup() {
        /*THE MAGIC GOES HERE*/
    }

    Rectangle {
        id: header
        anchors.fill: parent
        color: "gray"

        Text { text: comboBox.model[comboBox.selectedIndex] }

        MouseArea {
            anchors.fill: parent
            onClicked: { openPopup() }
        }
    }
}
</code></pre>

The important part there is <code>property var globalParent</code>. You should set this to some top-most <code>Item</code>-derived component which will serve as the <em>invisible background</em>. The dropdown is instantiated in relative to this root component with the following code:
<pre><code class="language-clike">function openPopup() {
    var marginPoint = comboBox.mapToItem(globalParent, 0, comboBox.height)

    var options = {
        model: comboBox.model,
        selectedIndex: comboBox.selectedIndex,
        leftPadding: marginPoint.x,
        topPadding: marginPoint.y,
    }

     var component = Qt.createComponent("ComboBoxDropdown.qml")
     var instance = component.createObject(globalParent, options)        
     instance.comboItemSelected.connect(comboBox.comboItemSelected)
}
</code></pre>

And the other control (in file <em>ComboBoxDropdown.qml</em>) is a dropdown control with an <code>Item</code> root element (<code>globalParent</code>) filling everything on background. This root element intercepts all the mouse activity outside and correctly closes the popup if clicked.

<pre><code class="language-clike">Item {
    id: dropdownComponent
    anchors.fill: parent

    property alias model: dropDownItems.model
    property alias selectedIndex: dropDownItems.currentIndex

    property double topPadding: 0
    property double leftPadding: 0

    signal comboItemSelected(int index)
    function closePopup() { dropdownComponent.destroy() }

    MouseArea {
        anchors.fill: parent
        onWheel: wheel.accepted = true
        onClicked: {
            mouse.accepted = true
            closePopup()
        }
    }

    Rectangle {
        id: dropDown
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.leftMargin: dropdownComponent.leftPadding
        anchors.topMargin: dropdownComponent.topPadding
        color: "gray"
        visible: false
        width: 200
        height: 0
        state: "down"

        ListView {
            id: dropDownItems
            anchors.fill: parent

            delegate: Rectangle {
                width: parent.width
                height: 20

                Text { text: modelData }

                MouseArea {
                    anchors.fill: parent
                    onClicked: {
                        comboBox.state = ""
                        if (index !== comboBox.selectedIndex) {
                            comboBox.selectedIndex = index
                            comboItemSelected(index)
                        }
                    }
                }
            }
        }

        states: State {
            name: "down";
            PropertyChanges {
                target: dropDown;
                height: 20 * dropDownItems.count
                visible: true
            }
        }
    }
}</code></pre>

Now to use it you just go
<pre><code class="language-clike">ComboBoxHeader {
    globalParent: someTopMostItem
    model: ["Some", "data", "for", "the", "test", "here"]
    height: 20
    width: 200

    onComboItemSelected: { console.log(index) }
}
</code></pre>

With this you can guarantee natural behavior of <code>ComboBox</code> and it is absolutely custom: you can style it as you want. So far this is the best option of customizable <code>ComboBox</code> I've seen anywhere.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1453</wp:post_id>
		<wp:post_date><![CDATA[2017-11-22 23:28:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-11-22 21:28:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ultimate-combobox-in-qml]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="combobox"><![CDATA[combobox]]></category>
		<category domain="post_tag" nicename="custom"><![CDATA[custom]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="qml"><![CDATA[qml]]></category>
		<category domain="post_tag" nicename="qt"><![CDATA[qt]]></category>
		<category domain="category" nicename="qt"><![CDATA[Qt]]></category>
		<category domain="post_tag" nicename="quick"><![CDATA[quick]]></category>
		<category domain="post_tag" nicename="ui"><![CDATA[ui]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fuller Stack Development</title>
		<link>http://code.jamming.com.ua/fuller-stack-development/</link>
		<pubDate>Thu, 01 Feb 2018 22:21:09 +0000</pubDate>
		<dc:creator><![CDATA[latobcode]]></dc:creator>
		<guid isPermaLink="false">http://code.jamming.com.ua/?p=1488</guid>
		<description></description>
		<content:encoded><![CDATA[That's awesome how many Full-Stack Developers are out there nowadays: full Node.js stack or ASP.NET or what not is popular. However, this is a story of a completely different "stack".

I truly believe that software-only engineers somewhere deep inside are always dreaming of pilgrimage to the sacred temples of Hardware and Electronics. All those wires, volts, chips and firmware are just too interesting to avoid them when you only deal with computers above the Transport layer. Basically that's how I was seduced to the dark side, on my own.

I has already been looking for a possibility to do something "forbidden" for quite some time. Words like soldering, Arduino, IO pins, "10K resistor before LED" were constantly spinning in my head but I didn't have just any time for it. Luckily, this month my brother was going to visit me for a week so I decided it would be a perfect time to do some hacking together.

Apparently it was hard to come up with an idea of what exactly to do. Of course, I wanted to do something "special" right ahead but I had to admit I didn't have any basic knowledge about that stuff. After some research I decided to start with something simple: to create first iteration of "smart home". Particularly I wanted to know <strong>what temperature is in every room of the apartment I live in</strong>. And plan to implement that was the following:
<ul>
 	<li>Arduino will read temperature with sensor DHT22 and send data with 433MHz module</li>
 	<li>Raspberry Pi will receive data with 433MHz module and save it to DB</li>
 	<li>Raspberry Pi will serve simple website where you can see the data</li>
 	<li>once that will work, create "real" sensor based on Arduino Mini</li>
</ul>
<!--more-->
<h4>Hardware/Firmware</h4>
First part to implement was transmitter-receiver with Arduino-RaspberryPi respectively. After reading manuals to 433MHz module I brought in the local shop, this simple prototype has been assembled with Raspberry Pi:

[caption id="attachment_1493" align="aligncenter" width="697"]<a href="http://code.jamming.com.ua/wp-content/uploads/2018/01/20180122_125214.jpg"><img class="wp-image-1493 size-large" src="http://code.jamming.com.ua/wp-content/uploads/2018/01/20180122_125214-1024x683.jpg" alt="" width="697" height="465" /></a> Yes, you have to solder antenna on your own[/caption]

In order to check if radio channel is working at all we chose <a href="https://github.com/ninjablocks/433Utils">433_Utils</a>. They provide an app which just prints everything it receives via 433MHz receiver to <code>stdout</code>. Please keep in mind that you only need to connect input pin to Raspberry Pi's Pin 21 on model B (27 on newer models) since <em>433MHz receiver only generates interrupts, not GPIO inputs</em>.

As for the Arduino - connecting transmitter was a lot easier and there're many examples with <a href="https://github.com/sui77/rc-switch">RC-switch</a> library to do that.
<pre><code class="language-clike">// just send "42" each 5 seconds
// and blink with LED when we send
#include "RCSwitch.h"

#define RADIO_PIN 8
#define LED_PIN 13

RCSwitch tempSwitch = RCSwitch();

void setup() {
   tempSwitch.enableTransmit(RADIO_PIN);
   pinMode(LED_PIN, OUTPUT);
}

void loop() {
  int message = 42;
  tempSwitch.send(message, 32);

  digitalWrite(LED_PIN, HIGH);
  delay(500);
  digitalWrite(LED_PIN, LOW);

  delay(5000);
}
</code></pre>
&nbsp;
[caption id="attachment_1494" align="aligncenter" width="697"]<a href="http://code.jamming.com.ua/wp-content/uploads/2018/01/20180122_125103.jpg"><img class="size-large wp-image-1494" src="http://code.jamming.com.ua/wp-content/uploads/2018/01/20180122_125103-1024x683.jpg" alt="" width="697" height="465" /></a> Yes, and you have to solder another antenna to transmitter as well[/caption]
<h4>Protocol</h4>
After verifying that messaging over 433MHz works, now it's time to send useful information. To get temperature reading we will use sensor DHT22, which is very easy to add to the Arduino. You have also to include DHT library of version <code>1.2.3</code> since <code>1.3.0</code> is broken for some reason. Now the time has come to come up with some sort of protocol to transmit temperatures to Raspberry Pi. We needed to know ID of the sensor and temperature it reports. We operate on 32-bit integers for sending so I came up with the following simple protocol:

<a href="http://code.jamming.com.ua/wp-content/uploads/2018/02/temperature-protocol.png"><img class="aligncenter size-full wp-image-1498" src="http://code.jamming.com.ua/wp-content/uploads/2018/02/temperature-protocol.png" alt="" width="689" height="207" /></a>

So we will be sending 6-bit header, specifying that it's our protocol, 6-bit sensor ID (having maximum 64 sensors in our apartment) 14-bit temperature and 6-bit checksum to verify everything arrived correctly. To encode temperature we can use only integer values. We know that sensor operates from -40 to 80 degrees so we can do fixed-point encoding where data that we send will be just number of steps from <code>TEMP_MIN + TEMP_STEP * value</code>. Using such encoding we could send temperature readings with quite decent resolution of <code>0.0073852539</code> degree.

Last step to polish the firmware was to add a delay of 10 minutes instead of 5 seconds, because temperature in the apartment does not change that often and we need to save power for Arduino if it will be autonomous.
<h4>Temperature Server</h4>
Next thing to work on was our own server on Raspberry Pi which will save those temperatures. Just 433_Utils app which prints raw data to <code>stdout</code> was no longer enough. Of course, we needed a database for that as well. I chose <strong>SQLite</strong>: for an application on C++ which was receiving data from sensor and needed to save it somewhere this was the easiest option in my opinion. Of course it does not have <em>delta encoding</em> and it's probably bad for saving time series but for the load arriving from 64 sensors at maximum it is probably more than OK.

<code>main()</code> was only about reading data from RCswitch library and trying to parse integers out of it:
<pre><code class="language-clike">const int IO_PIN = 2;
tempSwitch = RCSwitch();
tempSwitch.enableReceive(IO_PIN);
log("Listening on pin %d...", IO_PIN);

sqlite3 *db = 0;
initializeDatabase(db);
if (!createTemperatureTable(db)) {
    log("Failed to create table in DB");
    return DB_ERROR;
}

sqlite3_stmt *insertStatement = 0;
insertStatement = prepareInsertTempStmt(db);
if (insertStatement == 0) {
    log("Failed to create INSERT statement");
    return DB_ERROR;
}

while (1) {
    if (tempSwitch.available()) {
        int value = tempSwitch.getReceivedValue();
        tempSwitch.resetAvailable();

        handleReading(db, insertStatement, (unsigned int)value);
    }
}
</code></pre>
where <code>handleReading()</code> is parsing the message and saving temperature to the database.
<h4>Web server</h4>
The other piece of software to write was a web server to show the temperature through local website. I had many options for language for such a task - Ruby, Python, Go would easily fit. The point was to do as little work as possible so we choose Go.

The webserver was supposed to do 2 main functions: to produce json replies for REST API (GET request) and to serve static webpage with some javascript which fetches the readings and renders them.

The former requirement was implemented using custom type with prepared SQLite statement which implemented <code>http.Handler</code> interface. The latter requirement - just with default <code>http.FileServer</code> call. Main function looked like this:
<pre><code class="language-clike">handler := &amp;TempHandler{}
err = handler.initDatabase()
if err != nil { return }

http.Handle("/", http.FileServer(http.Dir("./www"))) 
http.Handle("/temps", handler) 

err = http.ListenAndServe(":8080", nil)
</code></pre>
<h4>Front End</h4>
Directory <code>www</code> contained 2 files: <code>index.html</code> and <code>homeinsights.js</code>. Html page only had a bare skeleton with one <code>div</code> element with an ID for charts. We chose <strong>D3.js</strong> for plotting and javascript file only requested json with reading from Go webserver and rendered them on a chart.
<pre><code class="language-clike">window.onload = function () {
    var url = document.URL + 'temps?lastn=150';

    d3.json(url, function(data) {
        if (data) {
            var groupData = data.groupBy('sensorID');
    
            var line = d3.line()
                .x(function(d) { return xScale(mapDate(d)); })
                .y(function(d) { return yScale(mapTemp(d)); });

            d3.select('#linechart')
                 .append('svg').append('g')
                 .selectAll('g.charts')
                 .data(groupData).enter()
                 .append('g').append('path')
                 .attr("stroke-width", 2)
                 .attr('d', function(d) { return line(d);});
            }
        }
    });
};
</code></pre>
&nbsp;
[caption id="attachment_1502" align="aligncenter" width="697"]<a href="http://code.jamming.com.ua/wp-content/uploads/2018/02/temps-website.png"><img class="wp-image-1502 size-large" src="http://code.jamming.com.ua/wp-content/uploads/2018/02/temps-website-1024x658.png" alt="" width="697" height="448" /></a> Screenshot of the website[/caption]
<h4>"Production" prototype</h4>
Now, when everything was sort of working, the time has come to create a first "prototype". In other words, replace huge and bulky Arduino UNO with Arduino Mini. The latter does not have convenient usb port to flush the firmware through so you need something more fancy. Luckily, if you have Arduino UNO everything you need to do is just to remove ATmega328P chip and you can flush Mini straight ahead if you will connect power, ground, TX, RX and Reset pins from UNO to Mini.

The other thing to consider is that if you have few prototypes, you will need to change <code>SENSOR_ID</code> in the firmware each time you flush in order to distinguish the sensors you put in different rooms/floors/etc.

[caption id="attachment_1503" align="aligncenter" width="697"]<a href="http://code.jamming.com.ua/wp-content/uploads/2018/02/arduino-mini-dht-433.jpg"><img class="size-large wp-image-1503" src="http://code.jamming.com.ua/wp-content/uploads/2018/02/arduino-mini-dht-433-1024x576.jpg" alt="" width="697" height="392" /></a> First prototype ready to be connected to the power source[/caption]
<h4>The end</h4>
So this is how embedded programming stack of this project looks like: from IO Pins, volts and radio signals to backends, databases, servers and frontend which displays it. <em>A little bit fuller than just full.</em>

The system described is currently working in my home. It's very interesting to observe the temperature trends at night or after opening a window (it's winter right now). It was very interesting experience building it from scratch to a working prototype which is at least somehow useful.

All code is available in the <a href="https://github.com/ribtoks/homeinsights">repository at GitHub</a>. You can find detailed instruction in the README. Feel free to make use of it or contribute. Code is in the <code>temperature/</code> directory since I plan to add more applications of Arduino for my home.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1488</wp:post_id>
		<wp:post_date><![CDATA[2018-02-02 00:21:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-01 22:21:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[fuller-stack-development]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="arduino"><![CDATA[arduino]]></category>
		<category domain="category" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="dht"><![CDATA[dht]]></category>
		<category domain="post_tag" nicename="embedded"><![CDATA[embedded]]></category>
		<category domain="category" nicename="embedded"><![CDATA[Embedded]]></category>
		<category domain="post_tag" nicename="golang"><![CDATA[golang]]></category>
		<category domain="post_tag" nicename="iot"><![CDATA[iot]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="raspberry-pi"><![CDATA[raspberry pi]]></category>
		<category domain="post_tag" nicename="sensor"><![CDATA[sensor]]></category>
		<category domain="post_tag" nicename="sqlite"><![CDATA[sqlite]]></category>
		<category domain="post_tag" nicename="temperature"><![CDATA[temperature]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
